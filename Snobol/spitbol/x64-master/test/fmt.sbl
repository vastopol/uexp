* reformat minimal code to use tabs and more free-form input
* fixed format:
* 	 8	opcode
*	13	arguments
*	30	comments

* this version just inserts spaces so opcode starts at 9, arguments at 17, end comments at 32 (with '; ' prefix)
* a separate program can then be used to replace runs of blanks with tabs where appropriate

* dave shields	jan 2015

	&anchor = &trim = 1
	tab = char(9)
	whitespace = span(' ')

loop
	label = opcode = args = comment = text =

* copy comments, conditional assembly, and stmts with opcode but no args or comment

	line = input				:f(end)
	line ';'				:s(copy.line)
	line '.'				:s(copy.line)

* just copy for certain opcodes.

	opcode = substr(line,8,3)
	ident(opcode,'dtc')			:s(copy.op)
	ident(opcode,'ejc')			:s(copy.op)
	ident(opcode,'err')			:s(copy.op)
	ident(opcode,'erb')			:s(copy.op)
	ident(opcode,'ttl')			:s(copy.op)

* done if just opcode with no args or comment

	le(size(line),10)			:s(copy.op)
* assume rest of line is argument string
	arg_comment = substr(line,13)
	arg_comment break(' ') . args span(' ') rem . comment :s(loop.1)
* if no whitespace then rest of line is just argument
	args = substr(line,13)
loop.1
	text = substr(line,1,7) ' '  substr(line,8,3) '     '  rpad(args,24)

* done if no comment

	lt(size(line,30))			:s(copy.text)

* append comment
	text = text '; ' comment 		:s(copy.text)
copy.comment

* insert space to align with opcode if possible

	line = ident(substr(line,1,7),';      ') '        ' substr(line,8)
copy.line
	text = line				:(copy.text)
copy.op	
	text = substr(line,1,7) ' ' opcode 
* add arguments and comment if present
	text = gt(size(text),10) text '     ' substr(line,13) 
						:(copy.text)
copy.text
	output = trim(text)			:(loop)
copy.ejc
	text = tab 'ejc'			:(copy.text)
end
	
	



