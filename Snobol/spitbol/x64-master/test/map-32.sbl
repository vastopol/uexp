* copyright 2012-2015 david shields
*
* this file is part of macro spitbol.
*
*     macro spitbol is free software: you can redistribute it and/or modify
*     it under the terms of the gnu general public license as published by
*     the free software foundation, either version 2 of the license, or
*     (at your option) any later version.
*
*     macro spitbol is distributed in the hope that it will be useful,
*     but without any warranty; without even the implied warranty of
*     merchantability or fitness for a particular purpose.  see the
*     gnu general public license for more details.
*
*     you should have received a copy of the gnu general public license
*     along with macro spitbol.  if not, see <http://www.gnu.org/licenses/>.
*
	&trim = 1
	&dump = 0
	isglobal = 0
	int0 = integer(char('0'))
	define('intof(off)val,i,str,c')
	define('global_init()')
	digits = table()
	digits['0'] = 0
	digits['1'] = 1
	digits['2'] = 2
	digits['3'] = 3
	digits['4'] = 4
	digits['5'] = 5
	digits['6'] = 6
	digits['7'] = 7
	digits['8'] = 8
	digits['9'] = 9
	digits['a'] = 10
	digits['b'] = 11
	digits['c'] = 12
	digits['d'] = 13
	digits['e'] = 14
	digits['f'] = 15

	global_init()

loop
	line = input			:f(finis)
	ne(size(line),16)		:s(loop)
	line len(8) . offset  ' '  any('dd')
+		' ' rem . name	:f(loop)
*	ident(global_index_table[name])	:s(loop)
	ioffset = intof(offset)
	base = ident(name, 'c_aaa') ioffset
*	output  = ident(name, 'c_aaa') 'base ' ioffset
 	output = name ' ' (ioffset - base)
	last_name = name
	differ(name,'w_yyy')		:s(loop)
*	output = 'last name ' last_name
loop.end
	:(finis)

intof
	intof = 0
	i = 0
	str = reverse(off)
	str = off
*	output = 'intof arg ' off
intof.1
	gt(i = i + 1, 8)		:s(return)
	c = substr(str,i,1)
	intof = intof * 16 + digits[c]
					:(intof.1)
	intof = intof - base		:(return)
global_init
	global_index_table = table(600)
	global_name_table = table(600)
	s =
+    'c_aaa alfsp bits0 bits1 bits2 bits3 bits4 bits5 bits6 '
+    'bits7 bits8 bits9 bit10 bit11 bit12 bitsm btfnc btknm '
+    'btlbl btffc btckw btkwv btprd btpre btval ccnms dmhdk '
+    'dmhdv encm1 encm2 encm3 encm4 encm5 endab endmo endml '
+    'endms endso endtu ermms ermns lstms headr headv gbsdp '
+    'int_r intv0 inton intv1 inttw intv2 intvt intvh intth '
+    'intab ndabb ndabd ndarc ndexb ndfnb ndfnd ndexc ndimb '
+    'ndimd ndnth ndpab ndpad nduna ndabo ndarb ndbal ndfal '
+    'ndfen ndrem ndsuc nulls nullw lcase ucase opdvc opdvp '
+    'opdvs opdvd opdvn oamn_ oamv_ oaon_ oaov_ ocer_ ofex_ '
+    'ofif_ ofnc_ ofne_ ofns_ ogof_ oinn_ okwn_ olex_ olpt_ '
+    'olvn_ onta_ ontb_ ontc_ opmn_ opms_ opop_ ornm_ orpl_ '
+    'orvl_ osla_ oslb_ oslc_ osld_ ostp_ ounf_ opsnb opnsu '
+    'pfi2a pfms1 pfms2 pfms3 scarr sccod scexp scext scint '
+    'scnam scnum scpat scstr sctab scfil scfrt scnrt scrtn '
+    'scnmt stlim stndf stndl stndo stnvr stpm1 stpm2 stpm3 '
+    'stpm4 stpm5 stpm6 stpm7 strtu svctb tmasb tmbeb trbev '
+    'trbkv trxdr trxdc v_eqf v_gef v_gtf v_lef v_ltf v_nef '
+    'v_any v_arb v_arg v_bal v_end v_len v_leq v_lge v_lgt '
+    'v_lle v_llt v_lne v_pos v_rem v_set v_tab v_cas v_chr '
+    'v_cod v_cop v_dat v_dte v_dmp v_dup v_evl v_ext v_fal '
+    'v_fil v_hst v_itm v_lin v_lod v_lpd v_rpd v_rps v_rtb '
+    'v_si_ v_srt v_spn v_stn v_tim v_trm v_abe v_abo v_app '
+    'v_abn v_arr v_brk v_clr v_ejc v_fen v_fld v_idn v_inp '
+    'v_lcs v_loc v_ops v_rmd v_rsr v_tbl v_tra v_ucs v_anc '
+    'v_bkx v_def v_det v_dif v_ftr v_lst v_nay v_oup v_ret '
+    'v_rew v_stt v_sub v_unl v_col v_com v_cnv v_enf v_etx '
+    'v_ert v_frt v_int v_nrt v_pfl v_rpl v_rvs v_rtn v_stx '
+    'v_stc v_stl v_suc v_alp v_cnt v_dtp v_erl v_fnc v_fls '
+    'v_lfl v_lln v_mxl v_ter v_bsp v_pro v_scn vdmkw vsrch '
+    'c_yyy cmlab w_aaa actrm aldyn allia allsv alsta arcdm '
+    'arnel arptr arsvl arfsi arfxs befof bpfpf bpfsv bpfxt '
+    'clsvi cnscc cnswc cnr_t cnvtp datdv datxs deflb defna '
+    'defvr defxs dmarg dmpsa dmpsb dmpsv dmvch dmpch dmpkb '
+    'dmpkt dmpkn dtcnb dtcnm dupsi enfch ertwa ertwb evlin '
+    'evlis evliv evlio evlif expsv gbcfl gbclm gbcnm gbcns '
+    'gbcia gbcsd gbcsf gbsva gbsvb gbsvc gnvhe gnvnw gnvsa '
+    'gnvsb gnvsp gnvst gtawa gtina gtinb gtnnf gtnsi gtpsb '
+    'gtssf gtsvc gtsvb gtvrc ioptt lodfn lodna pfsvw prnsi '
+    'prsna prsva prsvb prsvc prtsa prtsb prvsi psave psavc '
+    'rlals rldcd rldst rldls rtnbp rtnfv rtnsv sbssv scnsa '
+    'scnsb scnsc scnof srtdf srtfd srtff srtfo srtnr srtof '
+    'srtrt srts1 srts2 srtsc srtsf srtsn srtso srtsr srtst '
+    'srtwc stpsi stpti tfnsi xscrt xscwb g_aaa alfsf cmerc '
+    'cmpln cmpxs cmpsn cnsil cnind cnspt cnttl cpsts cswdb '
+    'cswer cswex cswfl cswin cswls cswno cswpr ctmsk curid '
+    'cwcof dnams erich erlst errft errsp exsts flprt flptr '
+    'gbsed gbcnt gtcef gtswk headp hshnb initr kvabe kvanc '
+    'kvcas kvcod kvcom kvdmp kverl kvert kvftr kvfls kvinp '
+    'kvmxl kvoup kvpfl kvtra kvtrm kvfnc kvlst kvlln kvlin '
+    'kvstn kvalp kvrtn kvstl kvstc lstid lstlc lstnp lstpf '
+    'lstpg lstpo lstsn mxlen noxeq pfdmp pffnc pfstm pfetm '
+    'pfnte pfste pmdfl pmhbs pmssl polcs polct prich prstd '
+    'prsto prbuf precl prlen prlnw profs prtef rdcln rdnln '
+    'rsmem stmcs stmct a_aaa cmpss dnamb dnamp dname hshtb '
+    'hshte iniss pftbl prnmv statb state stxvr r_aaa r_arf '
+    'r_ccb r_cim r_cmp r_cni r_cnt r_cod r_ctp r_cts r_ert '
+    'r_etx r_exs r_fcb r_fnc r_gtc r_ici r_ifa r_ifl r_ifn '
+    'r_inc r_io1 r_io2 r_iof r_ion r_iop r_iot r_pms r_ra2 '
+    'r_ra3 r_rpt r_scp r_sfc r_sfn r_sxl r_sxr r_stc r_stl '
+    'r_sxc r_ttl r_xsc r_uba r_ubm r_ubn r_ubp r_ubt r_uub '
+    'r_uue r_uun r_uup r_uus r_uux r_yyy scnbl scncc scngo '
+    'scnil scnpt scnrs scnse scntp stage stbas stxoc stxof '
+    'timsx timup xsofs w_yyy '
g.loop
	s break(' ') . name ' ' =	:f(g.loop.end)
	global_count = global_count + 1
	global_name_table[global_count] = name
	global_index_table[name] = global_count
	global_names = array(global_count)
					:(g.loop)
g.loop.end
	i = 0
gg.loop
	gt(i = i = 1, global_count)	:s(gg.loop.end)
	global_names[i] = name
gg.loop.end

					:(return)
finis
	&dump = 0
end

