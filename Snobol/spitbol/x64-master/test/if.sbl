-title lex: phase 1 translation from minimal to lexemes (lexemes)
-stitl initialization
* copyright 1987-2012 robert b. k. dewar and mark emmer.
* copyright 2012-2015 david shields
*
* this file is part of macro spitbol.
*
*     macro spitbol is free software: you can redistribute it and/or modify
*     it under the terms of the gnu general public license as published by
*     the free software foundation, either version 2 of the license, or
*     (at your option) any later version.
*
*     macro spitbol is distributed in the hope that it will be useful,
*     but without any warranty; without even the implied warranty of
*     merchantability or fitness for a particular purpose.  see the
*     gnu general public license for more details.
*
*     you should have received a copy of the gnu general public license
*     along with macro spitbol.  if not, see <http://www.gnu.org/licenses/>.
*
*
*
*  syntax error handler.
*
synerr output = incnt '(syntax error):' rdline            :(rdline)
*
*  process define
*
defop  ident( condvar )				:s(synerr)
       differ( ignore_defs )			:s(rdline)
       eq( level )				:s(defok)
       eq( processrec[result(top),mode(top)] )	:s(rdline)
defok  symtbl[condvar] = 1			:(rdline)
*
*  process undefine
*
undefop
       ident( condvar )				:s(synerr)
       eq( level )				:s(undok)
       eq( processrec[result(top),mode(top)] )	:s(rdline)
undok  symtbl[condvar] =			:(rdline)
*
*  process if
*
ifop   ident( condvar )				:s(synerr)
       eq( level )				:s(ifok)
*
*  here for .if encountered during bypass state.
*
       ne( processrec[result(top),mode(top)] )  :s(ifok)
       level    = level + 1
       top      = statestk[level] = state(bypass,then)    :(rdline)
*
*  here for .if to be processed normally.
*
ifok   level    = level + 1
       top      = statestk[level] = state(
.	             ( differ( symtbl[condvar] ) true,false ),
.	             then )			:(rdline)
*
*  process .then
*
thenop	differ(condvar)				:s(synerr)
	eq(level)				:s(synerr)f(rdline)
*
*  process .else
*
elseop	differ(condvar)				:s(synerr)
	mode(top) = ne( level ) else		:s(rdline)f(synerr)
*
*  process .fi
*
fiop	differ(condvar)				:s(synerr)
	level = ne( level ) level - 1		:f(synerr)
	top   = ( ne( level ) statestk[level],'' )     :(rdline)
*
*  statestk maintains all state information while processing conditional
*  statements.  level indexes the top entry.  another variable, top,
*  has a copy of savestk[level].
*
       statestk    = array( 30 )
       level       = 0
       top         =
*
*  each state entry in statestk contains state information about
*  the processing for each active .if.  the state is maintained
*  as 2 fields:
*
*      result    the result of the .if expression evaluation-
*                true, false, or bypass
*
*      mode      whether processing then or else portion of .if
*
       data( 'state(result,mode)' )
       false    = 0
       true     = 1
       bypass   = 2
       else     = 0
       then     = 1
*
*  processrec is indexed by the current result and mode to determine
*  whether or not a statement should be processed and written to the
*  output file.
*
       processrec    = array( false ':' bypass ',' else ':' then,0 )
       processrec[true,then]  = 1
       processrec[false,else] = 1
*
*  p.condasm breaks up conditional assembly directives.
*
       sep      = ' '
       p.condasm      = ( break(sep) | rem ) . condcmd
.	          ( span(sep) | '' )
.	          ( break(sep) | rem ) . condvar
*
*



*  catab is the transfer vector for routing control to generators
*  for conditional assembly directives.
*
       catab = table( 11,,.badop )
       catab['.def']   = .defop; catab['.undef'] = .undefop
       catab['.if']    = .ifop; catab['.then']  = .thenop
       catab['.else']  = .elseop; catab['.fi']    = .fiop



	leq( substr( rdline,1,1 ),'.' )		:f(other)
	rdline ? p.condasm			:s( $catab[condcmd] )
rl00	leq( substr( rdline,1,1 ),';' )		:f(rl01)
