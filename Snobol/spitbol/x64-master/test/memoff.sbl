* copyright 2012-2015 david shields
*
* this file is part of macro spitbol.
*
*     macro spitbol is free software: you can redistribute it and/or modify
*     it under the terms of the gnu general public license as published by
*     the free software foundation, either version 2 of the license, or
*     (at your option) any later version.
*
*     macro spitbol is distributed in the hope that it will be useful,
*     but without any warranty; without even the implied warranty of
*     merchantability or fitness for a particular purpose.  see the
*     gnu general public license for more details.
*
*     you should have received a copy of the gnu general public license
*     along with macro spitbol.  if not, see <http://www.gnu.org/licenses/>.
*
* 	compute offset of variables in constant and working section from start of constant section
*	assume first two entries in input are for c_aaa and w_yyy, respectively.
	&anchor = 1
	&trim = 1
	&dump = 0
	isglobal = 0
	int0 = integer(char('0'))
	define('intof(off)val,i,str,c')
	define('global_init()')
	digits = table()
	digits['0'] = 0
	digits['1'] = 1
	digits['2'] = 2
	digits['3'] = 3
	digits['4'] = 4
	digits['5'] = 5
	digits['6'] = 6
	digits['7'] = 7
	digits['8'] = 8
	digits['9'] = 9
	digits['a'] = 10
	digits['b'] = 11
	digits['c'] = 12
	digits['d'] = 13
	digits['e'] = 14
	digits['f'] = 15

	digit = any('0123456789')

	reverse_label__name =  digit digit digit digit digit '_'

	global_init()

	offsetof = table(5000)
	lpat = len(16) . offset ' ' len(1) . typ ' ' rem . name

loop
	line = input			:f(loop.end)
	ne(size(line),24)		:s(loop)
	line lpat 			:f(loop)
*	only want data symbols
	typ any('dD')			:f(loop)
*	ident(global_index_table[name])	:s(loop)
	ioffset = intof(offset)
	base = ident(name, 'c_aaa') ioffset
*	output = ne(remdr(ioffset,4)) 'not aligned ' name
*	output  = ident(name, 'c_aaa') 'base ' ioffset
* 	output = name ' ' (ioffset - base)
	off = ioffset - base
	offsetof[name] = +off
					:(loop)
loop.end
*	output offsets, sorted by value
	ara = sort(offsetof,2)
	i = 0
loop.out
	i = i + 1
	key = ara[i,1]			:f(end)
	val = ara[i,2]
	output = lpad(key,8) ' ' val	:(loop.out)
	:(finis)

intof
	intof = 0
	i = 0
	str = reverse(off)
	str = off
*	output = 'intof arg ' off
intof.1
	gt(i = i + 1, 16)		:s(return)
	c = substr(str,i,1)
	intof = intof * 16 + digits[c]
					:(intof.1)
	intof = intof - base		:(return)
finis
	&dump = 0
end

