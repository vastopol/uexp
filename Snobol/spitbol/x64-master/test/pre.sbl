*	simple pre-processor for multi-line comments and conditional assembly.

	target = (differ(host(0)) host(0), 'unix_64_asm')
	target break('_') . os '_' break('_') . ws '_' rem . asm

*	defined tracks defined conditional symbols.  (undefined symbols are assigned null values in defined.)

	defined      = table( 11 )

	defined[asm] = defined[os] = defined[ws] = 1
	defined['1'] = 1

	&anchor = &trim = 1
	&dump = 3


*	catab is the transfer vector for routing control to generators for conditional assembly directives.

	catab = table( 11,,.cond.bad )
	catab['.def']   = .cond.def; 	catab['.undef'] = .cond.undef
	catab['.if']    = .cond.if; 	catab['.then']  = .cond.then
	catab['.else']  = .cond.else; 	catab['.fi']    = .cond.fi

*	stack maintains all state information while processing conditional statements.  
*	level indexes the top entry.  another variable, top, has a copy of savestk[level].

	stack    = array( 30 )
	level       = 0
	top         =

*	each state entry in stack contains state information about the processing for each active .if.
*	the state is maintained as 2 fields:

*		result	the result of the .if expression evaluation- true, false, or bypass
*		mode	whether processing then or else portion of .if

	data( 'state(result,mode)' )
	false    = 0
	true     = 1
	bypass   = 2
	else     = 0
	then     = 1

*	processrec is indexed by the current result and mode to determine whether or not a statement should be processed 
*	and written to the output file.

	processrec    = array( false ':' bypass ',' else ':' then,0 )
	processrec[true,then]  = 1
	processrec[false,else] = 1

*  p.condasm breaks up conditional assembly directives.

	sep      = ' '

	p.condasm      = ( break(sep) | rem ) . condcmd ( span(sep) | '' ) ( break(sep) | rem ) . condvar

	skip = 0
	:(next)
copy
	output = line
next
	line = input							:f(finis)
	lines = lines + 1

	leq(substr(line,1,1),'.')					:f(other)

	lt(size(line),2)						:s(copy)
	lne(substr(line,1,1),'.')					:s(other)

*	look for possible statement continuation lines beginning with '.'

	leq(substr(line,1,2),'. ')					:s(copy)
	leq(substr(line,1,2),'.' char(9))				:s(copy)

	line ? p.condasm						:s($catab[condcmd])
text

*	here to process text line. See if inside body of comment.

	differ(com)							:s(com.inside)


*	look for extended comment, starts with line '/*' and ends with '*/'.
*	here when in normal text, looking for extended comment

	line '/*' = 							:f(copy)
	com = 1								:(copy)

com.inside

*	here if inside extended comment, look for closing line
	line '*/' = 							:f(com.fix)

	com =  								:(copy)

com.fix

*	here to insert comment character at start of line in extended comment body
	line = comment_char  line					:(copy)

other
	eq(level)							:s(text)
	eq(processrec[result(top),mode(top)])				:s(next)f(text)

*  process define

cond.def  
	ident( condvar )						:s(cond.err)
	ne(level) eq(processrec[result(top),mode(top)]	)		:s(next)
	defined[condvar] = 1						
	comment_char = ident(condvar,'comment_asterisk') '*'
	comment_char = ident(condvar,'comment_semicolon') ';'
	comment_char = ident(condvar,'comment_number') '#'
									:(next)

*  process undefine

cond.undef
	ident(condvar)						:s(cond.err)
	ne(level) eq(processrec[result(top),mode(top)])		:s(next)
	defined[condvar] =						:(next)

*  process if
cond.if   
	ident( condvar )						:s(cond.err)
	eq( level )							:s(ifok)

*  here for .if encountered during bypass state.

	ne(processrec[result(top),mode(top)]) 	 			:s(ifok)
	level    = level + 1
	top      = stack[level] = state(bypass,then)    		:(next)
ifok   
	level    = level + 1
	top      = stack[level] = state(( differ( defined[condvar] ) true,false ), then) :(next)

*	process .then
cond.then
	differ(condvar)							:s(cond.err)
	eq(level)							:s(cond.err)f(next)

*	process .else
cond.else
	differ(condvar)							:s(cond.err)
	mode(top) = ne(level) else					:s(next)f(err)

*	process .fi
cond.fi
	differ(condvar)							:s(cond.err)
	level = ne(level) level - 1					:f(cond.err)
	top   = (ne(level) stack[level],'')     			:(next)

cond.bad
	&dump = 3
	output =  ' bad condcmd:' cndcmd ':' line ':'			:(finis)
cond.err
	&dump = 3
	terminal = 'unknown conditional assembly command'
	terminal = 'line:' line						:(finis)
err
	&dump = 3
	terminal = 'error, line: ' line
									:(finis)
finis
	&dump = 0
end
