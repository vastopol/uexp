.def comment_asterisk
* copyright 2012-2015 david shields
*
* this file is part of macro spitbol.
*
*	macro spitbol is free software: you can redistribute it and/or modify it under the terms of the 
*	gnu general public license as published by the free software foundation, either version 2 of the license, or
*	(at your option) any later version.
*
*	macro spitbol is distributed in the hope that it will be useful, but without any warranty; without even 
*	the implied warranty of merchantability or fitness for a particular purpose.  see the gnu general 
*	public license for more details.
*
*	you should have received a copy of the gnu general public license along with macro spitbol.  
*	if not, see <http://www.gnu.org/licenses/>.
*

*	expand symbolic definitions for target environment as input to assembler

	define('a(text)')
	define('address(text)')
	define('adr(line)')
	define('epilog()')
	define('error(text)')
	define('g(text)')
	define('gen()')
	define('macro(line)first,last,num')
	define('memory(line)ref')
	define('out(opc,op1,op2)')
	define('parse(line)comma,i,c,lev')
	define('prolog()')
	define('swap()')

	&anchor = 1
	&dump = 3

	&trim = 1

	target = (differ(host(0)) host(0), "unix_64_gas") 
	target break('_') . os '_' break('_') . ws '_' rem . asm

	comment_char = (ident(asm,'asm') ';', '#')
	output  = comment_char ' def: os ' os '  ws ' ws '  asm  ' asm

	tab = char(9)
	whitespace = ' ' tab
	letters = &ucase &lcase '_'
	digits = '0123456789'
	id_chars = letters digits

	ops = ' add align and byte byte cdq char char cmp cmpb dec endmacro equ extern fill global '
+		'declarebyte declarechar declarereal declareword '
+		'idiv imul inc jmp lea macro mov neg not or real sal sar section sub word xchg xor '

*	create map from Minimal registers to hardware register name, create map from 'low' 
*	register names to corresponding gas names 

	regpat =  ('IA' | ('X' any('LRST')) | ('W' any('ABC0')) )
	lowpat = 'W' any('ABC0') '_L'
	regmap = table(20)
	p = g('%') (eq(ws,32) 'e', 'r')
	regmap['XL'] = p 'si'; regmap['XR'] = p 'di'; regmap['XS'] = regmap['XT'] = p 'sp';
	regmap['WA'] = p 'cx'; regmap['WB'] = p 'bx'; regmap['WC'] = p 'dx'; regmap['W0'] = p 'ax';
	lowmap = table(4)
	p = g('%')
	lowmap['W0_L'] = p 'al'; lowmap['WA_L'] = p 'cl'; lowmap['WB_L'] = p 'bl'; lowmap['WC_L'] = p 'dl'

.if gas
	macro_args = table(4)
	macro_args['1'] = 'arg1'
	macro_args['2'] = 'arg1,arg2'
	macro_args['3'] = 'arg1,arg2,arg3'
	macro_args['4'] = 'arg1,arg2,arg3,arg4'
.fi

	prolog()				:(next)
copy
	output = differ(line) line
next

*	ignore null lines. copy full-line comments and lines with no upper-case characters.
*	only need to change lines with upper case character

	line = input				:f(finis)
	ident(line)				:s(next)
	line pos(0) any('#;')			:s(next)
.if gas
	&anchor = 0
	line	';' = '#'
	&anchor = 1
.fi
*	&anchor = 1

*	copy out line just consisting of label

	line pos(0) notany(id_chars)		:s(nolabel)
	line pos(0) span(id_chars) ':' rpos(0)	:s(copy)
nolabel
	inline = line

*	expand macro argument references

	line = macro(line)

*	no more to do unless there is upper case letter than may signify extended operation

	line break(&ucase)			:f(copy)
	parse(line)

*	Branch on valid opcode, just copy line to output otherwise

	c = substr(op,1,1)
	op_suffix = ident(asm,'gas') (eq(ws,32) 'l', 'q')	;* operator suffix needed for gas
	ops breakx(' ') ' ' op ' '		:f(nogen)
	line = gen()
nogen

*	Map minimal register names to hardware names

	line break('XW')			:f(regs.end)
	&anchor = 0
low.loop 	
	line lowpat . reg  = lowmap[reg]		:s(low.loop)
low.end
reg.loop 	
	line regpat . reg = prefix regmap[reg]	:s(reg.loop)
regs.end
	&anchor = 1

*	expand Adr(..) memory references

	line = adr(line)			

*	expand Mem_(..) memory references

	line = memory(line)			

						:(copy)

-stitl a(text)
*	emit text if using asm
a
.if asm
	a = text					
.fi
						:(return)	
-sitl	address(text)
*	expand address reference
address
.if asm
	address = '[' ref ']'
.fi
.if gas
	address = '$' ref
.fi
						:(return)
* here to resolve adr references
adr
	adr = line
	adr break('A')				:f(return)
adr.next
	adr breakx('A') . first 'Adr' bal . ref  rem . last = first address(ref) last	:f(return)
-stitl epilog()
*	generate code to appear at start of output
epilog
	ident(asm,'gas')			:(epilog.gas)
*	output standard definitions for asm

*	output = tab '%define'	tab	'cfp_b'	tab	(eq(ws,32) 4, 8)
*	output = tab '%define'	tab 	'cfp_c'	tab	(eq(ws,32) 4, 8)
*	output = tab '%define'	tab	'os '	tab	os
*	output = tab '%define'	tab	'ws'	tab	ws	
						:(return)
epilog.gas
						:(return)
-stitl error(text)
error
	output = '#  Error ???: ' inline		
	line = inline 				:(copy)
-stitl g(text)
*	emit text if using gas
g 
.if gas
	g = text					
.fi
						:(return)	
-stitl	gen()tmp
gen						:($('op.' op))

op.macro

.if asm
	output = '; nasm macro :' op ':' op1 ':' op2 ':  ' line
	op = '%macro'
	op1 = op1 ' ' op2; op2 =
.fi
.if gas
	op = '.macro'
.if unix
*	put all args for macro in op1 since using blank to separate name from argument list
	op1 = op1 ' ' macro_args[op2]			
	op2 =
.fi
.if osx
*	osx wants just the macro name, not anything about number of arguments
	op2 =
.fi
.fi
						:(op.done)

op.endmacro
	op = a('%endmacro') g('.endm')		:(op.done)

op.fill
.if asm
	op = 'times'
	op1 =  op1 ' db 0 '
.fi
.if gas
	op = '.fill'
	op1 = op1 ',1,0'
.fi
						:(op.done)
op.section
	op = ident(asm,'asm') 'section'
	op1 = ident(asm,'asm') '.' op1
	op = ident(asm,'gas') '.' op1
	op1 = ident(asm,'gas') ''		:(op.done)

op.align
	op = (ident(asm,'asm') 'align','.balign')	:(op.done)
op.dec
op.idiv
op.imul
op.inc
op.neg
op.not
	ident(asm,'asm')			:s(op.done)
	op = op (eq(ws,32) 'l','q')		:(op.done)

op.jmp
	:(op.done)
op.extern
.if asm
	line = tab 'extern' tab op1 :(copy)
.fi
.if gas
.if unix
	line = tab '.extern' tab op1 :(copy)
.fi
.if osx
					:(next)
.fi
.fi
op.global
.if asm
	line = tab 'global' tab op1	:(copy)
.fi
.if gas
.if unix
	line = tab '.global' tab op1	:(copy)
.fi
.if osx
*	line = tab '.glbl' tab op1	:(copy)
	:(next)
.fi
.fi

op.declarebyte
.if asm
	op = 'db'				:(op.done)
.fi
.if gas
	op = '.byte'				:(op.done)
.fi
	op = a('db') g('.byte')			:(op.done)
op.declarechar
.if asm
	op = 'db'				:(op.done)
.fi
.if gas
	op = '.ascii'				:(op.done)
.fi
	op = a('db') g('.ascii')		:(op.done)
op.declarereal
	op = a('dq') g('.double')		:(op.done)
op.declareword
	ident(asm,'gas')			:s(op.word.gas)
	op = (eq(ws,32) 'dd','dq')		:(op.done)
op.word.gas
	op = (eq(ws,32) '.long','.quad')	:(op.done)
op.equ
.if asm
	op = '%define'
	op1 = op1 ' ' op2; op2 =		;* separate with space, not comma
						:(op.done)	
.fi
.if gas
	op = '.set'				:(op.done)
.fi
op.eq
op.ne
	:(op.done)
op.add
op.and
op.cmp
op.lea
op.or
op.sal
op.sar
op.sub
op.xor
op.xchg
op.mov
	op = ident(asm,'gas') differ(op, 'jmp') op (eq(ws,32) 'l', 'q')	
	swap()					
						:(op.done)

op.cmpb
.if asm
	op = 'cmp'
.fi
						:(op.done)

.if gas
*	swap operand order if targeting gag
	swap()
.fi
						:(op.done)
op.cdq
	ident(op,'cdq') (eq(ws,32) 'cdq','cqo')			:s(op.done)

op.done
	gen = 
*	output  = 'op.done :' label ':' op ':' op1 ':' op2 ':' comment
	gen = (differ(label) label,'')  tab op
+		(differ(op1) tab op1,'')  (differ(op2) ',' op2,'') 
+		(differ(comment)  tab ' ' comment,'')
				:(return)
-stitl memory(line)ref
* here to resolve memory references
memory
	memory = line
	&anchor = 1
memory.next	
	memory breakx('W') . first 'Word(' bal . ref ')'  rem . last	:f(memory.next.char)

*	expand memory reference to word

	ref len(1) break(')') . ref
.if asm
	memory = first (eq(ws,32) 'dword','qword') '[' ref ']' last
.fi
.if gas
	memory = first ref last
.fi
memory.next.char

*	expand memory reference to word

	memory breakx('C') . first 'Char(' bal . ref ')'  rem . last :f(return)
	ref len(1) break(')') . ref
.if asm
	memory = first 'byte [' ref ']' last
.fi
.if gas
	memory = first ref last
.fi
	&anchor = 1
						:(return)
-stitl	macro(line)first,last,num
macro
	macro = line
	macro break('@')			:f(return)

macro.loop
	macro break('@') . first '@' len(1) . num rem . last	:f(return)
.if asm
	macro = first '%' num last
.fi
.if gas
.if unix
	macro = first '\arg' num last
.fi
.if osx
	macro = first '$' num last
.fi						
.fi
						:(macro.loop)						

-stitl	parse(line)label,op,op1,op2,comment,cimma,i,c,lev')
parse
	label = op = op1 = op2 = comment =
	line any(whitespace)			:s(parse.nolabel)
	line break(':') . label ':' =
	ident(line)				:s(parse.done)
parse.nolabel
	line = line ' '
	line span(whitespace) = 
	differ(line,'EndMacro_')		:s(parse.1)
	op = 'endmacro'		:(parse.args)
parse.1
	line break(whitespace) . op span(whitespace) =	:f(copy) 
	ident(line)				:s(parse.done)
	op break('_') . xop			:f(parse.args)
*	here for extended op
	op = replace(xop,&ucase,&lcase)
parse.args
	line break(whitespace) . args span(whitespace) =
	comment = line
	op1 = args
	args break(',')				:f(parse.done)

*	parse argument, looking for comma at level 0
*	Need to find comma (not enclosed in parentheses) that separates them
*	set op1 to args, will adjust later if turns out there are two args

	op1 = args
	comma = i = 0
	comma = parse = lev = 0
parse.next
	gt(i = i + 1,size(args))		:s(parse.done)
	c = substr(args,i,1)
	lev = ident(c,'(') lev + 1
	lev = ident(c,')') lev - 1
	ident(c,',') eq(lev,0)			:f(parse.next)
	op1 = substr(args,1,i - 1)
	op2 = substr(args,i + 1)
	
parse.done
						:(return)
-stitl prolog
*	generate code at end of output
prolog
	ident(asm,'gas')		:s(prolog.gas)
	output = tab '%define'	tab	'Cfp_b'	tab	(eq(ws,32) 4, 8)
	output = tab '%define' tab	'Log_cfp_b' tab  (eq(ws,32) 2, 3)
*	output = tab '%define'	tab 	'cfp_c'	tab	(eq(ws,32) 4, 8)
	output = tab '%define'	tab	'os '	tab	os
	output = tab '%define'	tab	'ws'	tab	ws	
						:(return)
prolog.gas
*	output standard definitions

	output = tab '.set' tab 'Cfp_b,'  (eq(ws,32) 4, 8)
	output = tab '.set' tab 'Log_cfp_b,' (eq(ws,32) 2, 3)
* 	output = tab '.set' tab 'cfp_c,' (eq(ws,32) 4, 8)
*	output = tab '.set' tab 'os ' ',' os
*	output = tab '.set' tab 'log_cfp_c,' (eq(ws,32) 2, 3)
*	output = tab '.set'	tab	'ws'	','	ws
					:(return)
-stitl swap()
*	swap operands if targeting gas
swap
.if gas
	swap = op1; op1 = op2; op2 = swap; swap =
.fi
						:(return)
finis
	epilog()
	&dump = 0
end

/*
.if asm
*	declare 'CFP_B' =  (eq(ws,32) '4','8')
*	declare 'CFP_C' =  (eq(ws,32) '4','8')
	declare 'M_real' = 'qword'
	declare 'M_word' = (eq(ws,32), 'dword', 'qword')
.fi
.if gas
*	declare 'CFP_B' =  (eq(ws,32) '4','8')
*	declare 'CFP_C' =  (eq(ws,32) '4','8')
	declare 'M_real' = 'qword'
	declare 'M_word' = (eq(ws,32), 'dword', 'qword')
.fi
*/
