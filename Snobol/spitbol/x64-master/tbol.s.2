#	unix and osx use differnt conventions for defining a macro. This one is for unix.
	.macro	syscall	cproc
       	popq	%rax			# save minimal return address
       	movq	%rax,reg_pc(%rip)	
       	call	syscall_init		# save registers
       	movq	%rsp,compsp(%rip)	# save minimal stack
       	movq	osisp(%rip),%rsp	# switch to osint stack
	call	\cproc			# call target procedure
       	call	syscall_exit		# save result, restore registers, switch back to minimal stack, and return
	.endm

	.macro	syscallf	cproc
       	popq	%rax			# save minimal return address
       	movq	%rax,reg_pc(%rip)	
       	call	syscallf_init		# save registers
       	movq	%rsp,compsp(%rip)	# save minimal stack
       	movq	osisp(%rip),%rsp	# switch to osint stack
	pushfq				# save flag register	
	movq	(%rsp),%rax
	movq	%rax,trc_fl(%rip)
	popq	%rax
	call	\cproc			# call target procedure
	movq	trc_fl(%rip),%rax	# restore flag register
	pushq	%rax
	popfq				
       	call	syscallf_exit		# save result, restore registers, switch back to minimal stack, and return
	.endm

# opyright 1987-2012 robert b. k. dewar and mark emmer.

# copyright 2012-2015 david shields
#
# this file is part of macro spitbol.
#
#     macro spitbol is free software: you can redistribute it and/or modify
#     it under the terms of the gnu general public license as published by
#     the free software foundation, either version 2 of the license, or
#     (at your option) any later version.
#
#     macro spitbol is distributed in the hope that it will be useful,
#     but without any warranty# without even the implied warranty of
#     merchantability or fitness for a particular purpose.  see the
#     gnu general public license for more details.
#
#     you should have received a copy of the gnu general public license
#     along with macro spitbol.  if not, see <http://www.gnu.org/licenses/>.


#	ws is bits per word, cfp_b is bytes per word, cfp_c is characters per word

	.data
#	.set	os,unix
#	.set	ws,64
	.set	cfp_b,8
	.set	cfp_c,8

	.set	flag_of,0x80
	.set	flag_cf,0x01
	.set	flag_ca,0x40

	.global	reg_block
	.global	reg_w0 
	.global	reg_wa
	.global	reg_wb
	.global	reg_ia
	.global	reg_wc
	.global	reg_xr
	.global	reg_xl
	.global	reg_cp
	.global	reg_ra
	.global	reg_rb
	.global	reg_pc
	.global	reg_xs
	.global	reg_size
	.global	reav1

	.global	reg_rp

	.global	c_minimal

#	values below must agree with calltab defined in osint/osint.h

	.set	minimal_relaj,0
	.set	minimal_relcr,1
	.set	minimal_reloc,2
	.set	minimal_alloc,3
	.set	minimal_alocs,4
	.set	minimal_alost,5
	.set	minimal_blkln,6
	.set	minimal_insta,7
	.set	minimal_rstrt,8
	.set	minimal_start,9
	.set	minimal_filnm,10
	.set	minimal_dtype,11
	.set	minimal_enevs,10
	.set	minimal_engts,12

	.set	globals,1                       #asm globals defined here


#       ---------------------------------------

#       this file contains the assembly language routines that interface
#       the macro spitbol compiler written in 80386 assembly language to its
#       operating system interface functions written in c.

#       contents:

#       o overview
#       o global variables accessed by osint functions
#       o interface routines between compiler and osint functions
#       o c callable function startup
#       o c callable function get_fp
#       o c callable function restart
#       o c callable function makeexec
#       o routines for minimal opcodes chk and cvd
#       o math functions for integer multiply, divide, and remainder
#       o math functions for real operation

#       overview

#       the macro spitbol compiler relies on a set of operating system
#       interface functions to provide all interaction with the host
#       operating system.  these functions are referred to as osint
#       functions.  a typical call to one of these osint functions takes
#       the following form in the 80386 version of the compiler:

#               ...code to put arguments in registers...
#               call    sysxx           # call osint function
#             .quad    exit_1          # address of exit point 1
#             .quad    exit_2          # address of exit point 2
#               ...     ...             # ...
#             .quad    exit_n          # address of exit point n
#               ...instruction following call...

#       the osint function 'sysxx' can then return in one of n+1 ways:
#       to one of the n exit points or to the instruction following the
#       last exit.  this is not really very complicated - the call places
#       the return address on the stack, so all the interface function has
#       to do is add the appropriate offset to the return address and then
#       pick up the exit address and jump to it or do a normal return via
#       an ret instruction.

#       unfortunately, a c function cannot handle this scheme.  so, an
#       intermediary set of routines have been established to allow the
#       interfacing of c functions.  the mechanism is as follows:

#       (1) the compiler calls osint functions as described above.

#       (2) a set of assembly language interface routines is established,
#           one per osint function, named accordingly.  each interface
#           routine ...

#           (a) saves all compiler registers in global variables
#               accessible by c functions
#           (b) calls the osint function written in c
#           (c) restores all compiler registers from the global variables
#           (d) inspects the osint function's return value to determine
#               which of the n+1 returns should be taken and does so

#       (3) a set of c language osint functions is established, one per
#           osint function, named differently than the interface routines.
#           each osint function can access compiler registers via global
#           variables.  no arguments are passed via the call.

#           when an osint function returns, it must return a value indicating
#           which of the n+1 exits should be taken.  these return values are
#           defined in header file 'inter.h'.

#       note:  in the actual implementation below, the saving and restoring
#       of registers is actually done in one common routine accessed by all
#       interface routines.

#       other notes:

#       some c ompilers transform "internal" global names to
#       "external" global names by adding a leading underscore at the front
#       of the internal name.  thus, the function name 'osopen' becomes
#       '_osopen'.  however, not all c compilers follow this convention.

#       global variables

#
# # words saved during exit(-3)
# #
	.balign 16
dummy:	.quad	0
reg_block:
reg_ia: .quad	0		# register ia (ebp)
reg_w0:	.quad	0        	# register wa (ecx)
reg_wa:	.quad	0        	# register wa (ecx)
reg_wb:	.quad 	0        	# register wb (ebx)
reg_wc:	.quad	0		# register wc
reg_xr:	.quad	0        	# register xr (xr)
reg_xl:	.quad	0        	# register xl (xl)
reg_cp:	.quad	0        	# register cp
reg_ra:	.double 	0.0  		# register ra
# reg_rb is used to pass argument to real operations
reg_rb:	.double 	0.0  		# register rb

# these locations save information needed to return after calling osint
# and after a restart from exit()

reg_pc: .quad	0               # return pc from caller
reg_xs:	.quad	0		# minimal stack pointer

#	r_size  equ       $-reg_block
	.set	r_size,80
reg_size:	.long   r_size

# end of words saved during exit(-3)

# reg_rp is used to pass pointer to real operand for real arithmetic
reg_rp:	.quad	0

# reg_fl is used to communicate condition codes between minimal and c code.
	.global	reg_fl
reg_fl:	.byte	0		# condition code register for numeric operations

	.balign	8
#  constants

	.global	ten
ten:    .quad      10              # constant 10
	.global  inf
inf:	.long	0
	.long      0x7ff00000      # double precision infinity
	.global	zero
zero:	.quad	0

	.global	sav_block
#sav_block: times r_size db 0     	# save minimal registers during push/pop reg
sav_block: .fill  440,1,0     		# save minimal registers during push/pop reg

	.balign 8
	.global	compsp
compsp: .quad      0               	# compiler's stack pointer
	.global	sav_compsp
sav_compsp:
	.quad      0               	# save compsp here
	.global	osisp
osisp:  .quad      0               	# osint's stack pointer
	.global	_rc_
_rc_:	.byte   0				# return code from osint procedure

	.balign	cfp_b
	.global	save_cp
	.global	save_xl
	.global	save_xr
	.global	save_wa
	.global	save_wb
	.global	save_wc
	.global	save_ia
save_cp:	.quad	0		# saved cp value
save_ia:	.quad	0		# saved ia value
save_xl:	.quad	0		# saved xl value
save_xr:	.quad	0		# saved xr value
save_wa:	.quad	0		# saved wa value
save_wb:	.quad	0		# saved wb value
save_wc:	.quad	0		# saved wc value

	.global	minimal_id
minimal_id:	.quad	0		# id for call to minimal from c. see proc minimal below.

	.global  id1blk
id1blk:	.quad   152
      	.quad   0
	.fill   152,1,0

	.global  id2blk
id2blk:	.quad   152
      	.quad	0
	.fill   152,1,0

	.global ticblk
ticblk:	.quad	0
	.quad   0

	.global  tscblk
tscblk: .quad   512
	.quad   0
	.fill   512,1,0

#       standard input buffer block.

	.global  inpbuf

inpbuf:	.quad	0			# type word
	.quad   0               	# block length
	.quad   1024            	# buffer size
	.quad   0               	# remaining chars to read
	.quad   0               	# offset to next character to read
	.quad   0               	# file position of buffer
	.quad   0               	# physical position in file
	.fill	1024,1,0        	# buffer

	.global  ttybuf

ttybuf:	.quad    0     # type word
	.quad    0               	# block length
	.quad    260             	# buffer size  (260 ok in ms-dos with cinread())
	.quad    0               	# remaining chars to read
	.quad    0               	# offset to next char to read
	.quad    0               	# file position of buffer
	.quad    0               	# physical position in file
	.fill   260,1,0	         	# buffer

	.global	spmin

spmin:	.quad	0			# stack limit (stack grows down for x86_64)
spmin.a:	.quad	spmin

	.balign	16
	.balign	8

call_adr:	.quad	0

init_ra:	.quad	0		# initial return address

	.text
#   ordinals for minimal calls from assembly language.

#   the order of entries here must correspond to the order of
#   calltab entries in the inter assembly language module.

	.set	calltab_relaj,0
	.set	calltab_relcr,1
	.set	calltab_reloc,2
	.set	calltab_alloc,3
	.set	calltab_alocs,4
	.set	calltab_alost,5
	.set	calltab_blkln,6
	.set	calltab_insta,7
	.set	calltab_rstrt,8
	.set	calltab_start,9
	.set	calltab_filnm,10
	.set	calltab_dtype,11
	.set	calltab_enevs,12
	.set	calltab_engts,13
	
#
#       startup( char *dummy1, char *dummy2) - startup compiler
#
#       an osint c function calls startup to transfer control
#       to the compiler.
#
#       (xr) = basemem
#       (xl) = topmem - sizeof(word)
#
#	note: this function never returns.
#
#
	.global	startup
startup:
	pop	%rax			# save return address
#	since we have popped return address, c stack is now aligned on 16-byte boundary.
	mov	%rax,init_ra(%rip)
#	initialize stack
#	stackinit  -- initialize stacks

#	input:  sp - current c stack
#		stacksiz - size of desired minimal stack in bytes

#	uses:	%rax

#	output: register wa, sp, spmin, compsp, osisp set up per diagram:

#	(high)	+----------------+
#		|  old c stack   |
#	  	|----------------| <-- incoming sp, resultant wa (future xs)
#		|	     ^	 |
#		|	     |	 |
#		/ stacksiz bytes /
#		|	     |	 |
#		|            |	 |
#		|----------- | --| <-- resultant spmin
#		| 400 bytes  v   |
#	  	|----------------| <-- future c stack pointer, osisp
#		|  new c stack	 |
#	(low)	|                |

#	initialize stack
#	movq	%rsp,%rax
	movq	%rsp,compsp(%rip)	# save minimal's stack pointer
	subq	stacksiz(%rip),%rsp	# end of minimal stack is where c stack will start
	movq	%rsp,%rax
	addq	$cfp_b*128,%rax	# 128 words smaller for chk (need multiple of 16 for mac osx)
	movq	%rax,spmin(%rip)
#	here with new c stack empty, and hence aligned on 16-byte boundary
	movq	init_ra(%rip),%rax	# get original return address
	pushq	%rax			# restore return address
	pushq	%rbp			# save frame pointer
	subq	$16,%rsp		# keep stack aligned
	movq	%rsp,osisp(%rip)	# save new c stack pointer

	mov	compsp(%rip),%rax		# get minimal's stack pointer
	mov	%rax,reg_wa(%rip)		# startup stack pointer

	cld				# default to up direction for string ops
	mov	osisp(%rip),%rsp	# switch to new c stack
#	initialize registers to values set by osint before calling startup
	movq	reg_ia(%rip),%r12
	movq 	reg_wa(%rip),%rcx	# restore registers
	movq	reg_wb(%rip),%rbx
	movq	reg_wc(%rip),%rdx	#
	movq	reg_xl(%rip),%rsi
	movq	reg_xr(%rip),%rdi
	xorq	%r12,%r12		# initialize IA to zero
	call	start

#	check for stack overflow, making %rax nonzero if found
	.global	chk_
chk_:
	xorq	%rax,%rax		# set return value assuming no overflow
	cmpq	spmin(%rip),%rsp
	jb	chk.oflo
	ret
chk.oflo:
	incq	%rax		# make nonzero to indicate stack overflo
	ret

#       call_mimimal -- call minimal function from c

#       usage:  extern void minimal(word callno)

#       where:
#         callno is an ordinal defined in osint.h, osint.inc, and calltab.

#       minimal registers wa, wb, wc, xr, and xl are loaded and
#       saved from/to the register block.

#       note that before restart is called, we do not yet have compiler
#       stack to switch to.  in that case, just make the call on the
#       the osint stack.

c_minimal:
#	this is just place holder, c_minimal should never be called. Cf. osint/sysxi.c.
# 	force error in case it is ever called.
	xorq %rax,%rax
	jmp *%rax
	ret



#       interface routines

#       each interface routine takes the following form:

#               sysxx   call    ccaller # call common interface
#                     .quad    zysxx   # dd      of c osint function
#                       db      n       # offset to instruction after
#                                       #   last procedure exit

#       in an effort to achieve portability of c osint functions, we
#       do not take take advantage of any "internal" to "external"
#       transformation of names by c compilers.  so, a c osint function
#       representing sysxx is named _zysxx.  this renaming should satisfy
#       all c compilers.

#       important  one interface routine, sysfc, is passed arguments on
#       the stack.  these items are removed from the stack before calling
#       ccaller, as they are not needed by this implementation.

#       ccaller is called by the os interface routines to call the
#       real c os interface function.

#       general calling sequence is

#               call    ccaller
#             .quad    address_of_c_function
#               db      2*number_of_exit_points

#       control is never returned to a interface routine.  instead, control
#       is returned to the compiler (the caller of the interface routine).

#       the c function that is called must always return an integer
#       indicating the procedure exit to take or that a normal return
#       is to be performed.

#               c function      interpretation
#               return value
#               ------------    -------------------------------------------
#                    <0         do normal return to instruction past
#                               last procedure exit (distance passed
#                               in by dummy routine and saved on stack)
#                     0         take procedure exit 1
#                     4         take procedure exit 2
#                     8         take procedure exit 3
#                    ...        ...


syscall_init:
#       save registers in global variables
	movq    %rcx,reg_wa(%rip)      # save registers
	movq	%rbx,reg_wb(%rip)
	movq	%rdx,reg_wc(%rip)
	movq	%rsi,reg_xl(%rip)
	movq	%rdi,reg_xr(%rip)
	movq	%r12,reg_ia(%rip)
	ret

syscallf_init:
#       save registers in global variables
	movq    %rcx,save_wa(%rip)      # save registers
	movq	%rbx,save_wb(%rip)
	movq	%rdx,save_wc(%rip)
	movq	%rsi,save_xl(%rip)
	movq	%rdi,save_xr(%rip)
	movq	%r12,save_ia(%rip)
	ret

syscall_exit:
	movq	reg_wa(%rip),%rcx      # restore registers
	movq	reg_wb(%rip),%rbx
	movq	reg_wc(%rip),%rdx      
	movq	reg_xr(%rip),%rdi
	movq	reg_xl(%rip),%rsi
	movq	reg_ia(%rip),%r12
	cld
	movq	%rax,_rc_(%rip)		# save return code from function
	movq	compsp(%rip),%rsp	# switch to compiler's stack 
	movq	reg_pc(%rip),%rax	# load return address
	jmp	*%rax			# return to caller

syscallf_exit:
	movq	save_wa(%rip),%rcx      # restore registers
	movq	save_wb(%rip),%rbx
	movq	save_wc(%rip),%rdx      
	movq	save_xr(%rip),%rdi
	movq	save_xl(%rip),%rsi
	movq	save_ia(%rip),%r12
	cld
	movq	compsp(%rip),%rsp	# switch to compiler's stack 
	movq	reg_pc(%rip),%rax	# load return address
	jmp	*%rax			# return to caller


	.global	M_rmi
#       rmi - remainder of ia (edx) divided by long in %rax
M_rmi:
	orq	%rax,%rax		# test for 0
	jz	setovr   	 	# jump if 0 divisor
	xchg	%rax,%r12         	# ia to %rax, divisor to ia
	cqo                    		# extend dividend
	idiv	%r12              	# perform division. %rax=quotient, wc=remainder
	seto	reg_fl(%rip)
	movq	%rdx,%r12
	ret

setovr: movb     $1,%al		# set overflow indicator
	movb	%al,reg_fl(%rip)
	ret


#       ovr_ test for overflow value in ra
	.global	ovr_
ovr_:
	lea	reg_ra(%rip),%rax
	add	$6,%rax
	movw	(%rax),%ax		# get top 2 bytes
	andw	0x7ff0,%ax             	# check for infinity or nan
	addw	0x10,%ax               	# set/clear overflow accordingly
	ret

	.global	get_fp			# get frame pointer
get_fp:
	movq	reg_xs(%rip),%rax     		# minimal's %rsp
	addq	$8,%rax           	# pop return from call to sysbx or sysxi
	ret                    		# done


#	scstr_off is offset to start of string in scblk, or two words
#	%define scstr_off	cfp_c+cfp_c
	.set	scstr_off,16

	.global	mxint

#	%ifdef zz_trace
#	%endif
	.global	start

	.data
trc_fl:	.quad	0			# used to save flags for trc calls
	.text
trc_:
	syscallf	trc_i
	ret


#   table to recover type word from type ordinal


	.global	typet
	.data

	.quad	b_art	# arblk type word - 0
	.quad	b_cdc	# cdblk type word - 1
	.quad	b_exl	# exblk type word - 2
	.quad	b_icl	# icblk type word - 3
	.quad	b_nml	# nmblk type word - 4
	.quad	p_aba	# p0blk type word - 5
	.quad	p_alt	# p1blk type word - 6
	.quad	p_any	# p2blk type word - 7
# next needed only if support real arithmetic cnra
#       .quad	b_rcl   # rcblk type word - 8
	.quad	b_scl	# scblk type word - 9
	.quad	b_sel	# seblk type word - 10
	.quad	b_tbt	# tbblk type word - 11
	.quad	b_vct	# vcblk type word - 12
	.quad	b_xnt	# xnblk type word - 13
	.quad	b_xrt	# xrblk type word - 14
	.quad	b_bct	# bcblk type word - 15
	.quad	b_pdt	# pdblk type word - 16
	.quad	b_trt	# trblk type word - 17
	.quad	b_bft	# bfblk type word   18
	.quad	b_cct	# ccblk type word - 19
	.quad	b_cmt	# cmblk type word - 20
	.quad	b_ctt	# ctblk type word - 21
	.quad	b_dfc	# dfblk type word - 22
	.quad	b_efc	# efblk type word - 23
	.quad	b_evt	# evblk type word - 24
	.quad	b_ffc	# ffblk type word - 25
	.quad	b_kvt	# kvblk type word - 26
	.quad	b_pfc	# pfblk type word - 27
	.quad	b_tet	# teblk type word - 28
#
#   table of minimal entry points that can be dded from c
#   via the minimal function (see inter.asm).
#
#   note that the order of entries in this table must correspond
#   to the order of entries in the call enumeration in osint.h
#   and osint.inc.
#
	.global calltab
calltab:
	.quad	relaj
	.quad	relcr
	.quad	reloc
	.quad	alloc
	.quad	alocs
	.quad	alost
	.quad	blkln
	.quad	insta
	.quad	rstrt
	.quad	start
	.quad	filnm
	.quad	dtype
#       .quad	enevs #  engine words
#       .quad	engts #   not used

	.global	b_efc
	.global	b_icl
	.global	b_rcl
	.global	b_scl
	.global	b_vct
	.global	b_xnt
	.global	b_xrt
	.global	c_aaa
	.global	c_yyy
	.global	dnamb
	.global	cswfl
	.global	dnamp
	.global	flprt
	.global	flptr
	.global	g_aaa
	.global	gbcnt
	.global	gtcef
	.global	headv
	.global	hshtb
	.global	kvstn
	.global	kvdmp
	.global	kvftr
	.global	kvcom
	.global	kvpfl
	.global	mxlen
	.global	polct
	.global	s_yyy
	.global	s_aaa
	.global	stage
	.global	state
	.global	stbas
	.global	statb
	.global	stmcs
	.global	stmct
	.global	timsx
	.global	typet
	.global	pmhbs
	.global	r_cod
	.global	r_fcb
	.global	w_aaa
	.global	w_yyy
	.global	end_min_data



# compressed spitbol error messages 
#






	.global	errors
errors:	.byte	0

#    1  "addition left operand is not numeric"
	.byte	166
	.byte	128
	.byte	0

#    2  "addition right operand is not numeric"
	.byte	166
	.byte	182
	.byte	0

#    3  "addition caused integer overflow"
	.byte	166
	.byte	139
	.byte	0

#    4  "affirmation operand is not numeric"
	.ascii	"affirmation "
	.byte	3
	.byte	8
	.byte	0

#    5  "alternation right operand is not pattern"
	.byte	228
	.byte	21
	.byte	3
	.byte	30
	.byte	0

#    6  "alternation left operand is not pattern"
	.byte	228
	.ascii	"left "
	.byte	3
	.byte	30
	.byte	0

#    7  "compilation error encountered during execution"
	.ascii	"compilation "
	.byte	154
	.ascii	" encountered "
	.byte	213
	.ascii	"execution"
	.byte	0

#    8  "concatenation left operand is not a string or pattern"
	.byte	205
	.ascii	"left "
	.byte	138
	.byte	0

#    9  "concatenation right operand is not a string or pattern"
	.byte	205
	.byte	21
	.byte	138
	.byte	0

#   10  "negation operand is not numeric"
	.ascii	"negation "
	.byte	3
	.byte	8
	.byte	0

#   11  "negation caused integer overflow"
	.ascii	"negation "
	.byte	139
	.byte	0

#   12  "division left operand is not numeric"
	.byte	162
	.byte	128
	.byte	0

#   13  "division right operand is not numeric"
	.byte	162
	.byte	182
	.byte	0

#   14  "division caused integer overflow"
	.byte	162
	.byte	139
	.byte	0

#   15  "exponentiation right operand is not numeric"
	.byte	25
	.byte	182
	.byte	0

#   16  "exponentiation left operand is not numeric"
	.byte	25
	.byte	128
	.byte	0

#   17  "exponentiation caused integer overflow"
	.byte	25
	.byte	139
	.byte	0

#   18  "exponentiation result is undefined"
	.byte	25
	.ascii	"result "
	.byte	24
	.ascii	"undefined"
	.byte	0

#   19  ""
	.byte	0

#   20  "goto evaluation failure"
	.byte	130
	.ascii	"evaluation failure"
	.byte	0

#   21  "function called by name returned a value"
	.byte	10
	.ascii	"called "
	.byte	204
	.ascii	"a value"
	.byte	0

#   22  "undefined function called"
	.byte	142
	.byte	10
	.ascii	"called"
	.byte	0

#   23  "goto operand is not a natural variable"
	.byte	130
	.byte	3
	.ascii	"a natural variable"
	.byte	0

#   24  "goto operand in direct goto is not code"
	.byte	130
	.ascii	"operand "
	.byte	202
	.ascii	"direct "
	.byte	130
	.byte	24
	.byte	19
	.ascii	"code"
	.byte	0

#   25  "immediate assignment left operand is not pattern"
	.ascii	"immediate "
	.byte	129
	.byte	0

#   26  "multiplication left operand is not numeric"
	.byte	137
	.byte	128
	.byte	0

#   27  "multiplication right operand is not numeric"
	.byte	137
	.byte	182
	.byte	0

#   28  "multiplication caused integer overflow"
	.byte	137
	.byte	139
	.byte	0

#   29  "undefined operator referenced"
	.byte	142
	.ascii	"operat"
	.byte	165
	.ascii	"referenced"
	.byte	0

#   30  "pattern assignment left operand is not pattern"
	.byte	30
	.ascii	" "
	.byte	129
	.byte	0

#   31  "pattern replacement right operand is not a string"
	.byte	30
	.byte	187
	.byte	0

#   32  "subtraction left operand is not numeric"
	.byte	143
	.byte	128
	.byte	0

#   33  "subtraction right operand is not numeric"
	.byte	143
	.byte	182
	.byte	0

#   34  "subtraction caused integer overflow"
	.byte	143
	.byte	139
	.byte	0

#   35  "unexpected failure in -nofail mode"
	.byte	233
	.ascii	"failure "
	.byte	202
	.ascii	"-nofail mode"
	.byte	0

#   36  "goto abort with no preceding error"
	.byte	130
	.ascii	"abort "
	.byte	134
	.byte	0

#   37  "goto continue with no preceding error"
	.byte	243
	.byte	134
	.byte	0

#   38  "goto undefined label"
	.byte	130
	.byte	142
	.byte	188
	.byte	0

#   39  "external function argument is not a string"
	.byte	132
	.byte	4
	.byte	0

#   40  "external function argument is not integer"
	.byte	132
	.byte	135
	.byte	0

#   41  "field function argument is wrong datatype"
	.byte	174
	.byte	10
	.byte	2
	.byte	24
	.ascii	"wrong datatype"
	.byte	0

#   42  "attempt to change value of protected variable"
	.ascii	"attempt "
	.byte	201
	.ascii	"change "
	.byte	160
	.byte	192
	.ascii	"protected variable"
	.byte	0

#   43  "any evaluated argument is not a string"
	.ascii	"any "
	.byte	253
	.byte	0

#   44  "break evaluated argument is not a string"
	.ascii	"break "
	.byte	253
	.byte	0

#   45  "breakx evaluated argument is not a string"
	.ascii	"breakx "
	.byte	253
	.byte	0

#   46  "expression does not evaluate to pattern"
	.byte	239
	.byte	184
	.byte	0

#   47  "len evaluated argument is not integer"
	.byte	250
	.byte	248
	.byte	0

#   48  "len evaluated argument is negative or too large"
	.byte	250
	.byte	240
	.byte	0

#   49  "notany evaluated argument is not a string"
	.ascii	"notany "
	.byte	253
	.byte	0

#   50  "pos evaluated argument is not integer"
	.byte	251
	.byte	248
	.byte	0

#   51  "pos evaluated argument is negative or too large"
	.byte	251
	.byte	240
	.byte	0

#   52  "rpos evaluated argument is not integer"
	.byte	224
	.byte	248
	.byte	0

#   53  "rpos evaluated argument is negative or too large"
	.byte	224
	.byte	240
	.byte	0

#   54  "rtab evaluated argument is not integer"
	.byte	210
	.byte	248
	.byte	0

#   55  "rtab evaluated argument is negative or too large"
	.byte	210
	.byte	240
	.byte	0

#   56  "span evaluated argument is not a string"
	.ascii	"span "
	.byte	253
	.byte	0

#   57  "tab evaluated argument is not integer"
	.byte	247
	.byte	248
	.byte	0

#   58  "tab evaluated argument is negative or too large"
	.byte	247
	.byte	240
	.byte	0

#   59  "any argument is not a string or expression"
	.ascii	"any "
	.byte	242
	.byte	0

#   60  "apply first arg is not natural variable name"
	.ascii	"apply "
	.byte	7
	.byte	196
	.byte	0

#   61  "arbno argument is not pattern"
	.ascii	"arbno "
	.byte	1
	.byte	30
	.byte	0

#   62  "arg second argument is not integer"
	.byte	144
	.byte	206
	.byte	0

#   63  "arg first argument is not program function name"
	.byte	144
	.byte	7
	.byte	1
	.byte	156
	.byte	0

#   64  "array first argument is not integer or string"
	.byte	131
	.byte	7
	.byte	135
	.ascii	" "
	.byte	165
	.byte	178
	.byte	0

#   65  "array first argument lower bound is not integer"
	.byte	131
	.byte	7
	.byte	2
	.ascii	"lower "
	.byte	164
	.byte	0

#   66  "array first argument upper bound is not integer"
	.byte	131
	.byte	255
	.byte	0

#   67  "array dimension is zero, negative or out of range"
	.byte	131
	.byte	151
	.byte	0

#   68  "array size exceeds maximum permitted"
	.byte	131
	.byte	150
	.byte	0

#   69  "break argument is not a string or expression"
	.ascii	"break "
	.byte	242
	.byte	0

#   70  "breakx argument is not a string or expression"
	.ascii	"breakx "
	.byte	242
	.byte	0

#   71  "clear argument is not a string"
	.ascii	"clear "
	.byte	4
	.byte	0

#   72  "clear argument has null variable name"
	.ascii	"clear "
	.byte	238
	.byte	0

#   73  "collect argument is not integer"
	.ascii	"collect "
	.byte	135
	.byte	0

#   74  "convert second argument is not a string"
	.ascii	"convert "
	.byte	181
	.byte	0

#   75  "data argument is not a string"
	.byte	177
	.byte	4
	.byte	0

#   76  "data argument is null"
	.byte	177
	.byte	159
	.byte	0

#   77  "data argument is missing a left paren"
	.byte	177
	.byte	152
	.byte	0

#   78  "data argument has null datatype name"
	.byte	177
	.byte	141
	.byte	155
	.byte	0

#   79  "data argument is missing a right paren"
	.byte	177
	.byte	235
	.byte	0

#   80  "data argument has null field name"
	.byte	177
	.byte	141
	.byte	174
	.byte	26
	.byte	0

#   81  "define first argument is not a string"
	.byte	147
	.byte	167
	.byte	0

#   82  "define first argument is null"
	.byte	147
	.byte	7
	.byte	159
	.byte	0

#   83  "define first argument is missing a left paren"
	.byte	147
	.byte	7
	.byte	152
	.byte	0

#   84  "define first argument has null function name"
	.byte	147
	.byte	246
	.byte	0

#   85  "null arg name or missing ) in define first arg."
	.ascii	"null "
	.byte	144
	.byte	26
	.ascii	" "
	.byte	165
	.byte	20
	.ascii	") "
	.byte	202
	.byte	147
	.byte	7
	.ascii	"arg."
	.byte	0

#   86  "define function entry point is not defined label"
	.byte	147
	.byte	189
	.byte	0

#   87  "detach argument is not appropriate name"
	.ascii	"detach "
	.byte	29
	.byte	0

#   88  "dump argument is not integer"
	.ascii	"dump "
	.byte	135
	.byte	0

#   89  "dump argument is negative or too large"
	.ascii	"dump "
	.byte	168
	.byte	0

#   90  "dupl second argument is not integer"
	.ascii	"dupl "
	.byte	206
	.byte	0

#   91  "dupl first argument is not a string or pattern"
	.ascii	"dupl "
	.byte	167
	.ascii	" "
	.byte	165
	.byte	30
	.byte	0

#   92  "eject argument is not a suitable name"
	.byte	195
	.byte	28
	.byte	0

#   93  "eject file does not exist"
	.byte	195
	.byte	176
	.byte	0

#   94  "eject file does not permit page eject"
	.byte	195
	.byte	153
	.ascii	"page eject"
	.byte	0

#   95  "eject caused non-recoverable output error"
	.byte	195
	.byte	17
	.byte	136
	.byte	154
	.byte	0

#   96  "endfile argument is not a suitable name"
	.byte	223
	.byte	28
	.byte	0

#   97  "endfile argument is null"
	.byte	223
	.byte	159
	.byte	0

#   98  "endfile file does not exist"
	.byte	223
	.byte	176
	.byte	0

#   99  "endfile file does not permit endfile"
	.byte	223
	.byte	153
	.ascii	"endfile"
	.byte	0

#  100  "endfile caused non-recoverable output error"
	.byte	223
	.byte	17
	.byte	136
	.byte	154
	.byte	0

#  101  "eq first argument is not numeric"
	.ascii	"eq "
	.byte	208
	.byte	0

#  102  "eq second argument is not numeric"
	.ascii	"eq "
	.byte	207
	.byte	0

#  103  "eval argument is not expression"
	.ascii	"eval "
	.byte	1
	.ascii	"expression"
	.byte	0

#  104  "exit first argument is not suitable integer or string"
	.byte	211
	.byte	244
	.byte	0

#  105  "exit action not available in this implementation"
	.byte	211
	.ascii	"action "
	.byte	19
	.ascii	"available "
	.byte	202
	.ascii	"th"
	.byte	24
	.ascii	"implementation"
	.byte	0

#  106  "exit action caused irrecoverable error"
	.byte	211
	.byte	170
	.byte	0

#  107  "field second argument is not integer"
	.byte	174
	.byte	206
	.byte	0

#  108  "field first argument is not datatype name"
	.byte	174
	.byte	7
	.byte	1
	.byte	155
	.byte	0

#  109  "ge first argument is not numeric"
	.ascii	"ge "
	.byte	208
	.byte	0

#  110  "ge second argument is not numeric"
	.ascii	"ge "
	.byte	207
	.byte	0

#  111  "gt first argument is not numeric"
	.ascii	"gt "
	.byte	208
	.byte	0

#  112  "gt second argument is not numeric"
	.ascii	"gt "
	.byte	207
	.byte	0

#  113  "input third argument is not a string"
	.byte	161
	.byte	31
	.byte	0

#  114  "inappropriate second argument for input"
	.byte	18
	.byte	9
	.byte	2
	.ascii	"f"
	.byte	165
	.ascii	"input"
	.byte	0

#  115  "inappropriate first argument for input"
	.byte	18
	.byte	7
	.byte	2
	.ascii	"f"
	.byte	165
	.ascii	"input"
	.byte	0

#  116  "inappropriate file specification for input"
	.byte	186
	.ascii	"input"
	.byte	0

#  117  "input file cannot be read"
	.byte	161
	.byte	200
	.ascii	"read"
	.byte	0

#  118  "le first argument is not numeric"
	.ascii	"le "
	.byte	208
	.byte	0

#  119  "le second argument is not numeric"
	.ascii	"le "
	.byte	207
	.byte	0

#  120  "len argument is not integer or expression"
	.byte	250
	.byte	241
	.byte	0

#  121  "len argument is negative or too large"
	.byte	250
	.byte	168
	.byte	0

#  122  "leq first argument is not a string"
	.ascii	"leq "
	.byte	167
	.byte	0

#  123  "leq second argument is not a string"
	.ascii	"leq "
	.byte	181
	.byte	0

#  124  "lge first argument is not a string"
	.ascii	"lge "
	.byte	167
	.byte	0

#  125  "lge second argument is not a string"
	.ascii	"lge "
	.byte	181
	.byte	0

#  126  "lgt first argument is not a string"
	.ascii	"lgt "
	.byte	167
	.byte	0

#  127  "lgt second argument is not a string"
	.ascii	"lgt "
	.byte	181
	.byte	0

#  128  "lle first argument is not a string"
	.ascii	"lle "
	.byte	167
	.byte	0

#  129  "lle second argument is not a string"
	.ascii	"lle "
	.byte	181
	.byte	0

#  130  "llt first argument is not a string"
	.ascii	"llt "
	.byte	167
	.byte	0

#  131  "llt second argument is not a string"
	.ascii	"llt "
	.byte	181
	.byte	0

#  132  "lne first argument is not a string"
	.ascii	"lne "
	.byte	167
	.byte	0

#  133  "lne second argument is not a string"
	.ascii	"lne "
	.byte	181
	.byte	0

#  134  "local second argument is not integer"
	.ascii	"local "
	.byte	206
	.byte	0

#  135  "local first arg is not a program function name"
	.ascii	"local "
	.byte	7
	.byte	144
	.byte	24
	.byte	19
	.ascii	"a "
	.byte	156
	.byte	0

#  136  "load second argument is not a string"
	.byte	146
	.byte	181
	.byte	0

#  137  "load first argument is not a string"
	.byte	146
	.byte	167
	.byte	0

#  138  "load first argument is null"
	.byte	146
	.byte	7
	.byte	159
	.byte	0

#  139  "load first argument is missing a left paren"
	.byte	146
	.byte	7
	.byte	152
	.byte	0

#  140  "load first argument has null function name"
	.byte	146
	.byte	246
	.byte	0

#  141  "load first argument is missing a right paren"
	.byte	146
	.byte	7
	.byte	235
	.byte	0

#  142  "load function does not exist"
	.byte	146
	.byte	10
	.ascii	"does "
	.byte	19
	.ascii	"exist"
	.byte	0

#  143  "load function caused input error during load"
	.byte	146
	.byte	10
	.byte	13
	.byte	161
	.byte	154
	.ascii	" "
	.byte	213
	.ascii	"load"
	.byte	0

#  144  "lpad third argument is not a string"
	.ascii	"lpad "
	.byte	31
	.byte	0

#  145  "lpad second argument is not integer"
	.ascii	"lpad "
	.byte	206
	.byte	0

#  146  "lpad first argument is not a string"
	.ascii	"lpad "
	.byte	167
	.byte	0

#  147  "lt first argument is not numeric"
	.ascii	"lt "
	.byte	208
	.byte	0

#  148  "lt second argument is not numeric"
	.ascii	"lt "
	.byte	207
	.byte	0

#  149  "ne first argument is not numeric"
	.ascii	"ne "
	.byte	208
	.byte	0

#  150  "ne second argument is not numeric"
	.ascii	"ne "
	.byte	207
	.byte	0

#  151  "notany argument is not a string or expression"
	.ascii	"notany "
	.byte	242
	.byte	0

#  152  "opsyn third argument is not integer"
	.byte	179
	.byte	183
	.byte	0

#  153  "opsyn third argument is negative or too large"
	.byte	179
	.ascii	"third "
	.byte	168
	.byte	0

#  154  "opsyn second arg is not natural variable name"
	.byte	179
	.byte	9
	.byte	196
	.byte	0

#  155  "opsyn first arg is not natural variable name"
	.byte	179
	.byte	7
	.byte	196
	.byte	0

#  156  "opsyn first arg is not correct operator name"
	.byte	179
	.byte	180
	.byte	0

#  157  "output third argument is not a string"
	.byte	136
	.byte	31
	.byte	0

#  158  "inappropriate second argument for output"
	.byte	18
	.byte	9
	.byte	245
	.byte	0

#  159  "inappropriate first argument for output"
	.byte	18
	.byte	7
	.byte	245
	.byte	0

#  160  "inappropriate file specification for output"
	.byte	186
	.byte	237
	.byte	0

#  161  "output file cannot be written to"
	.byte	136
	.byte	200
	.ascii	"written to"
	.byte	0

#  162  "pos argument is not integer or expression"
	.byte	251
	.byte	241
	.byte	0

#  163  "pos argument is negative or too large"
	.byte	251
	.byte	168
	.byte	0

#  164  "prototype argument is not valid object"
	.ascii	"prototype "
	.byte	1
	.ascii	"valid object"
	.byte	0

#  165  "remdr second argument is not numeric"
	.byte	197
	.byte	207
	.byte	0

#  166  "remdr first argument is not numeric"
	.byte	197
	.byte	208
	.byte	0

#  167  "remdr caused integer overflow"
	.byte	197
	.byte	139
	.byte	0

#  168  "replace third argument is not a string"
	.byte	203
	.byte	31
	.byte	0

#  169  "replace second argument is not a string"
	.byte	203
	.byte	181
	.byte	0

#  170  "replace first argument is not a string"
	.byte	203
	.byte	167
	.byte	0

#  171  "null or unequally long 2nd, 3rd args to replace"
	.ascii	"null "
	.byte	165
	.ascii	"unequally long 2nd, 3rd args "
	.byte	201
	.ascii	"replace"
	.byte	0

#  172  "rewind argument is not a suitable name"
	.byte	163
	.byte	28
	.byte	0

#  173  "rewind argument is null"
	.byte	163
	.byte	159
	.byte	0

#  174  "rewind file does not exist"
	.byte	163
	.byte	176
	.byte	0

#  175  "rewind file does not permit rewind"
	.byte	163
	.byte	153
	.ascii	"rewind"
	.byte	0

#  176  "rewind caused non-recoverable error"
	.byte	163
	.byte	17
	.byte	154
	.byte	0

#  177  "reverse argument is not a string"
	.ascii	"reverse "
	.byte	4
	.byte	0

#  178  "rpad third argument is not a string"
	.ascii	"rpad "
	.byte	31
	.byte	0

#  179  "rpad second argument is not integer"
	.ascii	"rpad "
	.byte	206
	.byte	0

#  180  "rpad first argument is not a string"
	.ascii	"rpad "
	.byte	167
	.byte	0

#  181  "rtab argument is not integer or expression"
	.byte	210
	.byte	241
	.byte	0

#  182  "rtab argument is negative or too large"
	.byte	210
	.byte	168
	.byte	0

#  183  "tab argument is not integer or expression"
	.byte	247
	.byte	241
	.byte	0

#  184  "tab argument is negative or too large"
	.byte	247
	.byte	168
	.byte	0

#  185  "rpos argument is not integer or expression"
	.byte	224
	.byte	241
	.byte	0

#  186  "rpos argument is negative or too large"
	.byte	224
	.byte	168
	.byte	0

#  187  "setexit argument is not label name or null"
	.ascii	"set"
	.byte	211
	.byte	1
	.byte	188
	.ascii	" "
	.byte	26
	.ascii	" "
	.byte	165
	.ascii	"null"
	.byte	0

#  188  "span argument is not a string or expression"
	.ascii	"span "
	.byte	242
	.byte	0

#  189  "size argument is not a string"
	.ascii	"size "
	.byte	4
	.byte	0

#  190  "stoptr first argument is not appropriate name"
	.ascii	"stoptr "
	.byte	7
	.byte	29
	.byte	0

#  191  "stoptr second argument is not trace type"
	.ascii	"stoptr "
	.byte	9
	.byte	1
	.byte	175
	.ascii	"type"
	.byte	0

#  192  "substr third argument is not integer"
	.byte	215
	.byte	183
	.byte	0

#  193  "substr second argument is not integer"
	.byte	215
	.byte	206
	.byte	0

#  194  "substr first argument is not a string"
	.byte	215
	.byte	167
	.byte	0

#  195  "table argument is not integer"
	.byte	193
	.byte	135
	.byte	0

#  196  "table argument is out of range"
	.byte	193
	.byte	199
	.byte	0

#  197  "trace fourth arg is not function name or null"
	.byte	175
	.ascii	"fourth "
	.byte	144
	.byte	24
	.byte	19
	.byte	10
	.byte	26
	.ascii	" "
	.byte	165
	.ascii	"null"
	.byte	0

#  198  "trace first argument is not appropriate name"
	.byte	175
	.byte	7
	.byte	29
	.byte	0

#  199  "trace second argument is not trace type"
	.byte	175
	.byte	9
	.byte	1
	.byte	175
	.ascii	"type"
	.byte	0

#  200  "trim argument is not a string"
	.ascii	"trim "
	.byte	4
	.byte	0

#  201  "unload argument is not natural variable name"
	.ascii	"un"
	.byte	146
	.byte	1
	.byte	27
	.byte	0

#  202  "input from file caused non-recoverable error"
	.byte	161
	.byte	209
	.byte	145
	.byte	17
	.byte	154
	.byte	0

#  203  "input file record has incorrect format"
	.byte	161
	.byte	145
	.ascii	"record has incorrect format"
	.byte	0

#  204  "memory overflow"
	.ascii	"memory "
	.byte	14
	.byte	0

#  205  "string length exceeds value of maxlngth keyword"
	.byte	178
	.byte	218
	.byte	0

#  206  "output caused file overflow"
	.byte	136
	.byte	13
	.byte	145
	.byte	14
	.byte	0

#  207  "output caused non-recoverable error"
	.byte	136
	.byte	17
	.byte	154
	.byte	0

#  208  "keyword value assigned is not integer"
	.byte	171
	.byte	214
	.byte	0

#  209  "keyword in assignment is protected"
	.byte	171
	.byte	202
	.ascii	"assignment "
	.byte	24
	.ascii	"protected"
	.byte	0

#  210  "keyword value assigned is negative or too large"
	.byte	171
	.byte	231
	.byte	0

#  211  "value assigned to keyword errtext not a string"
	.byte	23
	.byte	229
	.byte	0

#  212  "syntax error: value used where name is required"
	.byte	6
	.byte	160
	.ascii	"used where "
	.byte	26
	.ascii	" "
	.byte	24
	.ascii	"required"
	.byte	0

#  213  "syntax error: statement is too complicated."
	.byte	6
	.byte	249
	.byte	24
	.ascii	"too complicated."
	.byte	0

#  214  "bad label or misplaced continuation line"
	.ascii	"bad "
	.byte	188
	.ascii	" "
	.byte	165
	.ascii	"misplaced continuation line"
	.byte	0

#  215  "syntax error: undefined or erroneous entry label"
	.byte	6
	.byte	142
	.byte	165
	.byte	185
	.byte	190
	.byte	0

#  216  "syntax error: missing end line"
	.byte	6
	.byte	20
	.ascii	"end line"
	.byte	0

#  217  "syntax error: duplicate label"
	.byte	6
	.byte	230
	.byte	0

#  218  "syntax error: duplicated goto field"
	.byte	6
	.ascii	"duplicated "
	.byte	130
	.ascii	"field"
	.byte	0

#  219  "syntax error: empty goto field"
	.byte	6
	.ascii	"empty "
	.byte	130
	.ascii	"field"
	.byte	0

#  220  "syntax error: missing operator"
	.byte	6
	.byte	20
	.ascii	"operator"
	.byte	0

#  221  "syntax error: missing operand"
	.byte	6
	.byte	20
	.ascii	"operand"
	.byte	0

#  222  "syntax error: invalid use of left bracket"
	.byte	149
	.ascii	"left "
	.byte	220
	.byte	0

#  223  "syntax error: invalid use of comma"
	.byte	149
	.ascii	"comma"
	.byte	0

#  224  "syntax error: unbalanced right parenthesis"
	.byte	6
	.ascii	"unbalanced "
	.byte	234
	.ascii	"thesis"
	.byte	0

#  225  "syntax error: unbalanced right bracket"
	.byte	6
	.byte	221
	.byte	0

#  226  "syntax error: missing right paren"
	.byte	6
	.byte	20
	.byte	234
	.byte	0

#  227  "syntax error: right paren missing from goto"
	.byte	6
	.byte	234
	.ascii	" "
	.byte	20
	.byte	209
	.ascii	"goto"
	.byte	0

#  228  "syntax error: right bracket missing from goto"
	.byte	6
	.byte	21
	.byte	220
	.ascii	" "
	.byte	20
	.byte	209
	.ascii	"goto"
	.byte	0

#  229  "syntax error: missing right array bracket"
	.byte	6
	.byte	20
	.byte	21
	.byte	131
	.byte	220
	.byte	0

#  230  "syntax error: illegal character"
	.byte	6
	.ascii	"illegal character"
	.byte	0

#  231  "syntax error: invalid numeric item"
	.byte	6
	.ascii	"invalid "
	.byte	8
	.ascii	" item"
	.byte	0

#  232  "syntax error: unmatched string quote"
	.byte	6
	.ascii	"unmatched "
	.byte	178
	.ascii	" quote"
	.byte	0

#  233  "syntax error: invalid use of operator"
	.byte	149
	.ascii	"operator"
	.byte	0

#  234  "syntax error: goto field incorrect"
	.byte	6
	.byte	130
	.byte	174
	.ascii	"incorrect"
	.byte	0

#  235  "subscripted operand is not table or array"
	.ascii	"subscripted "
	.byte	3
	.byte	193
	.byte	165
	.ascii	"array"
	.byte	0

#  236  "array referenced with wrong number of subscripts"
	.byte	131
	.byte	198
	.ascii	"wrong number "
	.byte	192
	.ascii	"subscripts"
	.byte	0

#  237  "table referenced with more than one subscript"
	.byte	193
	.byte	198
	.ascii	"more than one subscript"
	.byte	0

#  238  "array subscript is not integer"
	.byte	131
	.byte	212
	.byte	0

#  239  "indirection operand is not name"
	.ascii	"indirection "
	.byte	3
	.byte	26
	.byte	0

#  240  "pattern match right operand is not pattern"
	.byte	30
	.byte	252
	.byte	0

#  241  "pattern match left operand is not a string"
	.byte	30
	.byte	194
	.byte	0

#  242  "function return from level zero"
	.byte	10
	.ascii	"return "
	.byte	209
	.ascii	"level zero"
	.byte	0

#  243  "function result in nreturn is not name"
	.byte	10
	.byte	172
	.byte	0

#  244  "statement count exceeds value of stlimit keyword"
	.byte	249
	.byte	217
	.byte	0

#  245  "translation/execution time expired"
	.ascii	"translation/execution time expired"
	.byte	0

#  246  "stack overflow"
	.ascii	"stack "
	.byte	14
	.byte	0

#  247  "invalid control statement"
	.ascii	"invalid control statement"
	.byte	0

#  248  "attempted redefinition of system function"
	.ascii	"attempted redefinition "
	.byte	192
	.ascii	"system function"
	.byte	0

#  249  "expression evaluated by name returned value"
	.byte	239
	.byte	12
	.byte	204
	.ascii	"value"
	.byte	0

#  250  "insufficient memory to complete dump"
	.byte	222
	.ascii	"memory "
	.byte	201
	.ascii	"complete dump"
	.byte	0

#  251  "keyword operand is not name of defined keyword"
	.byte	171
	.byte	219
	.byte	0

#  252  "error on printing to interactive channel"
	.byte	154
	.ascii	" on printing "
	.byte	201
	.ascii	"interactive channel"
	.byte	0

#  253  "print limit exceeded on standard output channel"
	.ascii	"print limit exceeded on standard "
	.byte	136
	.ascii	"channel"
	.byte	0

#  254  "erroneous argument for host"
	.byte	185
	.byte	2
	.ascii	"f"
	.byte	165
	.ascii	"host"
	.byte	0

#  255  "error during execution of host"
	.byte	154
	.ascii	" "
	.byte	213
	.ascii	"execution "
	.byte	192
	.ascii	"host"
	.byte	0

#  256  "sort/rsort 1st arg not suitable array or table"
	.byte	173
	.ascii	"1st "
	.byte	144
	.byte	19
	.ascii	"sui"
	.byte	193
	.byte	131
	.byte	165
	.ascii	"table"
	.byte	0

#  257  "erroneous 2nd arg in sort/rsort of vector"
	.byte	185
	.ascii	"2nd "
	.byte	144
	.byte	202
	.byte	173
	.byte	192
	.ascii	"vector"
	.byte	0

#  258  "sort/rsort 2nd arg out of range or non-integer"
	.byte	173
	.byte	225
	.byte	0

#  259  "fence argument is not pattern"
	.ascii	"fence "
	.byte	1
	.byte	30
	.byte	0

#  260  "conversion array size exceeds maximum permitted"
	.ascii	"conversion "
	.byte	131
	.byte	150
	.byte	0

#  261  "addition caused real overflow"
	.byte	166
	.byte	227
	.byte	0

#  262  "division caused real overflow"
	.byte	162
	.byte	227
	.byte	0

#  263  "multiplication caused real overflow"
	.byte	137
	.byte	227
	.byte	0

#  264  "subtraction caused real overflow"
	.byte	143
	.byte	227
	.byte	0

#  265  "external function argument is not real"
	.byte	132
	.byte	1
	.ascii	"real"
	.byte	0

#  266  "exponentiation caused real overflow"
	.byte	25
	.byte	227
	.byte	0

#  267  ""
	.byte	0

#  268  "inconsistent value assigned to keyword profile"
	.ascii	"inconsistent "
	.byte	23
	.ascii	"profile"
	.byte	0

#  269  ""
	.byte	0

#  270  ""
	.byte	0

#  271  ""
	.byte	0

#  272  ""
	.byte	0

#  273  ""
	.byte	0

#  274  "value assigned to keyword fullscan is zero"
	.byte	23
	.ascii	"fullscan "
	.byte	24
	.ascii	"zero"
	.byte	0

#  275  ""
	.byte	0

#  276  ""
	.byte	0

#  277  ""
	.byte	0

#  278  ""
	.byte	0

#  279  ""
	.byte	0

#  280  ""
	.byte	0

#  281  "char argument not integer"
	.ascii	"char "
	.byte	2
	.byte	19
	.byte	11
	.byte	0

#  282  "char argument not in range"
	.ascii	"char "
	.byte	2
	.byte	19
	.byte	202
	.ascii	"range"
	.byte	0

#  283  ""
	.byte	0

#  284  "excessively nested include files"
	.ascii	"excessively nested include files"
	.byte	0

#  285  "include file cannot be opened"
	.ascii	"include "
	.byte	200
	.ascii	"opened"
	.byte	0

#  286  "function call to undefined entry label"
	.byte	10
	.ascii	"call "
	.byte	201
	.byte	142
	.byte	190
	.byte	0

#  287  "value assigned to keyword maxlngth is too small"
	.byte	23
	.byte	191
	.byte	24
	.ascii	"too small"
	.byte	0

#  288  "exit second argument is not a string"
	.byte	211
	.byte	181
	.byte	0

#  289  "input channel currently in use"
	.byte	161
	.byte	169
	.byte	0

#  290  "output channel currently in use"
	.byte	136
	.byte	169
	.byte	0

#  291  "set first argument is not a suitable name"
	.byte	226
	.byte	7
	.byte	28
	.byte	0

#  292  "set first argument is null"
	.byte	226
	.byte	7
	.byte	159
	.byte	0

#  293  "inappropriate second argument to set"
	.byte	18
	.byte	9
	.byte	2
	.byte	201
	.ascii	"set"
	.byte	0

#  294  "inappropriate third argument to set"
	.byte	18
	.ascii	"third "
	.byte	2
	.byte	201
	.ascii	"set"
	.byte	0

#  295  "set file does not exist"
	.byte	226
	.byte	176
	.byte	0

#  296  "set file does not permit setting file pointer"
	.byte	226
	.byte	153
	.ascii	"setting "
	.byte	145
	.ascii	"pointer"
	.byte	0

#  297  "set caused non-recoverable i/o error"
	.byte	226
	.byte	17
	.ascii	"i/o "
	.byte	154
	.byte	0

#  298  "external function argument is not file"
	.byte	132
	.byte	1
	.ascii	"file"
	.byte	0

#  299  "internal logic error: unexpected ppm branch"
	.ascii	"internal logic "
	.byte	154
	.ascii	": "
	.byte	233
	.ascii	"ppm branch"
	.byte	0

#  300  ""
	.byte	0

#  301  "atan argument not numeric"
	.ascii	"atan "
	.byte	148
	.byte	0

#  302  "chop argument not numeric"
	.ascii	"chop "
	.byte	148
	.byte	0

#  303  "cos argument not numeric"
	.ascii	"cos "
	.byte	148
	.byte	0

#  304  "exp argument not numeric"
	.ascii	"exp "
	.byte	148
	.byte	0

#  305  "exp produced real overflow"
	.ascii	"exp "
	.byte	140
	.byte	0

#  306  "ln argument not numeric"
	.ascii	"ln "
	.byte	148
	.byte	0

#  307  "ln produced real overflow"
	.ascii	"ln "
	.byte	140
	.byte	0

#  308  "sin argument not numeric"
	.ascii	"s"
	.byte	202
	.byte	148
	.byte	0

#  309  "tan argument not numeric"
	.ascii	"tan "
	.byte	148
	.byte	0

#  310  "tan produced real overflow or argument is out of range"
	.ascii	"tan "
	.byte	140
	.ascii	" "
	.byte	165
	.byte	199
	.byte	0

#  311  "exponentiation of negative base to non-integral power"
	.byte	25
	.byte	192
	.ascii	"negative base "
	.byte	201
	.ascii	"non-integral power"
	.byte	0

#  312  "remdr caused real overflow"
	.byte	197
	.byte	227
	.byte	0

#  313  "sqrt argument not numeric"
	.ascii	"sqrt "
	.byte	148
	.byte	0

#  314  "sqrt argument negative"
	.ascii	"sqrt "
	.byte	254
	.byte	0

#  315  "ln argument negative"
	.ascii	"ln "
	.byte	254
	.byte	0

#  316  "backspace argument is not a suitable name"
	.byte	158
	.byte	28
	.byte	0

#  317  "backspace file does not exist"
	.byte	158
	.byte	176
	.byte	0

#  318  "backspace file does not permit backspace"
	.byte	158
	.byte	153
	.ascii	"backspace"
	.byte	0

#  319  "backspace caused non-recoverable error"
	.byte	158
	.byte	17
	.byte	154
	.byte	0

#  320  "user interrupt"
	.ascii	"user interrupt"
	.byte	0

#  321  "goto scontinue with no preceding error"
	.byte	232
	.byte	134
	.byte	0

#  322  "cos argument is out of range"
	.ascii	"cos "
	.byte	199
	.byte	0

#  323  "sin argument is out of range"
	.ascii	"s"
	.byte	202
	.byte	199
	.byte	0

#  324  ""
	.byte	0

#  325  ""
	.byte	0

#  326  "calling external function - bad argument type"
	.byte	236
	.ascii	"bad "
	.byte	2
	.ascii	"type"
	.byte	0

#  327  "calling external function - not found"
	.byte	236
	.byte	19
	.ascii	"found"
	.byte	0

#  328  "load function - insufficient memory"
	.byte	146
	.byte	10
	.ascii	"- "
	.byte	222
	.ascii	"memory"
	.byte	0

#  329  "requested maxlngth too large"
	.ascii	"requested "
	.byte	191
	.ascii	"too large"
	.byte	0

#  330  "date argument is not integer"
	.ascii	"date "
	.byte	135
	.byte	0

#  331  "goto scontinue with no user interrupt"
	.byte	232
	.ascii	"with no user interrupt"
	.byte	0

#  332  "goto continue with error in failure goto"
	.byte	243
	.ascii	"with "
	.byte	154
	.ascii	" "
	.byte	202
	.ascii	"failure goto"
	.byte	0

	.global	phrases
phrases:	.byte	0

#    1  "argument is not "
	.byte	2
	.byte	24
	.byte	19
	.byte	0

#    2  "argument "
	.ascii	"argument "
	.byte	0

#    3  "operand is not "
	.ascii	"operand "
	.byte	24
	.byte	19
	.byte	0

#    4  "argument is not a string"
	.byte	1
	.ascii	"a "
	.byte	178
	.byte	0

#    5  "is negative or too large"
	.byte	24
	.ascii	"negative "
	.byte	165
	.ascii	"too large"
	.byte	0

#    6  "syntax error: "
	.ascii	"syntax "
	.byte	154
	.ascii	": "
	.byte	0

#    7  "first "
	.ascii	"first "
	.byte	0

#    8  "numeric"
	.ascii	"numeric"
	.byte	0

#    9  "second "
	.ascii	"second "
	.byte	0

#   10  "function "
	.ascii	"function "
	.byte	0

#   11  "integer"
	.ascii	"integer"
	.byte	0

#   12  "evaluated "
	.ascii	"evaluated "
	.byte	0

#   13  "caused "
	.ascii	"caused "
	.byte	0

#   14  "overflow"
	.ascii	"overflow"
	.byte	0

#   15  " or expression"
	.ascii	" "
	.byte	165
	.ascii	"expression"
	.byte	0

#   16  "file does not "
	.byte	145
	.ascii	"does "
	.byte	19
	.byte	0

#   17  "caused non-recoverable "
	.byte	13
	.ascii	"non-recoverable "
	.byte	0

#   18  "inappropriate "
	.ascii	"inappropriate "
	.byte	0

#   19  "not "
	.ascii	"not "
	.byte	0

#   20  "missing "
	.ascii	"missing "
	.byte	0

#   21  "right "
	.ascii	"right "
	.byte	0

#   22  "real overflow"
	.ascii	"real "
	.byte	14
	.byte	0

#   23  "value assigned to keyword "
	.byte	160
	.ascii	"assigned "
	.byte	201
	.byte	171
	.byte	0

#   24  "is "
	.ascii	"is "
	.byte	0

#   25  "exponentiation "
	.ascii	"exponentiation "
	.byte	0

#   26  "name"
	.ascii	"name"
	.byte	0

#   27  "natural variable name"
	.ascii	"natural variable "
	.byte	26
	.byte	0

#   28  "argument is not a suitable name"
	.byte	1
	.ascii	"a sui"
	.byte	193
	.byte	26
	.byte	0

#   29  "argument is not appropriate name"
	.byte	1
	.ascii	"appropriate "
	.byte	26
	.byte	0

#   30  "pattern"
	.ascii	"pattern"
	.byte	0

#   31  "third argument is not a string"
	.ascii	"third "
	.byte	4
	.byte	0

#  128  "left operand is not numeric"
	.ascii	"left "
	.byte	3
	.byte	8
	.byte	0

#  129  "assignment left operand is not pattern"
	.ascii	"assignment left "
	.byte	3
	.byte	30
	.byte	0

#  130  "goto "
	.ascii	"go"
	.byte	201
	.byte	0

#  131  "array "
	.ascii	"array "
	.byte	0

#  132  "external function "
	.ascii	"external "
	.byte	10
	.byte	0

#  133  "out of range"
	.ascii	"out "
	.byte	192
	.ascii	"range"
	.byte	0

#  134  "with no preceding error"
	.ascii	"with no preceding "
	.byte	154
	.byte	0

#  135  "argument is not integer"
	.byte	1
	.byte	11
	.byte	0

#  136  "output "
	.byte	237
	.ascii	" "
	.byte	0

#  137  "multiplication "
	.ascii	"multiplication "
	.byte	0

#  138  "operand is not a string or pattern"
	.byte	3
	.ascii	"a "
	.byte	178
	.ascii	" "
	.byte	165
	.byte	30
	.byte	0

#  139  "caused integer overflow"
	.byte	13
	.byte	11
	.ascii	" "
	.byte	14
	.byte	0

#  140  "produced real overflow"
	.ascii	"produced "
	.byte	22
	.byte	0

#  141  "argument has null "
	.byte	2
	.ascii	"has null "
	.byte	0

#  142  "undefined "
	.ascii	"undefined "
	.byte	0

#  143  "subtraction "
	.ascii	"subtraction "
	.byte	0

#  144  "arg "
	.ascii	"arg "
	.byte	0

#  145  "file "
	.ascii	"file "
	.byte	0

#  146  "load "
	.ascii	"load "
	.byte	0

#  147  "define "
	.ascii	"define "
	.byte	0

#  148  "argument not numeric"
	.byte	2
	.byte	19
	.byte	8
	.byte	0

#  149  "syntax error: invalid use of "
	.byte	6
	.ascii	"invalid use "
	.byte	192
	.byte	0

#  150  "size exceeds maximum permitted"
	.ascii	"size exceeds maximum permitted"
	.byte	0

#  151  "dimension is zero, negative or out of range"
	.ascii	"dimension "
	.byte	24
	.ascii	"zero, negative "
	.byte	165
	.byte	133
	.byte	0

#  152  "argument is missing a left paren"
	.byte	2
	.byte	24
	.byte	20
	.ascii	"a left paren"
	.byte	0

#  153  "file does not permit "
	.byte	16
	.ascii	"permit "
	.byte	0

#  154  "error"
	.ascii	"error"
	.byte	0

#  155  "datatype name"
	.ascii	"datatype "
	.byte	26
	.byte	0

#  156  "program function name"
	.ascii	"program "
	.byte	10
	.byte	26
	.byte	0

#  157  "argument is not numeric"
	.byte	1
	.byte	8
	.byte	0

#  158  "backspace "
	.ascii	"backspace "
	.byte	0

#  159  "argument is null"
	.byte	2
	.byte	24
	.ascii	"null"
	.byte	0

#  160  "value "
	.ascii	"value "
	.byte	0

#  161  "input "
	.ascii	"input "
	.byte	0

#  162  "division "
	.ascii	"division "
	.byte	0

#  163  "rewind "
	.ascii	"rewind "
	.byte	0

#  164  "bound is not integer"
	.ascii	"bound "
	.byte	24
	.byte	19
	.byte	11
	.byte	0

#  165  "or "
	.ascii	"or "
	.byte	0

#  166  "addition "
	.ascii	"addition "
	.byte	0

#  167  "first argument is not a string"
	.byte	7
	.byte	4
	.byte	0

#  168  "argument is negative or too large"
	.byte	2
	.byte	5
	.byte	0

#  169  "channel currently in use"
	.ascii	"channel currently "
	.byte	202
	.ascii	"use"
	.byte	0

#  170  "action caused irrecoverable error"
	.ascii	"action "
	.byte	13
	.ascii	"irrecoverable "
	.byte	154
	.byte	0

#  171  "keyword "
	.byte	216
	.ascii	" "
	.byte	0

#  172  "result in nreturn is not name"
	.ascii	"result "
	.byte	202
	.ascii	"nreturn "
	.byte	24
	.byte	19
	.byte	26
	.byte	0

#  173  "sort/rsort "
	.ascii	"sort/rsort "
	.byte	0

#  174  "field "
	.ascii	"field "
	.byte	0

#  175  "trace "
	.ascii	"trace "
	.byte	0

#  176  "file does not exist"
	.byte	16
	.ascii	"exist"
	.byte	0

#  177  "data "
	.ascii	"data "
	.byte	0

#  178  "string"
	.ascii	"string"
	.byte	0

#  179  "opsyn "
	.ascii	"opsyn "
	.byte	0

#  180  "first arg is not correct operator name"
	.byte	7
	.byte	144
	.byte	24
	.byte	19
	.ascii	"correct operat"
	.byte	165
	.byte	26
	.byte	0

#  181  "second argument is not a string"
	.byte	9
	.byte	4
	.byte	0

#  182  "right operand is not numeric"
	.byte	21
	.byte	3
	.byte	8
	.byte	0

#  183  "third argument is not integer"
	.ascii	"third "
	.byte	135
	.byte	0

#  184  "does not evaluate to pattern"
	.ascii	"does "
	.byte	19
	.ascii	"evaluate "
	.byte	201
	.byte	30
	.byte	0

#  185  "erroneous "
	.ascii	"erroneous "
	.byte	0

#  186  "inappropriate file specification for "
	.byte	18
	.byte	145
	.ascii	"specification f"
	.byte	165
	.byte	0

#  187  " replacement right operand is not a string"
	.ascii	" replacement "
	.byte	21
	.byte	3
	.ascii	"a "
	.byte	178
	.byte	0

#  188  "label"
	.ascii	"label"
	.byte	0

#  189  "function entry point is not defined label"
	.byte	10
	.ascii	"entry point "
	.byte	24
	.byte	19
	.ascii	"defined "
	.byte	188
	.byte	0

#  190  "entry label"
	.ascii	"entry "
	.byte	188
	.byte	0

#  191  "maxlngth "
	.ascii	"maxlngth "
	.byte	0

#  192  "of "
	.ascii	"of "
	.byte	0

#  193  "table "
	.ascii	"table "
	.byte	0

#  194  " match left operand is not a string"
	.ascii	" match left "
	.byte	3
	.ascii	"a "
	.byte	178
	.byte	0

#  195  "eject "
	.ascii	"eject "
	.byte	0

#  196  "arg is not natural variable name"
	.byte	144
	.byte	24
	.byte	19
	.byte	27
	.byte	0

#  197  "remdr "
	.ascii	"remdr "
	.byte	0

#  198  "referenced with "
	.ascii	"referenced with "
	.byte	0

#  199  "argument is out of range"
	.byte	2
	.byte	24
	.byte	133
	.byte	0

#  200  "file cannot be "
	.byte	145
	.ascii	"can"
	.byte	19
	.ascii	"be "
	.byte	0

#  201  "to "
	.ascii	"to "
	.byte	0

#  202  "in "
	.ascii	"in "
	.byte	0

#  203  "replace "
	.ascii	"replace "
	.byte	0

#  204  "by name returned "
	.ascii	"by "
	.byte	26
	.ascii	" returned "
	.byte	0

#  205  "concatenation "
	.ascii	"concatenation "
	.byte	0

#  206  "second argument is not integer"
	.byte	9
	.byte	135
	.byte	0

#  207  "second argument is not numeric"
	.byte	9
	.byte	157
	.byte	0

#  208  "first argument is not numeric"
	.byte	7
	.byte	157
	.byte	0

#  209  "from "
	.ascii	"from "
	.byte	0

#  210  "rtab "
	.ascii	"r"
	.byte	247
	.byte	0

#  211  "exit "
	.ascii	"exit "
	.byte	0

#  212  "subscript is not integer"
	.ascii	"subscript "
	.byte	24
	.byte	19
	.byte	11
	.byte	0

#  213  "during "
	.ascii	"during "
	.byte	0

#  214  "value assigned is not integer"
	.byte	160
	.ascii	"assigned "
	.byte	24
	.byte	19
	.byte	11
	.byte	0

#  215  "substr "
	.ascii	"substr "
	.byte	0

#  216  "keyword"
	.ascii	"keyword"
	.byte	0

#  217  "count exceeds value of stlimit keyword"
	.ascii	"count exceeds "
	.byte	160
	.byte	192
	.ascii	"stlimit "
	.byte	216
	.byte	0

#  218  " length exceeds value of maxlngth keyword"
	.ascii	" length exceeds "
	.byte	160
	.byte	192
	.byte	191
	.byte	216
	.byte	0

#  219  "operand is not name of defined keyword"
	.byte	3
	.byte	26
	.ascii	" "
	.byte	192
	.ascii	"defined "
	.byte	216
	.byte	0

#  220  "bracket"
	.ascii	"bracket"
	.byte	0

#  221  "unbalanced right bracket"
	.ascii	"unbalanced "
	.byte	21
	.byte	220
	.byte	0

#  222  "insufficient "
	.ascii	"insufficient "
	.byte	0

#  223  "endfile "
	.ascii	"end"
	.byte	145
	.byte	0

#  224  "rpos "
	.ascii	"r"
	.byte	251
	.byte	0

#  225  "2nd arg out of range or non-integer"
	.ascii	"2nd "
	.byte	144
	.byte	133
	.ascii	" "
	.byte	165
	.ascii	"non-"
	.byte	11
	.byte	0

#  226  "set "
	.ascii	"set "
	.byte	0

#  227  "caused real overflow"
	.byte	13
	.byte	22
	.byte	0

#  228  "alternation "
	.ascii	"alternation "
	.byte	0

#  229  "errtext not a string"
	.ascii	"errtext "
	.byte	19
	.ascii	"a "
	.byte	178
	.byte	0

#  230  "duplicate label"
	.ascii	"duplicate "
	.byte	188
	.byte	0

#  231  "value assigned is negative or too large"
	.byte	160
	.ascii	"assigned "
	.byte	5
	.byte	0

#  232  "goto scontinue "
	.byte	130
	.ascii	"scontinue "
	.byte	0

#  233  "unexpected "
	.ascii	"unexpected "
	.byte	0

#  234  "right paren"
	.byte	21
	.ascii	"paren"
	.byte	0

#  235  "argument is missing a right paren"
	.byte	2
	.byte	24
	.byte	20
	.ascii	"a "
	.byte	234
	.byte	0

#  236  "calling external function - "
	.ascii	"calling "
	.byte	132
	.ascii	"- "
	.byte	0

#  237  "output"
	.ascii	"output"
	.byte	0

#  238  "argument has null variable name"
	.byte	141
	.ascii	"variable "
	.byte	26
	.byte	0

#  239  "expression "
	.ascii	"expression "
	.byte	0

#  240  "evaluated argument is negative or too large"
	.byte	12
	.byte	168
	.byte	0

#  241  "argument is not integer or expression"
	.byte	135
	.byte	15
	.byte	0

#  242  "argument is not a string or expression"
	.byte	4
	.byte	15
	.byte	0

#  243  "goto continue "
	.byte	130
	.ascii	"continue "
	.byte	0

#  244  "first argument is not suitable integer or string"
	.byte	7
	.byte	1
	.ascii	"sui"
	.byte	193
	.byte	11
	.ascii	" "
	.byte	165
	.byte	178
	.byte	0

#  245  "argument for output"
	.byte	2
	.ascii	"f"
	.byte	165
	.byte	237
	.byte	0

#  246  "first argument has null function name"
	.byte	7
	.byte	141
	.byte	10
	.byte	26
	.byte	0

#  247  "tab "
	.ascii	"tab "
	.byte	0

#  248  "evaluated argument is not integer"
	.byte	12
	.byte	135
	.byte	0

#  249  "statement "
	.ascii	"statement "
	.byte	0

#  250  "len "
	.ascii	"len "
	.byte	0

#  251  "pos "
	.ascii	"pos "
	.byte	0

#  252  " match right operand is not pattern"
	.ascii	" match "
	.byte	21
	.byte	3
	.byte	30
	.byte	0

#  253  "evaluated argument is not a string"
	.byte	12
	.byte	4
	.byte	0

#  254  "argument negative"
	.byte	2
	.ascii	"negative"
	.byte	0

#  255  "first argument upper bound is not integer"
	.byte	7
	.byte	2
	.ascii	"upper "
	.byte	164
	.byte	0



       	.text
sysax:
       	syscall	zysax
sysbs:
       	syscall	zysbs
sysbx:
       	movq	%rsp,reg_xs(%rip)
       	syscall	zysbx
sysdc:
       	syscall	zysdc
sysdm:
       	syscall	zysdm
sysdt:
       	syscall	zysdt
sysea:
       	syscall	zysea
sysef:
       	syscall	zysef
sysej:
       	syscall	zysej
sysem:
       	syscall	zysem
sysen:
       	syscall	zysen
sysep:
       	syscall	zysep
sysex:
       	syscall	zysex
sysfc:
       	popq	%rax
       	leaq	(%rsp,%rdx,8),%rsp
       	pushq	%rax
       	syscall	zysfc
sysgc:
       	syscall	zysgc
syshs:
       	movq	%rsp,reg_xs(%rip)
       	syscall	zyshs
sysid:
       	syscall	zysid
sysif:
       	syscall	zysif
sysil:
       	syscall	zysil
sysin:
       	syscall	zysin
sysio:
       	syscall	zysio
sysld:
       	syscall	zysld
sysmm:
       	syscall	zysmm
sysmx:
       	syscall	zysmx
sysou:
       	syscall	zysou
syspi:
       	syscall	zyspi
syspl:
       	syscall	zyspl
syspp:
       	syscall	zyspp
syspr:
       	syscall	zyspr
sysrd:
       	syscall	zysrd
sysri:
       	syscall	zysri
sysrw:
       	syscall	zysrw
sysst:
       	syscall	zysst
systm:
       	syscall	zystm
systt:
       	syscall	zystt
sysul:
       	syscall	zysul
sysxi:
       	movq	%rsp,reg_xs(%rip)
       	syscall	zysxi
M_cvd:
       	syscall	i_cvd
M_dvi:
       	movq	%rax,reg_w0(%rip)
       	syscall	i_dvi
M_rti:
       	syscall	f_rti
M_itr:
       	syscall	f_itr
M_ldr:
       	syscall	f_ldr
M_adr:
       	syscall	f_adr
M_sbr:
       	syscall	f_sbr
M_mlr:
       	syscall	f_mlr
M_dvr:
       	syscall	f_dvr
M_ngr:
       	syscall	f_ngr
M_atn:
       	syscall	f_atn
M_chp:
       	syscall	f_chp
M_cos:
       	syscall	f_cos
M_etx:
       	syscall	f_etx
M_lnf:
       	syscall	f_lnf
M_sin:
       	syscall	f_sin
M_sqr:
       	syscall	f_sqr
M_tan:
       	syscall	f_tan
M_cpr:
       	syscall	f_cpr
       	.text
       	.global	sec01
sec01:
       	.data
       	.global	sec02
sec02:
       	.set	cfp_a,256
       	.set	cfp_b,8
       	.set	cfp_c,8
       	.set	cfp_f,16
       	.set	cfp_i,1
       	.set	cfp_m,9223372036854775807
       	.set	cfp_n,64
       	.set	cfp_r,1
       	.set	cfp_s,9
       	.set	cfp_x,3
       	.set	mxdgs,12
       	.set	nstmx,17
       	.set	cfp_u,128
       	.set	e_srs,100
       	.set	e_sts,1000
       	.set	e_cbs,500
       	.set	e_hnb,257
       	.set	e_hnw,3
       	.set	e_fsp,15
       	.set	e_sed,25
       	.set	ch_la,97
       	.set	ch_lb,98
       	.set	ch_lc,99
       	.set	ch_ld,100
       	.set	ch_le,101
       	.set	ch_lf,102
       	.set	ch_lg,103
       	.set	ch_lh,104
       	.set	ch_li,105
       	.set	ch_lj,106
       	.set	ch_lk,107
       	.set	ch_ll,108
       	.set	ch_lm,109
       	.set	ch_ln,110
       	.set	ch_lo,111
       	.set	ch_lp,112
       	.set	ch_lq,113
       	.set	ch_lr,114
       	.set	ch_ls,115
       	.set	ch_lt,116
       	.set	ch_lu,117
       	.set	ch_lv,118
       	.set	ch_lw,119
       	.set	ch_lx,120
       	.set	ch_ly,121
       	.set	ch_l_,122
       	.set	ch_d0,48
       	.set	ch_d1,49
       	.set	ch_d2,50
       	.set	ch_d3,51
       	.set	ch_d4,52
       	.set	ch_d5,53
       	.set	ch_d6,54
       	.set	ch_d7,55
       	.set	ch_d8,56
       	.set	ch_d9,57
       	.set	ch_am,38
       	.set	ch_as,42
       	.set	ch_at,64
       	.set	ch_bb,60
       	.set	ch_bl,32
       	.set	ch_br,124
       	.set	ch_cl,58
       	.set	ch_cm,44
       	.set	ch_dl,36
       	.set	ch_dt,46
       	.set	ch_dq,34
       	.set	ch_eq,61
       	.set	ch_ex,33
       	.set	ch_mn,45
       	.set	ch_nm,35
       	.set	ch_nt,126
       	.set	ch_pc,37
       	.set	ch_pl,43
       	.set	ch_pp,40
       	.set	ch_rb,62
       	.set	ch_rp,41
       	.set	ch_qu,63
       	.set	ch_sl,47
       	.set	ch_sm,59
       	.set	ch_sq,39
       	.set	ch_u_,95
       	.set	ch_ob,91
       	.set	ch_cb,93
       	.set	ch_ht,9
       	.set	ch_ey,94
       	.set	ch_ua,65
       	.set	ch_ub,66
       	.set	ch_uc,67
       	.set	ch_ud,68
       	.set	ch_ue,69
       	.set	ch_uf,70
       	.set	ch_ug,71
       	.set	ch_uh,72
       	.set	ch_ui,73
       	.set	ch_uj,74
       	.set	ch_uk,75
       	.set	ch_ul,76
       	.set	ch_um,77
       	.set	ch_un,78
       	.set	ch_uo,79
       	.set	ch_up,80
       	.set	ch_uq,81
       	.set	ch_ur,82
       	.set	ch_us,83
       	.set	ch_ut,84
       	.set	ch_uu,85
       	.set	ch_uv,86
       	.set	ch_uw,87
       	.set	ch_ux,88
       	.set	ch_uy,89
       	.set	ch_uz,90
       	.set	iodel,32
       	.set	offs1,1
       	.set	offs2,2
       	.set	offs3,3
       	.set	bl_ar,0
       	.set	bl_cd,1
       	.set	bl_ex,2
       	.set	bl_ic,3
       	.set	bl_nm,4
       	.set	bl_p0,5
       	.set	bl_p1,6
       	.set	bl_p2,7
       	.set	bl_rc,8
       	.set	bl_sc,9
       	.set	bl_se,10
       	.set	bl_tb,11
       	.set	bl_vc,12
       	.set	bl_xn,13
       	.set	bl_xr,14
       	.set	bl_bc,15
       	.set	bl_pd,16
       	.set	bl__d,17
       	.set	bl_tr,17
       	.set	bl_bf,18
       	.set	bl_cc,19
       	.set	bl_cm,20
       	.set	bl_ct,21
       	.set	bl_df,22
       	.set	bl_ef,23
       	.set	bl_ev,24
       	.set	bl_ff,25
       	.set	bl_kv,26
       	.set	bl_pf,27
       	.set	bl_te,28
       	.set	bl__i,0
       	.set	bl__t,18
       	.set	bl___,29
       	.set	fcode,0
       	.set	fargs,1
       	.set	idval,1
       	.set	artyp,0
       	.set	arlen,2
       	.set	arofs,3
       	.set	arndm,4
       	.set	arlbd,5
       	.set	ardim,6
       	.set	arlb2,7
       	.set	ardm2,8
       	.set	arpro,7
       	.set	arvls,8
       	.set	arpr2,9
       	.set	arvl2,10
       	.set	arsi_,5
       	.set	ardms,2
       	.set	cctyp,0
       	.set	cclen,1
       	.set	ccsln,2
       	.set	ccuse,3
       	.set	cccod,4
       	.set	cdjmp,0
       	.set	cdstm,1
       	.set	cdsln,2
       	.set	cdlen,3
       	.set	cdfal,4
       	.set	cdcod,5
       	.set	cdsi_,5
       	.set	cmidn,0
       	.set	cmlen,1
       	.set	cmtyp,2
       	.set	cmopn,3
       	.set	cmvls,4
       	.set	cmrop,4
       	.set	cmlop,5
       	.set	cmsi_,4
       	.set	cmus_,5
       	.set	cmbs_,6
       	.set	cmar1,5
       	.set	c_arr,0
       	.set	c_fnc,1
       	.set	c_def,2
       	.set	c_ind,3
       	.set	c_key,4
       	.set	c_ubo,5
       	.set	c_uuo,6
       	.set	c_uo_,7
       	.set	c__nm,7
       	.set	c_bvl,7
       	.set	c_uvl,8
       	.set	c_alt,9
       	.set	c_cnc,10
       	.set	c_cnp,11
       	.set	c_unm,12
       	.set	c_bvn,13
       	.set	c_ass,14
       	.set	c_int,15
       	.set	c_neg,16
       	.set	c_sel,17
       	.set	c_pmt,18
       	.set	c_pr_,13
       	.set	c__nv,19
       	.set	cttyp,0
       	.set	ctchs,1
       	.set	ctsi_,257
       	.set	dflen,2
       	.set	dfpdl,3
       	.set	dfnam,4
       	.set	dffld,5
       	.set	dfflb,4
       	.set	dfsi_,5
       	.set	dvopn,0
       	.set	dvtyp,1
       	.set	dvlpr,2
       	.set	dvrpr,3
       	.set	dvus_,3
       	.set	dvbs_,4
       	.set	dvubs,7
       	.set	rrass,10
       	.set	llass,0
       	.set	rrpmt,20
       	.set	llpmt,30
       	.set	rramp,40
       	.set	llamp,50
       	.set	rralt,70
       	.set	llalt,60
       	.set	rrcnc,90
       	.set	llcnc,80
       	.set	rrats,110
       	.set	llats,100
       	.set	rrplm,120
       	.set	llplm,130
       	.set	rrnum,140
       	.set	llnum,150
       	.set	rrdvd,160
       	.set	lldvd,170
       	.set	rrmlt,180
       	.set	llmlt,190
       	.set	rrpct,200
       	.set	llpct,210
       	.set	rrexp,230
       	.set	llexp,220
       	.set	rrdld,240
       	.set	lldld,250
       	.set	rrnot,270
       	.set	llnot,260
       	.set	lluno,999
       	.set	eflen,2
       	.set	efuse,3
       	.set	efcod,4
       	.set	efvar,5
       	.set	efrsl,6
       	.set	eftar,7
       	.set	efsi_,7
       	.set	evtyp,0
       	.set	evexp,1
       	.set	evvar,2
       	.set	evsi_,3
       	.set	extyp,0
       	.set	exstm,1
       	.set	exsln,2
       	.set	exlen,3
       	.set	exflc,4
       	.set	excod,5
       	.set	exsi_,5
       	.set	ffdfp,2
       	.set	ffnxt,3
       	.set	ffofs,4
       	.set	ffsi_,5
       	.set	icget,0
       	.set	icval,1
       	.set	icsi_,2
       	.set	kvtyp,0
       	.set	kvvar,1
       	.set	kvnum,2
       	.set	kvsi_,3
       	.set	nmtyp,0
       	.set	nmbas,1
       	.set	nmofs,2
       	.set	nmsi_,3
       	.set	pcode,0
       	.set	pthen,1
       	.set	pasi_,2
       	.set	parm1,2
       	.set	pbsi_,3
       	.set	parm2,3
       	.set	pcsi_,4
       	.set	pdtyp,0
       	.set	pddfp,2
       	.set	pdfld,3
       	.set	pdfof,2
       	.set	pdsi_,3
       	.set	pddfs,2
       	.set	pflen,2
       	.set	pfvbl,3
       	.set	pfnlo,4
       	.set	pfcod,5
       	.set	pfctr,6
       	.set	pfrtr,7
       	.set	pfarg,8
       	.set	pfagb,7
       	.set	pfsi_,8
       	.set	rcget,0
       	.set	rcval,1
       	.set	rcsi_,2
       	.set	scget,0
       	.set	sclen,1
       	.set	schar,2
       	.set	scsi_,2
       	.set	setyp,0
       	.set	sevar,1
       	.set	sesi_,2
       	.set	svbit,0
       	.set	svlen,1
       	.set	svchs,2
       	.set	svsi_,2
       	.set	svpre,1
       	.set	svffc,2
       	.set	svckw,4
       	.set	svprd,8
       	.set	svnbt,4
       	.set	svknm,16
       	.set	svfnc,32
       	.set	svnar,64
       	.set	svlbl,128
       	.set	svval,256
       	.set	svfnf,96
       	.set	svfnn,98
       	.set	svfnp,99
       	.set	svfpr,106
       	.set	svfnk,114
       	.set	svkwv,272
       	.set	svkwc,20
       	.set	svkvc,276
       	.set	svkvl,404
       	.set	svfpk,375
       	.set	k_abe,0
       	.set	k_anc,8
       	.set	k_cas,16
       	.set	k_cod,24
       	.set	k_com,32
       	.set	k_dmp,40
       	.set	k_erl,48
       	.set	k_ert,56
       	.set	k_ftr,64
       	.set	k_fls,72
       	.set	k_inp,80
       	.set	k_mxl,88
       	.set	k_oup,96
       	.set	k_pfl,104
       	.set	k_tra,112
       	.set	k_trm,120
       	.set	k_fnc,128
       	.set	k_lst,136
       	.set	k_lln,144
       	.set	k_lin,152
       	.set	k_stn,160
       	.set	k_abo,168
       	.set	k_arb,170
       	.set	k_bal,172
       	.set	k_fal,174
       	.set	k_fen,176
       	.set	k_rem,178
       	.set	k_suc,180
       	.set	k_alp,181
       	.set	k_rtn,182
       	.set	k_stc,183
       	.set	k_etx,184
       	.set	k_fil,185
       	.set	k_lfl,186
       	.set	k_stl,187
       	.set	k_lcs,188
       	.set	k_ucs,189
       	.set	k__al,0
       	.set	k__rt,1
       	.set	k__sc,2
       	.set	k__et,3
       	.set	k__fl,4
       	.set	k__lf,5
       	.set	k__sl,6
       	.set	k__lc,7
       	.set	k__uc,8
       	.set	k__n_,9
       	.set	k_p__,128
       	.set	k_v__,168
       	.set	k_s__,181
       	.set	tbtyp,0
       	.set	tblen,2
       	.set	tbinv,3
       	.set	tbbuk,4
       	.set	tbsi_,4
       	.set	tbnbk,11
       	.set	tetyp,0
       	.set	tesub,1
       	.set	teval,2
       	.set	tenxt,3
       	.set	tesi_,4
       	.set	tridn,0
       	.set	trtyp,1
       	.set	trval,2
       	.set	trnxt,2
       	.set	trlbl,2
       	.set	trkvr,2
       	.set	trtag,3
       	.set	trter,3
       	.set	trtrf,3
       	.set	trfnc,4
       	.set	trfpt,4
       	.set	trsi_,5
       	.set	trtin,0
       	.set	trtac,1
       	.set	trtvl,2
       	.set	trtou,3
       	.set	trtfc,4
       	.set	vctyp,0
       	.set	vclen,2
       	.set	vcvls,3
       	.set	vcsi_,3
       	.set	vcvlb,2
       	.set	vctbd,1
       	.set	vrget,0
       	.set	vrsto,1
       	.set	vrval,2
       	.set	vrvlo,1
       	.set	vrtra,3
       	.set	vrlbl,4
       	.set	vrlbo,1
       	.set	vrfnc,5
       	.set	vrnxt,6
       	.set	vrlen,7
       	.set	vrchs,8
       	.set	vrsvp,8
       	.set	vrsi_,9
       	.set	vrsof,6
       	.set	vrsvo,2
       	.set	xntyp,0
       	.set	xnlen,1
       	.set	xndta,2
       	.set	xnsi_,2
       	.set	xrtyp,0
       	.set	xrlen,1
       	.set	xrptr,2
       	.set	xrsi_,2
       	.set	cnvst,8
       	.set	cnvrt,9
       	.set	cnvbt,9
       	.set	cnvtt,10
       	.set	iniln,1024
       	.set	inils,1024
       	.set	ionmb,2
       	.set	ionmo,4
       	.set	mnlen,1024
       	.set	mxern,329
       	.set	num01,1
       	.set	num02,2
       	.set	num03,3
       	.set	num04,4
       	.set	num05,5
       	.set	num06,6
       	.set	num07,7
       	.set	num08,8
       	.set	num09,9
       	.set	num10,10
       	.set	num25,25
       	.set	nm320,320
       	.set	nm321,321
       	.set	nini8,998
       	.set	nini9,999
       	.set	thsnd,1000
       	.set	opbun,5
       	.set	opuun,6
       	.set	prsnf,13
       	.set	prtmf,21
       	.set	rilen,1024
       	.set	stgic,0
       	.set	stgxc,1
       	.set	stgev,2
       	.set	stgxt,3
       	.set	stgce,4
       	.set	stgxe,5
       	.set	stgnd,4
       	.set	stgee,6
       	.set	stgno,7
       	.set	stnpd,8
       	.set	t_uop,0
       	.set	t_lpr,3
       	.set	t_lbr,6
       	.set	t_cma,9
       	.set	t_fnc,12
       	.set	t_var,15
       	.set	t_con,18
       	.set	t_bop,21
       	.set	t_rpr,24
       	.set	t_rbr,27
       	.set	t_col,30
       	.set	t_smc,33
       	.set	t_fgo,34
       	.set	t_sgo,35
       	.set	t_uok,12
       	.set	t_uo0,0
       	.set	t_uo1,1
       	.set	t_uo2,2
       	.set	t_lp0,3
       	.set	t_lp1,4
       	.set	t_lp2,5
       	.set	t_lb0,6
       	.set	t_lb1,7
       	.set	t_lb2,8
       	.set	t_cm0,9
       	.set	t_cm1,10
       	.set	t_cm2,11
       	.set	t_fn0,12
       	.set	t_fn1,13
       	.set	t_fn2,14
       	.set	t_va0,15
       	.set	t_va1,16
       	.set	t_va2,17
       	.set	t_co0,18
       	.set	t_co1,19
       	.set	t_co2,20
       	.set	t_bo0,21
       	.set	t_bo1,22
       	.set	t_bo2,23
       	.set	t_rp0,24
       	.set	t_rp1,25
       	.set	t_rp2,26
       	.set	t_rb0,27
       	.set	t_rb1,28
       	.set	t_rb2,29
       	.set	t_cl0,30
       	.set	t_cl1,31
       	.set	t_cl2,32
       	.set	t_sm0,33
       	.set	t_sm1,34
       	.set	t_sm2,35
       	.set	t_nes,36
       	.set	cc_ca,0
       	.set	cc_do,1
       	.set	cc_co,2
       	.set	cc_du,3
       	.set	cc_cp,4
       	.set	cc_ej,5
       	.set	cc_er,6
       	.set	cc_ex,7
       	.set	cc_fa,8
       	.set	cc_in,9
       	.set	cc_ln,10
       	.set	cc_li,11
       	.set	cc_nr,12
       	.set	cc_nx,13
       	.set	cc_nf,14
       	.set	cc_nl,15
       	.set	cc_no,16
       	.set	cc_np,17
       	.set	cc_op,18
       	.set	cc_pr,19
       	.set	cc_si,20
       	.set	cc_sp,21
       	.set	cc_st,22
       	.set	cc_ti,23
       	.set	cc_tr,24
       	.set	cc_nc,25
       	.set	ccnoc,4
       	.set	ccofs,7
       	.set	ccinm,9
       	.set	cmstm,0
       	.set	cmsgo,1
       	.set	cmfgo,2
       	.set	cmcgo,3
       	.set	cmpcd,4
       	.set	cmffp,5
       	.set	cmffc,6
       	.set	cmsop,7
       	.set	cmsoc,8
       	.set	cmlbl,9
       	.set	cmtra,10
       	.set	cmnen,11
       	.set	pfpd1,8
       	.set	pfpd2,20
       	.set	pfpd3,32
       	.set	pf_i2,2
       	.set	rlend,0
       	.set	rladj,1
       	.set	rlstr,2
       	.set	rssi_,3
       	.set	rnsi_,5
       	.set	rldye,0
       	.set	rldya,1
       	.set	rldys,2
       	.set	rlste,3
       	.set	rlsta,4
       	.set	rlsts,5
       	.set	rlwke,6
       	.set	rlwka,7
       	.set	rlwks,8
       	.set	rlcne,9
       	.set	rlcna,10
       	.set	rlcns,11
       	.set	rlcde,12
       	.set	rlcda,13
       	.set	rlcds,14
       	.set	rlsi_,15
       	.data
       	.global	sec03
       	.align	8
sec03:
c_aaa: 	.quad	0
alfsp: 	.quad	e_fsp
bits0: 	.quad	0
bits1: 	.quad	1
bits2: 	.quad	2
bits3: 	.quad	4
bits4: 	.quad	8
bits5: 	.quad	16
bits6: 	.quad	32
bits7: 	.quad	64
bits8: 	.quad	128
bits9: 	.quad	256
bit10: 	.quad	512
bit11: 	.quad	1024
bit12: 	.quad	2048
bitsm: 	.quad	0
btfnc: 	.quad	svfnc
btknm: 	.quad	svknm
btlbl: 	.quad	svlbl
btffc: 	.quad	svffc
btckw: 	.quad	svckw
btkwv: 	.quad	svkwv
btprd: 	.quad	svprd
btpre: 	.quad	svpre
btval: 	.quad	svval
ccnms: 	.ascii	"case"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"doub"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"comp"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"dump"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"copy"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"ejec"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"erro"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"exec"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"fail"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"incl"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"line"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"list"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"noer"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"noex"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"nofa"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"noli"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"noop"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"nopr"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"opti"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"prin"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"sing"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"spac"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"stit"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"titl"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.ascii	"trac"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
dmhdk: 	.quad	b_scl
       	.quad	22
       	.ascii	"dump of keyword values"
       	.byte	0
       	.byte	0
dmhdv: 	.quad	b_scl
       	.quad	25
       	.ascii	"dump of natural variables"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
encm1: 	.quad	b_scl
       	.quad	19
       	.ascii	"memory used (bytes)"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
encm2: 	.quad	b_scl
       	.quad	19
       	.ascii	"memory left (bytes)"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
encm3: 	.quad	b_scl
       	.quad	11
       	.ascii	"comp errors"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
encm4: 	.quad	b_scl
       	.quad	20
       	.ascii	"comp time (millisec)"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
encm5: 	.quad	b_scl
       	.quad	20
       	.ascii	"execution suppressed"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
endab: 	.quad	b_scl
       	.quad	12
       	.ascii	"abnormal end"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
endmo: 	.quad	b_scl
endml: 	.quad	15
       	.ascii	"memory overflow"
       	.byte	0
endms: 	.quad	b_scl
       	.quad	10
       	.ascii	"normal end"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
endso: 	.quad	b_scl
       	.quad	36
       	.ascii	"stack overflow in garbage collection"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
endtu: 	.quad	b_scl
       	.quad	15
       	.ascii	"error - time up"
       	.byte	0
ermms: 	.quad	b_scl
       	.quad	5
       	.ascii	"error"
       	.byte	0
       	.byte	0
       	.byte	0
ermns: 	.quad	b_scl
       	.quad	4
       	.ascii	" -- "
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
lstms: 	.quad	b_scl
       	.quad	5
       	.ascii	"page "
       	.byte	0
       	.byte	0
       	.byte	0
headr: 	.quad	b_scl
       	.quad	27
       	.ascii	"macro spitbol version 15.01"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
headv: 	.quad	b_scl
       	.quad	5
       	.ascii	"15.01"
       	.byte	0
       	.byte	0
       	.byte	0
gbsdp: 	.quad	e_sed
int_r: 	.quad	b_icl
intv0: 	.quad	+0
inton: 	.quad	b_icl
intv1: 	.quad	+1
inttw: 	.quad	b_icl
intv2: 	.quad	+2
intvt: 	.quad	+10
intvh: 	.quad	+100
intth: 	.quad	+1000
intab: 	.quad	int_r
       	.quad	inton
       	.quad	inttw
ndabb: 	.quad	p_abb
ndabd: 	.quad	p_abd
ndarc: 	.quad	p_arc
ndexb: 	.quad	p_exb
ndfnb: 	.quad	p_fnb
ndfnd: 	.quad	p_fnd
ndexc: 	.quad	p_exc
ndimb: 	.quad	p_imb
ndimd: 	.quad	p_imd
ndnth: 	.quad	p_nth
ndpab: 	.quad	p_pab
ndpad: 	.quad	p_pad
nduna: 	.quad	p_una
ndabo: 	.quad	p_abo
       	.quad	ndnth
ndarb: 	.quad	p_arb
       	.quad	ndnth
ndbal: 	.quad	p_bal
       	.quad	ndnth
ndfal: 	.quad	p_fal
       	.quad	ndnth
ndfen: 	.quad	p_fen
       	.quad	ndnth
ndrem: 	.quad	p_rem
       	.quad	ndnth
ndsuc: 	.quad	p_suc
       	.quad	ndnth
nulls: 	.quad	b_scl
       	.quad	0
nullw: 	.ascii	"          "
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
lcase: 	.quad	b_scl
       	.quad	26
       	.ascii	"abcdefghijklmnopqrstuvwxyz"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
ucase: 	.quad	b_scl
       	.quad	26
       	.ascii	"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
opdvc: 	.quad	o_cnc
       	.quad	c_cnc
       	.quad	llcnc
       	.quad	rrcnc
opdvp: 	.quad	o_cnc
       	.quad	c_cnp
       	.quad	llcnc
       	.quad	rrcnc
opdvs: 	.quad	o_ass
       	.quad	c_ass
       	.quad	llass
       	.quad	rrass
       	.quad	6
       	.quad	c_uuo
       	.quad	lluno
       	.quad	o_pmv
       	.quad	c_pmt
       	.quad	llpmt
       	.quad	rrpmt
       	.quad	o_int
       	.quad	c_uvl
       	.quad	lluno
       	.quad	1
       	.quad	c_ubo
       	.quad	llamp
       	.quad	rramp
       	.quad	o_kwv
       	.quad	c_key
       	.quad	lluno
       	.quad	o_alt
       	.quad	c_alt
       	.quad	llalt
       	.quad	rralt
       	.quad	5
       	.quad	c_uuo
       	.quad	lluno
       	.quad	0
       	.quad	c_ubo
       	.quad	llats
       	.quad	rrats
       	.quad	o_cas
       	.quad	c_unm
       	.quad	lluno
       	.quad	2
       	.quad	c_ubo
       	.quad	llnum
       	.quad	rrnum
       	.quad	7
       	.quad	c_uuo
       	.quad	lluno
       	.quad	o_dvd
       	.quad	c_bvl
       	.quad	lldvd
       	.quad	rrdvd
       	.quad	9
       	.quad	c_uuo
       	.quad	lluno
       	.quad	o_mlt
       	.quad	c_bvl
       	.quad	llmlt
       	.quad	rrmlt
       	.quad	0
       	.quad	c_def
       	.quad	lluno
       	.quad	3
       	.quad	c_ubo
       	.quad	llpct
       	.quad	rrpct
       	.quad	8
       	.quad	c_uuo
       	.quad	lluno
       	.quad	o_exp
       	.quad	c_bvl
       	.quad	llexp
       	.quad	rrexp
       	.quad	10
       	.quad	c_uuo
       	.quad	lluno
       	.quad	o_ima
       	.quad	c_bvn
       	.quad	lldld
       	.quad	rrdld
       	.quad	o_inv
       	.quad	c_ind
       	.quad	lluno
       	.quad	4
       	.quad	c_ubo
       	.quad	llnot
       	.quad	rrnot
       	.quad	0
       	.quad	c_neg
       	.quad	lluno
       	.quad	o_sub
       	.quad	c_bvl
       	.quad	llplm
       	.quad	rrplm
       	.quad	o_com
       	.quad	c_uvl
       	.quad	lluno
       	.quad	o_add
       	.quad	c_bvl
       	.quad	llplm
       	.quad	rrplm
       	.quad	o_aff
       	.quad	c_uvl
       	.quad	lluno
       	.quad	o_pas
       	.quad	c_bvn
       	.quad	lldld
       	.quad	rrdld
       	.quad	o_nam
       	.quad	c_unm
       	.quad	lluno
opdvd: 	.quad	o_god
       	.quad	c_uvl
       	.quad	lluno
opdvn: 	.quad	o_goc
       	.quad	c_unm
       	.quad	lluno
oamn_: 	.quad	o_amn
oamv_: 	.quad	o_amv
oaon_: 	.quad	o_aon
oaov_: 	.quad	o_aov
ocer_: 	.quad	o_cer
ofex_: 	.quad	o_fex
ofif_: 	.quad	o_fif
ofnc_: 	.quad	o_fnc
ofne_: 	.quad	o_fne
ofns_: 	.quad	o_fns
ogof_: 	.quad	o_gof
oinn_: 	.quad	o_inn
okwn_: 	.quad	o_kwn
olex_: 	.quad	o_lex
olpt_: 	.quad	o_lpt
olvn_: 	.quad	o_lvn
onta_: 	.quad	o_nta
ontb_: 	.quad	o_ntb
ontc_: 	.quad	o_ntc
opmn_: 	.quad	o_pmn
opms_: 	.quad	o_pms
opop_: 	.quad	o_pop
ornm_: 	.quad	o_rnm
orpl_: 	.quad	o_rpl
orvl_: 	.quad	o_rvl
osla_: 	.quad	o_sla
oslb_: 	.quad	o_slb
oslc_: 	.quad	o_slc
osld_: 	.quad	o_sld
ostp_: 	.quad	o_stp
ounf_: 	.quad	o_unf
opsnb: 	.quad	ch_at
       	.quad	ch_am
       	.quad	ch_nm
       	.quad	ch_pc
       	.quad	ch_nt
opnsu: 	.quad	ch_br
       	.quad	ch_eq
       	.quad	ch_nm
       	.quad	ch_pc
       	.quad	ch_sl
       	.quad	ch_ex
pfi2a: 	.quad	pf_i2
pfms1: 	.quad	b_scl
       	.quad	15
       	.ascii	"program profile"
       	.byte	0
pfms2: 	.quad	b_scl
       	.quad	42
       	.ascii	"stmt    number of     -- execution time --"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
pfms3: 	.quad	b_scl
       	.quad	47
       	.ascii	"number  executions  total(msec) per excn(mcsec)"
       	.byte	0
       	.align	8
reav0: 	.double	0.0
       	.align	8
reap1: 	.double	0.1
       	.align	8
reap5: 	.double	0.5
       	.align	8
reav1: 	.double	1.0
       	.align	8
reavt: 	.double	1.0e+1
       	.align	8
       	.double	1.0e+2
       	.align	8
       	.double	1.0e+3
       	.align	8
       	.double	1.0e+4
       	.align	8
       	.double	1.0e+5
       	.align	8
       	.double	1.0e+6
       	.align	8
       	.double	1.0e+7
       	.align	8
       	.double	1.0e+8
       	.align	8
       	.double	1.0e+9
       	.align	8
reatt: 	.double	1.0e+10
scarr: 	.quad	b_scl
       	.quad	5
       	.ascii	"array"
       	.byte	0
       	.byte	0
       	.byte	0
sccod: 	.quad	b_scl
       	.quad	4
       	.ascii	"code"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
scexp: 	.quad	b_scl
       	.quad	10
       	.ascii	"expression"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
scext: 	.quad	b_scl
       	.quad	8
       	.ascii	"external"
scint: 	.quad	b_scl
       	.quad	7
       	.ascii	"integer"
       	.byte	0
scnam: 	.quad	b_scl
       	.quad	4
       	.ascii	"name"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
scnum: 	.quad	b_scl
       	.quad	7
       	.ascii	"numeric"
       	.byte	0
scpat: 	.quad	b_scl
       	.quad	7
       	.ascii	"pattern"
       	.byte	0
screa: 	.quad	b_scl
       	.quad	4
       	.ascii	"real"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
scstr: 	.quad	b_scl
       	.quad	6
       	.ascii	"string"
       	.byte	0
       	.byte	0
sctab: 	.quad	b_scl
       	.quad	5
       	.ascii	"table"
       	.byte	0
       	.byte	0
       	.byte	0
scfil: 	.quad	b_scl
       	.quad	4
       	.ascii	"file"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
scfrt: 	.quad	b_scl
       	.quad	7
       	.ascii	"freturn"
       	.byte	0
scnrt: 	.quad	b_scl
       	.quad	7
       	.ascii	"nreturn"
       	.byte	0
scrtn: 	.quad	b_scl
       	.quad	6
       	.ascii	"return"
       	.byte	0
       	.byte	0
scnmt: 	.quad	scarr
       	.quad	sccod
       	.quad	scexp
       	.quad	scint
       	.quad	scnam
       	.quad	scpat
       	.quad	scpat
       	.quad	scpat
       	.quad	screa
       	.quad	scstr
       	.quad	scexp
       	.quad	sctab
       	.quad	scarr
       	.quad	scext
       	.quad	scext
       	.quad	nulls
scre0: 	.quad	b_scl
       	.quad	2
       	.ascii	"0."
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
stlim: 	.quad	+2147483647
stndf: 	.quad	o_fun
       	.quad	0
stndl: 	.quad	l_und
stndo: 	.quad	o_oun
       	.quad	0
stnvr: 	.quad	b_vrl
       	.quad	b_vrs
       	.quad	nulls
       	.quad	b_vrg
       	.quad	stndl
       	.quad	stndf
       	.quad	0
stpm1: 	.quad	b_scl
       	.quad	12
       	.ascii	"in statement"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
stpm2: 	.quad	b_scl
       	.quad	14
       	.ascii	"stmts executed"
       	.byte	0
       	.byte	0
stpm3: 	.quad	b_scl
       	.quad	19
       	.ascii	"run time (millisec)"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
stpm4: 	.quad	b_scl
       	.quad	12
       	.ascii	"mcsec / stmt"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
stpm5: 	.quad	b_scl
       	.quad	13
       	.ascii	"regenerations"
       	.byte	0
       	.byte	0
       	.byte	0
stpm6: 	.quad	b_scl
       	.quad	7
       	.ascii	"in line"
       	.byte	0
stpm7: 	.quad	b_scl
       	.quad	7
       	.ascii	"in file"
       	.byte	0
strtu: 	.ascii	"tu"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
svctb: 	.quad	scstr
       	.quad	scint
       	.quad	scnam
       	.quad	scpat
       	.quad	scarr
       	.quad	sctab
       	.quad	scexp
       	.quad	sccod
       	.quad	scnum
       	.quad	screa
       	.quad	0
tmasb: 	.quad	b_scl
       	.quad	13
       	.ascii	"************ "
       	.byte	0
       	.byte	0
       	.byte	0
tmbeb: 	.quad	b_scl
       	.quad	3
       	.ascii	" = "
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
trbev: 	.quad	b_trt
trbkv: 	.quad	b_trt
trxdr: 	.quad	o_txr
trxdc: 	.quad	trxdr
v_eqf: 	.quad	svfpr
       	.quad	2
       	.ascii	"eq"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_eqf
       	.quad	2
v_gef: 	.quad	svfpr
       	.quad	2
       	.ascii	"ge"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_gef
       	.quad	2
v_gtf: 	.quad	svfpr
       	.quad	2
       	.ascii	"gt"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_gtf
       	.quad	2
v_lef: 	.quad	svfpr
       	.quad	2
       	.ascii	"le"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_lef
       	.quad	2
v_lnf: 	.quad	svfnp
       	.quad	2
       	.ascii	"ln"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_lnf
       	.quad	1
v_ltf: 	.quad	svfpr
       	.quad	2
       	.ascii	"lt"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_ltf
       	.quad	2
v_nef: 	.quad	svfpr
       	.quad	2
       	.ascii	"ne"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_nef
       	.quad	2
v_any: 	.quad	svfnp
       	.quad	3
       	.ascii	"any"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_any
       	.quad	1
v_arb: 	.quad	svkvc
       	.quad	3
       	.ascii	"arb"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_arb
       	.quad	ndarb
v_arg: 	.quad	svfnn
       	.quad	3
       	.ascii	"arg"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_arg
       	.quad	2
v_bal: 	.quad	svkvc
       	.quad	3
       	.ascii	"bal"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_bal
       	.quad	ndbal
v_cos: 	.quad	svfnp
       	.quad	3
       	.ascii	"cos"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_cos
       	.quad	1
v_end: 	.quad	svlbl
       	.quad	3
       	.ascii	"end"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	l_end
v_exp: 	.quad	svfnp
       	.quad	3
       	.ascii	"exp"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_exp
       	.quad	1
v_len: 	.quad	svfnp
       	.quad	3
       	.ascii	"len"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_len
       	.quad	1
v_leq: 	.quad	svfpr
       	.quad	3
       	.ascii	"leq"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_leq
       	.quad	2
v_lge: 	.quad	svfpr
       	.quad	3
       	.ascii	"lge"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_lge
       	.quad	2
v_lgt: 	.quad	svfpr
       	.quad	3
       	.ascii	"lgt"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_lgt
       	.quad	2
v_lle: 	.quad	svfpr
       	.quad	3
       	.ascii	"lle"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_lle
       	.quad	2
v_llt: 	.quad	svfpr
       	.quad	3
       	.ascii	"llt"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_llt
       	.quad	2
v_lne: 	.quad	svfpr
       	.quad	3
       	.ascii	"lne"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_lne
       	.quad	2
v_pos: 	.quad	svfnp
       	.quad	3
       	.ascii	"pos"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_pos
       	.quad	1
v_rem: 	.quad	svkvc
       	.quad	3
       	.ascii	"rem"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_rem
       	.quad	ndrem
v_set: 	.quad	svfnn
       	.quad	3
       	.ascii	"set"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_set
       	.quad	3
v_sin: 	.quad	svfnp
       	.quad	3
       	.ascii	"sin"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_sin
       	.quad	1
v_tab: 	.quad	svfnp
       	.quad	3
       	.ascii	"tab"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_tab
       	.quad	1
v_tan: 	.quad	svfnp
       	.quad	3
       	.ascii	"tan"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_tan
       	.quad	1
v_atn: 	.quad	svfnp
       	.quad	4
       	.ascii	"atan"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_atn
       	.quad	1
v_cas: 	.quad	svknm
       	.quad	4
       	.ascii	"case"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_cas
v_chr: 	.quad	svfnp
       	.quad	4
       	.ascii	"char"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_chr
       	.quad	1
v_chp: 	.quad	svfnp
       	.quad	4
       	.ascii	"chop"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_chp
       	.quad	1
v_cod: 	.quad	svfnk
       	.quad	4
       	.ascii	"code"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_cod
       	.quad	s_cod
       	.quad	1
v_cop: 	.quad	svfnn
       	.quad	4
       	.ascii	"copy"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_cop
       	.quad	1
v_dat: 	.quad	svfnn
       	.quad	4
       	.ascii	"data"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_dat
       	.quad	1
v_dte: 	.quad	svfnn
       	.quad	4
       	.ascii	"date"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_dte
       	.quad	1
v_dmp: 	.quad	svfnk
       	.quad	4
       	.ascii	"dump"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_dmp
       	.quad	s_dmp
       	.quad	1
v_dup: 	.quad	svfnn
       	.quad	4
       	.ascii	"dupl"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_dup
       	.quad	2
v_evl: 	.quad	svfnn
       	.quad	4
       	.ascii	"eval"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_evl
       	.quad	1
v_ext: 	.quad	svfnn
       	.quad	4
       	.ascii	"exit"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_ext
       	.quad	2
v_fal: 	.quad	svkvc
       	.quad	4
       	.ascii	"fail"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_fal
       	.quad	ndfal
v_fil: 	.quad	svknm
       	.quad	4
       	.ascii	"file"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_fil
v_hst: 	.quad	svfnn
       	.quad	4
       	.ascii	"host"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_hst
       	.quad	5
v_itm: 	.quad	svfnf
       	.quad	4
       	.ascii	"item"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_itm
       	.quad	999
v_lin: 	.quad	svknm
       	.quad	4
       	.ascii	"line"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_lin
v_lod: 	.quad	svfnn
       	.quad	4
       	.ascii	"load"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_lod
       	.quad	2
v_lpd: 	.quad	svfnp
       	.quad	4
       	.ascii	"lpad"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_lpd
       	.quad	3
v_rpd: 	.quad	svfnp
       	.quad	4
       	.ascii	"rpad"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_rpd
       	.quad	3
v_rps: 	.quad	svfnp
       	.quad	4
       	.ascii	"rpos"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_rps
       	.quad	1
v_rtb: 	.quad	svfnp
       	.quad	4
       	.ascii	"rtab"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_rtb
       	.quad	1
v_si_: 	.quad	svfnp
       	.quad	4
       	.ascii	"size"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_si_
       	.quad	1
v_srt: 	.quad	svfnn
       	.quad	4
       	.ascii	"sort"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_srt
       	.quad	2
v_spn: 	.quad	svfnp
       	.quad	4
       	.ascii	"span"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_spn
       	.quad	1
v_sqr: 	.quad	svfnp
       	.quad	4
       	.ascii	"sqrt"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_sqr
       	.quad	1
v_stn: 	.quad	svknm
       	.quad	4
       	.ascii	"stno"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_stn
v_tim: 	.quad	svfnn
       	.quad	4
       	.ascii	"time"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_tim
       	.quad	0
v_trm: 	.quad	svfnk
       	.quad	4
       	.ascii	"trim"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_trm
       	.quad	s_trm
       	.quad	1
v_abe: 	.quad	svknm
       	.quad	5
       	.ascii	"abend"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_abe
v_abo: 	.quad	svkvl
       	.quad	5
       	.ascii	"abort"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_abo
       	.quad	l_abo
       	.quad	ndabo
v_app: 	.quad	svfnf
       	.quad	5
       	.ascii	"apply"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_app
       	.quad	999
v_abn: 	.quad	svfnp
       	.quad	5
       	.ascii	"arbno"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_abn
       	.quad	1
v_arr: 	.quad	svfnn
       	.quad	5
       	.ascii	"array"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_arr
       	.quad	2
v_brk: 	.quad	svfnp
       	.quad	5
       	.ascii	"break"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_brk
       	.quad	1
v_clr: 	.quad	svfnn
       	.quad	5
       	.ascii	"clear"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_clr
       	.quad	1
v_ejc: 	.quad	svfnn
       	.quad	5
       	.ascii	"eject"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_ejc
       	.quad	1
v_fen: 	.quad	svfpk
       	.quad	5
       	.ascii	"fence"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_fen
       	.quad	s_fnc
       	.quad	1
       	.quad	ndfen
v_fld: 	.quad	svfnn
       	.quad	5
       	.ascii	"field"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_fld
       	.quad	2
v_idn: 	.quad	svfpr
       	.quad	5
       	.ascii	"ident"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_idn
       	.quad	2
v_inp: 	.quad	svfnk
       	.quad	5
       	.ascii	"input"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_inp
       	.quad	s_inp
       	.quad	3
v_lcs: 	.quad	svkwc
       	.quad	5
       	.ascii	"lcase"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_lcs
v_loc: 	.quad	svfnn
       	.quad	5
       	.ascii	"local"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_loc
       	.quad	2
v_ops: 	.quad	svfnn
       	.quad	5
       	.ascii	"opsyn"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_ops
       	.quad	3
v_rmd: 	.quad	svfnp
       	.quad	5
       	.ascii	"remdr"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_rmd
       	.quad	2
v_rsr: 	.quad	svfnn
       	.quad	5
       	.ascii	"rsort"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_rsr
       	.quad	2
v_tbl: 	.quad	svfnn
       	.quad	5
       	.ascii	"table"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_tbl
       	.quad	3
v_tra: 	.quad	svfnk
       	.quad	5
       	.ascii	"trace"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_tra
       	.quad	s_tra
       	.quad	4
v_ucs: 	.quad	svkwc
       	.quad	5
       	.ascii	"ucase"
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	k_ucs
v_anc: 	.quad	svknm
       	.quad	6
       	.ascii	"anchor"
       	.byte	0
       	.byte	0
       	.quad	k_anc
v_bkx: 	.quad	svfnp
       	.quad	6
       	.ascii	"breakx"
       	.byte	0
       	.byte	0
       	.quad	s_bkx
       	.quad	1
v_def: 	.quad	svfnn
       	.quad	6
       	.ascii	"define"
       	.byte	0
       	.byte	0
       	.quad	s_def
       	.quad	2
v_det: 	.quad	svfnn
       	.quad	6
       	.ascii	"detach"
       	.byte	0
       	.byte	0
       	.quad	s_det
       	.quad	1
v_dif: 	.quad	svfpr
       	.quad	6
       	.ascii	"differ"
       	.byte	0
       	.byte	0
       	.quad	s_dif
       	.quad	2
v_ftr: 	.quad	svknm
       	.quad	6
       	.ascii	"ftrace"
       	.byte	0
       	.byte	0
       	.quad	k_ftr
v_lst: 	.quad	svknm
       	.quad	6
       	.ascii	"lastno"
       	.byte	0
       	.byte	0
       	.quad	k_lst
v_nay: 	.quad	svfnp
       	.quad	6
       	.ascii	"notany"
       	.byte	0
       	.byte	0
       	.quad	s_nay
       	.quad	1
v_oup: 	.quad	svfnk
       	.quad	6
       	.ascii	"output"
       	.byte	0
       	.byte	0
       	.quad	k_oup
       	.quad	s_oup
       	.quad	3
v_ret: 	.quad	svlbl
       	.quad	6
       	.ascii	"return"
       	.byte	0
       	.byte	0
       	.quad	l_rtn
v_rew: 	.quad	svfnn
       	.quad	6
       	.ascii	"rewind"
       	.byte	0
       	.byte	0
       	.quad	s_rew
       	.quad	1
v_stt: 	.quad	svfnn
       	.quad	6
       	.ascii	"stoptr"
       	.byte	0
       	.byte	0
       	.quad	s_stt
       	.quad	2
v_sub: 	.quad	svfnn
       	.quad	6
       	.ascii	"substr"
       	.byte	0
       	.byte	0
       	.quad	s_sub
       	.quad	3
v_unl: 	.quad	svfnn
       	.quad	6
       	.ascii	"unload"
       	.byte	0
       	.byte	0
       	.quad	s_unl
       	.quad	1
v_col: 	.quad	svfnn
       	.quad	7
       	.ascii	"collect"
       	.byte	0
       	.quad	s_col
       	.quad	1
v_com: 	.quad	svknm
       	.quad	7
       	.ascii	"compare"
       	.byte	0
       	.quad	k_com
v_cnv: 	.quad	svfnn
       	.quad	7
       	.ascii	"convert"
       	.byte	0
       	.quad	s_cnv
       	.quad	2
v_enf: 	.quad	svfnn
       	.quad	7
       	.ascii	"endfile"
       	.byte	0
       	.quad	s_enf
       	.quad	1
v_etx: 	.quad	svknm
       	.quad	7
       	.ascii	"errtext"
       	.byte	0
       	.quad	k_etx
v_ert: 	.quad	svknm
       	.quad	7
       	.ascii	"errtype"
       	.byte	0
       	.quad	k_ert
v_frt: 	.quad	svlbl
       	.quad	7
       	.ascii	"freturn"
       	.byte	0
       	.quad	l_frt
v_int: 	.quad	svfpr
       	.quad	7
       	.ascii	"integer"
       	.byte	0
       	.quad	s_int
       	.quad	1
v_nrt: 	.quad	svlbl
       	.quad	7
       	.ascii	"nreturn"
       	.byte	0
       	.quad	l_nrt
v_pfl: 	.quad	svknm
       	.quad	7
       	.ascii	"profile"
       	.byte	0
       	.quad	k_pfl
v_rpl: 	.quad	svfnp
       	.quad	7
       	.ascii	"replace"
       	.byte	0
       	.quad	s_rpl
       	.quad	3
v_rvs: 	.quad	svfnp
       	.quad	7
       	.ascii	"reverse"
       	.byte	0
       	.quad	s_rvs
       	.quad	1
v_rtn: 	.quad	svknm
       	.quad	7
       	.ascii	"rtntype"
       	.byte	0
       	.quad	k_rtn
v_stx: 	.quad	svfnn
       	.quad	7
       	.ascii	"setexit"
       	.byte	0
       	.quad	s_stx
       	.quad	1
v_stc: 	.quad	svknm
       	.quad	7
       	.ascii	"stcount"
       	.byte	0
       	.quad	k_stc
v_stl: 	.quad	svknm
       	.quad	7
       	.ascii	"stlimit"
       	.byte	0
       	.quad	k_stl
v_suc: 	.quad	svkvc
       	.quad	7
       	.ascii	"succeed"
       	.byte	0
       	.quad	k_suc
       	.quad	ndsuc
v_alp: 	.quad	svkwc
       	.quad	8
       	.ascii	"alphabet"
       	.quad	k_alp
v_cnt: 	.quad	svlbl
       	.quad	8
       	.ascii	"continue"
       	.quad	l_cnt
v_dtp: 	.quad	svfnp
       	.quad	8
       	.ascii	"datatype"
       	.quad	s_dtp
       	.quad	1
v_erl: 	.quad	svknm
       	.quad	8
       	.ascii	"errlimit"
       	.quad	k_erl
v_fnc: 	.quad	svknm
       	.quad	8
       	.ascii	"fnclevel"
       	.quad	k_fnc
v_fls: 	.quad	svknm
       	.quad	8
       	.ascii	"fullscan"
       	.quad	k_fls
v_lfl: 	.quad	svknm
       	.quad	8
       	.ascii	"lastfile"
       	.quad	k_lfl
v_lln: 	.quad	svknm
       	.quad	8
       	.ascii	"lastline"
       	.quad	k_lln
v_mxl: 	.quad	svknm
       	.quad	8
       	.ascii	"maxlngth"
       	.quad	k_mxl
v_ter: 	.quad	0
       	.quad	8
       	.ascii	"terminal"
       	.quad	0
v_bsp: 	.quad	svfnn
       	.quad	9
       	.ascii	"backspace"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_bsp
       	.quad	1
v_pro: 	.quad	svfnn
       	.quad	9
       	.ascii	"prototype"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	s_pro
       	.quad	1
v_scn: 	.quad	svlbl
       	.quad	9
       	.ascii	"scontinue"
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.quad	l_scn
       	.quad	0
       	.quad	10
vdmkw: 	.quad	v_anc
       	.quad	v_cas
       	.quad	v_cod
       	.quad	1
       	.quad	v_dmp
       	.quad	v_erl
       	.quad	v_etx
       	.quad	v_ert
       	.quad	v_fil
       	.quad	v_fnc
       	.quad	v_ftr
       	.quad	v_fls
       	.quad	v_inp
       	.quad	v_lfl
       	.quad	v_lln
       	.quad	v_lst
       	.quad	v_lin
       	.quad	v_mxl
       	.quad	v_oup
       	.quad	v_pfl
       	.quad	v_rtn
       	.quad	v_stc
       	.quad	v_stl
       	.quad	v_stn
       	.quad	v_tra
       	.quad	v_trm
       	.quad	0
vsrch: 	.quad	0
       	.quad	v_eqf
       	.quad	v_eqf
       	.quad	v_any
       	.quad	v_atn
       	.quad	v_abe
       	.quad	v_anc
       	.quad	v_col
       	.quad	v_alp
       	.quad	v_bsp
c_yyy: 	.quad	0
       	.global	esec03
esec03:
       	.data
       	.global	sec04
sec04:
cmlab: 	.quad	b_scl
       	.quad	2
       	.ascii	"  "
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
       	.byte	0
w_aaa: 	.quad	0
actrm: 	.quad	0
aldyn: 	.quad	0
allia: 	.quad	+0
allsv: 	.quad	0
alsta: 	.quad	0
arcdm: 	.quad	0
arnel: 	.quad	+0
arptr: 	.quad	0
arsvl: 	.quad	+0
arfsi: 	.quad	+0
arfxs: 	.quad	0
befof: 	.quad	0
bpfpf: 	.quad	0
bpfsv: 	.quad	0
bpfxt: 	.quad	0
clsvi: 	.quad	+0
cnscc: 	.quad	0
cnswc: 	.quad	0
cnr_t: 	.quad	0
cnvtp: 	.quad	0
datdv: 	.quad	0
datxs: 	.quad	0
deflb: 	.quad	0
defna: 	.quad	0
defvr: 	.quad	0
defxs: 	.quad	0
dmarg: 	.quad	0
dmpsa: 	.quad	0
dmpsb: 	.quad	0
dmpsv: 	.quad	0
dmvch: 	.quad	0
dmpch: 	.quad	0
dmpkb: 	.quad	0
dmpkt: 	.quad	0
dmpkn: 	.quad	0
dtcnb: 	.quad	0
dtcnm: 	.quad	0
dupsi: 	.quad	+0
enfch: 	.quad	0
ertwa: 	.quad	0
ertwb: 	.quad	0
evlin: 	.quad	0
evlis: 	.quad	0
evliv: 	.quad	0
evlio: 	.quad	0
evlif: 	.quad	0
expsv: 	.quad	0
gbcfl: 	.quad	0
gbclm: 	.quad	0
gbcnm: 	.quad	0
gbcns: 	.quad	0
gbcia: 	.quad	+0
gbcsd: 	.quad	0
gbcsf: 	.quad	0
gbsva: 	.quad	0
gbsvb: 	.quad	0
gbsvc: 	.quad	0
gnvhe: 	.quad	0
gnvnw: 	.quad	0
gnvsa: 	.quad	0
gnvsb: 	.quad	0
gnvsp: 	.quad	0
gnvst: 	.quad	0
gtawa: 	.quad	0
gtina: 	.quad	0
gtinb: 	.quad	0
gtnnf: 	.quad	0
gtnsi: 	.quad	+0
gtndf: 	.quad	0
gtnes: 	.quad	0
gtnex: 	.quad	+0
gtnsc: 	.quad	0
       	.align	8
gtnsr: 	.double	0.0
gtnrd: 	.quad	0
gtpsb: 	.quad	0
gtssf: 	.quad	0
gtsvc: 	.quad	0
gtsvb: 	.quad	0
gtses: 	.quad	0
       	.align	8
gtsrs: 	.double	0.0
gtvrc: 	.quad	0
ioptt: 	.quad	0
lodfn: 	.quad	0
lodna: 	.quad	0
mxint: 	.quad	0
pfsvw: 	.quad	0
prnsi: 	.quad	+0
prsna: 	.quad	0
prsva: 	.quad	0
prsvb: 	.quad	0
prsvc: 	.quad	0
prtsa: 	.quad	0
prtsb: 	.quad	0
prvsi: 	.quad	0
psave: 	.quad	0
psavc: 	.quad	0
rlals: 	.quad	0
rldcd: 	.quad	0
rldst: 	.quad	0
rldls: 	.quad	0
rtnbp: 	.quad	0
rtnfv: 	.quad	0
rtnsv: 	.quad	0
sbssv: 	.quad	0
scnsa: 	.quad	0
scnsb: 	.quad	0
scnsc: 	.quad	0
scnof: 	.quad	0
srtdf: 	.quad	0
srtfd: 	.quad	0
srtff: 	.quad	0
srtfo: 	.quad	0
srtnr: 	.quad	0
srtof: 	.quad	0
srtrt: 	.quad	0
srts1: 	.quad	0
srts2: 	.quad	0
srtsc: 	.quad	0
srtsf: 	.quad	0
srtsn: 	.quad	0
srtso: 	.quad	0
srtsr: 	.quad	0
srtst: 	.quad	0
srtwc: 	.quad	0
stpsi: 	.quad	+0
stpti: 	.quad	+0
tfnsi: 	.quad	+0
xscrt: 	.quad	0
xscwb: 	.quad	0
g_aaa: 	.quad	0
alfsf: 	.quad	+0
cmerc: 	.quad	0
cmpln: 	.quad	0
cmpxs: 	.quad	0
cmpsn: 	.quad	1
cnsil: 	.quad	0
cnind: 	.quad	0
cnspt: 	.quad	0
cnttl: 	.quad	0
cpsts: 	.quad	0
cswdb: 	.quad	0
cswer: 	.quad	0
cswex: 	.quad	0
cswfl: 	.quad	1
cswin: 	.quad	iniln
cswls: 	.quad	1
cswno: 	.quad	0
cswpr: 	.quad	0
ctmsk: 	.quad	0
curid: 	.quad	0
cwcof: 	.quad	0
dnams: 	.quad	0
erich: 	.quad	0
erlst: 	.quad	0
errft: 	.quad	0
errsp: 	.quad	0
exsts: 	.quad	0
flprt: 	.quad	0
flptr: 	.quad	0
gbsed: 	.quad	+0
gbcnt: 	.quad	0
gtcef: 	.quad	0
       	.align	8
gtsrn: 	.double	0.0
       	.align	8
gtssc: 	.double	0.0
gtswk: 	.quad	0
headp: 	.quad	0
hshnb: 	.quad	+0
initr: 	.quad	0
kvabe: 	.quad	0
kvanc: 	.quad	0
kvcas: 	.quad	0
kvcod: 	.quad	0
kvcom: 	.quad	0
kvdmp: 	.quad	0
kverl: 	.quad	0
kvert: 	.quad	0
kvftr: 	.quad	0
kvfls: 	.quad	1
kvinp: 	.quad	1
kvmxl: 	.quad	5000
kvoup: 	.quad	1
kvpfl: 	.quad	0
kvtra: 	.quad	0
kvtrm: 	.quad	0
kvfnc: 	.quad	0
kvlst: 	.quad	0
kvlln: 	.quad	0
kvlin: 	.quad	0
kvstn: 	.quad	0
kvalp: 	.quad	0
kvrtn: 	.quad	nulls
kvstl: 	.quad	+2147483647
kvstc: 	.quad	+2147483647
lstid: 	.quad	0
lstlc: 	.quad	0
lstnp: 	.quad	0
lstpf: 	.quad	1
lstpg: 	.quad	0
lstpo: 	.quad	0
lstsn: 	.quad	0
mxlen: 	.quad	0
noxeq: 	.quad	0
pfdmp: 	.quad	0
pffnc: 	.quad	0
pfstm: 	.quad	+0
pfetm: 	.quad	+0
pfnte: 	.quad	0
pfste: 	.quad	+0
pmdfl: 	.quad	0
pmhbs: 	.quad	0
pmssl: 	.quad	0
polcs: 	.quad	1
polct: 	.quad	1
prich: 	.quad	0
prstd: 	.quad	0
prsto: 	.quad	0
prbuf: 	.quad	0
precl: 	.quad	0
prlen: 	.quad	0
prlnw: 	.quad	0
profs: 	.quad	0
prtef: 	.quad	0
rdcln: 	.quad	0
rdnln: 	.quad	0
rsmem: 	.quad	0
stmcs: 	.quad	1
stmct: 	.quad	1
a_aaa: 	.quad	0
cmpss: 	.quad	0
dnamb: 	.quad	0
dnamp: 	.quad	0
dname: 	.quad	0
hshtb: 	.quad	0
hshte: 	.quad	0
iniss: 	.quad	0
pftbl: 	.quad	0
prnmv: 	.quad	0
statb: 	.quad	0
state: 	.quad	0
stxvr: 	.quad	nulls
r_aaa: 	.quad	0
r_arf: 	.quad	0
r_ccb: 	.quad	0
r_cim: 	.quad	0
r_cmp: 	.quad	0
r_cni: 	.quad	0
r_cnt: 	.quad	0
r_cod: 	.quad	0
r_ctp: 	.quad	0
r_cts: 	.quad	0
r_ert: 	.quad	0
r_etx: 	.quad	nulls
r_exs: 	.quad	0
r_fcb: 	.quad	0
r_fnc: 	.quad	0
r_gtc: 	.quad	0
r_ici: 	.quad	0
r_ifa: 	.quad	0
r_ifl: 	.quad	0
r_ifn: 	.quad	0
r_inc: 	.quad	0
r_io1: 	.quad	0
r_io2: 	.quad	0
r_iof: 	.quad	0
r_ion: 	.quad	0
r_iop: 	.quad	0
r_iot: 	.quad	0
r_pms: 	.quad	0
r_ra2: 	.quad	0
r_ra3: 	.quad	0
r_rpt: 	.quad	0
r_scp: 	.quad	0
r_sfc: 	.quad	nulls
r_sfn: 	.quad	0
r_sxl: 	.quad	0
r_sxr: 	.quad	0
r_stc: 	.quad	0
r_stl: 	.quad	0
r_sxc: 	.quad	0
r_ttl: 	.quad	nulls
r_xsc: 	.quad	0
r_uba: 	.quad	stndo
r_ubm: 	.quad	stndo
r_ubn: 	.quad	stndo
r_ubp: 	.quad	stndo
r_ubt: 	.quad	stndo
r_uub: 	.quad	stndo
r_uue: 	.quad	stndo
r_uun: 	.quad	stndo
r_uup: 	.quad	stndo
r_uus: 	.quad	stndo
r_uux: 	.quad	stndo
r_yyy: 	.quad	0
scnbl: 	.quad	0
scncc: 	.quad	0
scngo: 	.quad	0
scnil: 	.quad	0
scnpt: 	.quad	0
scnrs: 	.quad	0
scnse: 	.quad	0
scntp: 	.quad	0
stage: 	.quad	0
stbas: 	.quad	0
stxoc: 	.quad	0
stxof: 	.quad	0
timsx: 	.quad	+0
timup: 	.quad	0
xsofs: 	.quad	0
w_yyy: 	.quad	0
       	.global	esec04
esec04:
       	.global	end_min_data
end_min_data:
       	.text
       	.global	sec05
sec05:
	.align	2
	.byte	bl__i
s_aaa:
relaj:
       	pushq	%rdi
       	pushq	%rcx
       	movq	%rsi,rlals(%rip)
       	movq	%rbx,%rdi
rlaj0:
       	movq	rlals(%rip),%rsi
       	cmpq	(%rsp),%rdi
       	jne 	rlaj1
       	popq	%rcx
       	popq	%rdi
       	ret
rlaj1:
       	movq	(%rdi),%rcx
       	movq	$5,%rbx
rlaj2:
       	cmpq	0(%rsi),%rcx
       	ja  	rlaj3
       	cmpq	16(%rsi),%rcx
       	jb  	rlaj3
       	addq	8(%rsi),%rcx
       	movq	%rcx,(%rdi)
       	jmp 	rlaj4
rlaj3:
       	addq	$24,%rsi
       	decq	%rbx
       	jnz 	rlaj2
rlaj4:
       	addq	$8,%rdi
       	jmp 	rlaj0
relcr:
       	addq	$120,%rsi
       	subq	$8,%rsi
       	movq	%rcx,(%rsi)
       	.data
r_0001:	.quad	s_aaa
       	.text
       	movq	r_0001(%rip),%rcx
       	subq	(%rsi),%rcx
       	subq	$8,%rsi
       	movq	%rcx,(%rsi)
       	.data
r_0002:	.quad	s_yyy
       	.text
       	movq	r_0002(%rip),%rcx
       	subq	r_0001(%rip),%rcx
       	addq	8(%rsi),%rcx
       	subq	$8,%rsi
       	movq	%rcx,(%rsi)
       	subq	$8,%rsi
       	movq	%rbx,(%rsi)
       	.data
r_0003:	.quad	c_aaa
       	.text
       	movq	r_0003(%rip),%rbx
       	.data
r_0004:	.quad	c_yyy
       	.text
       	movq	r_0004(%rip),%rcx
       	subq	%rbx,%rcx
       	subq	(%rsi),%rbx
       	subq	$8,%rsi
       	movq	%rbx,(%rsi)
       	addq	8(%rsi),%rcx
       	subq	$8,%rsi
       	movq	%rcx,(%rsi)
       	subq	$8,%rsi
       	movq	%rdx,(%rsi)
       	.data
r_0005:	.quad	g_aaa
       	.text
       	movq	r_0005(%rip),%rdx
       	.data
r_0006:	.quad	w_yyy
       	.text
       	movq	r_0006(%rip),%rcx
       	subq	%rdx,%rcx
       	subq	(%rsi),%rdx
       	subq	$8,%rsi
       	movq	%rdx,(%rsi)
       	addq	8(%rsi),%rcx
       	subq	$8,%rsi
       	movq	%rcx,(%rsi)
       	movq	statb(%rip),%rbx
       	subq	$8,%rsi
       	movq	%rbx,(%rsi)
       	subq	%rbx,%rdi
       	subq	$8,%rsi
       	movq	%rdi,(%rsi)
       	subq	$8,%rsi
       	movq	state(%rip),%rax
       	movq	%rax,(%rsi)
       	movq	dnamb(%rip),%rbx
       	subq	$8,%rsi
       	movq	%rbx,(%rsi)
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rcx
       	subq	%rbx,%rcx
       	subq	$8,%rsi
       	movq	%rcx,(%rsi)
       	movq	dnamp(%rip),%rdx
       	subq	$8,%rsi
       	movq	%rdx,(%rsi)
       	ret
reldn:
       	movq	104(%rsi),%rax
       	movq	%rax,rldcd(%rip)
       	movq	32(%rsi),%rax
       	movq	%rax,rldst(%rip)
       	movq	%rsi,rldls(%rip)
rld01:
       	movq	rldcd(%rip),%rax
       	addq	%rax,(%rdi)
       	movq	(%rdi),%rsi
       	movq	%rsi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rsi
       	.data
r_0007:	.quad	l_0001
       	.text
       	movq	r_0007(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0001:
       	.quad	rld03
       	.quad	rld07
       	.quad	rld10
       	.quad	rld05
       	.quad	rld13
       	.quad	rld13
       	.quad	rld14
       	.quad	rld14
       	.quad	rld05
       	.quad	rld05
       	.quad	rld13
       	.quad	rld17
       	.quad	rld17
       	.quad	rld05
       	.quad	rld20
       	.quad	rld05
       	.quad	rld15
       	.quad	rld19
       	.quad	rld05
       	.quad	rld05
       	.quad	rld05
       	.quad	rld05
       	.quad	rld05
       	.quad	rld08
       	.quad	rld09
       	.quad	rld11
       	.quad	rld13
       	.quad	rld16
       	.quad	rld18
       	.text
rld03:
       	movq	16(%rdi),%rcx
       	movq	24(%rdi),%rbx
rld04:
       	addq	%rdi,%rcx
       	addq	%rdi,%rbx
       	movq	rldls(%rip),%rsi
       	call	relaj
rld05:
       	movq	(%rdi),%rcx
       	call	blkln
       	addq	%rcx,%rdi
       	cmpq	%rdx,%rdi
       	jb  	rld01
       	movq	rldls(%rip),%rsi
       	ret
rld07:
       	movq	24(%rdi),%rcx
       	movq	$32,%rbx
       	.data
r_0008:	.quad	b_cdc
       	.text
       	movq	r_0008(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	rld04
       	movq	$40,%rbx
       	jmp 	rld04
rld08:
       	movq	$48,%rcx
       	movq	$32,%rbx
       	jmp 	rld04
rld09:
       	movq	$24,%rcx
       	movq	$8,%rbx
       	jmp 	rld04
rld10:
       	movq	24(%rdi),%rcx
       	movq	$32,%rbx
       	jmp 	rld04
rld11:
       	cmpq	$24,32(%rdi)
       	jne 	rld12
       	pushq	%rdi
       	movq	16(%rdi),%rdi
       	addq	rldst(%rip),%rdi
       	movq	rldcd(%rip),%rax
       	addq	%rax,(%rdi)
       	movq	16(%rdi),%rcx
       	movq	$32,%rbx
       	addq	%rdi,%rcx
       	addq	%rdi,%rbx
       	movq	rldls(%rip),%rsi
       	call	relaj
       	movq	32(%rdi),%rdi
       	movq	rldcd(%rip),%rax
       	addq	%rax,(%rdi)
       	popq	%rdi
rld12:
       	movq	$32,%rcx
       	movq	$16,%rbx
       	jmp 	rld04
rld13:
       	movq	$16,%rcx
       	movq	$8,%rbx
       	jmp 	rld04
rld14:
       	movq	$24,%rcx
       	movq	$8,%rbx
       	jmp 	rld04
rld15:
       	movq	16(%rdi),%rsi
       	addq	rldst(%rip),%rsi
       	movq	24(%rsi),%rcx
       	movq	$16,%rbx
       	jmp 	rld04
rld16:
       	movq	rldst(%rip),%rax
       	addq	%rax,24(%rdi)
       	movq	16(%rdi),%rcx
       	movq	$40,%rbx
       	jmp 	rld04
rld17:
       	movq	16(%rdi),%rcx
       	movq	$24,%rbx
       	jmp 	rld04
rld18:
       	movq	$32,%rcx
       	movq	$8,%rbx
       	jmp 	rld04
rld19:
       	movq	$40,%rcx
       	movq	$16,%rbx
       	jmp 	rld04
rld20:
       	movq	8(%rdi),%rcx
       	movq	$16,%rbx
       	jmp 	rld04
reloc:
       	movq	16(%rsi),%rdi
       	movq	0(%rsi),%rdx
       	addq	8(%rsi),%rdi
       	addq	8(%rsi),%rdx
       	call	reldn
       	call	relws
       	call	relst
       	ret
relst:
       	movq	pftbl(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	rls01
       	movq	104(%rsi),%rax
       	addq	%rax,(%rdi)
rls01:
       	movq	hshtb(%rip),%rdx
       	movq	%rdx,%rbx
       	movq	hshte(%rip),%rcx
       	call	relaj
rls02:
       	cmpq	hshte(%rip),%rdx
       	je  	rls05
       	movq	%rdx,%rdi
       	addq	$8,%rdx
       	subq	$48,%rdi
rls03:
       	movq	48(%rdi),%rdi
       	orq 	%rdi,%rdi
       	jz  	rls02
       	movq	$56,%rcx
       	movq	$0,%rbx
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	rls04
       	movq	$72,%rcx
rls04:
       	addq	%rdi,%rcx
       	addq	%rdi,%rbx
       	call	relaj
       	jmp 	rls03
rls05:
       	ret
relws:
       	.data
r_0009:	.quad	a_aaa
       	.text
       	movq	r_0009(%rip),%rbx
       	.data
r_0010:	.quad	r_yyy
       	.text
       	movq	r_0010(%rip),%rcx
       	call	relaj
       	movq	8(%rsi),%rax
       	addq	%rax,dname(%rip)
       	.data
r_0011:	.quad	kvrtn
       	.text
       	movq	r_0011(%rip),%rbx
       	movq	%rbx,%rcx
       	addq	$8,%rcx
       	call	relaj
       	ret
start:
       	movq	%rbx,mxint(%rip)
       	movq	%rbx,bitsm(%rip)
       	xorq	%rbx,%rbx
       	movq	%rcx,%rsp
       	call	systm
       	movq	%r12,timsx(%rip)
       	movq	%rdi,statb(%rip)
       	movq	$800,rsmem(%rip)
       	movq	%rsp,stbas(%rip)
       	movq	intvh(%rip),%r12
       	movq	alfsp(%rip),%rax
       	call	M_dvi
       	movq	%r12,alfsf(%rip)
       	movq	intvh(%rip),%r12
       	movq	gbsdp(%rip),%rax
       	call	M_dvi
       	movq	%r12,gbsed(%rip)
       	movq	$9,%rbx
       	movq	reav1(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
ini03:
       	movq	reavt(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	decq	%rbx
       	jnz 	ini03
       	movq	reg_ra(%rip),%rax
       	movq	%rax,gtssc(%rip)
       	movq	reap5(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	gtssc(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_dvr
       	movq	reg_ra(%rip),%rax
       	movq	%rax,gtsrn(%rip)
       	xorq	%rdx,%rdx
       	call	prpar
       	subq	$800,%rsi
       	movq	prlen(%rip),%rcx
       	addq	$256,%rcx
       	addq	$17,%rcx
       	addq	$71,%rcx
       	andq	$-8,%rcx
       	movq	statb(%rip),%rdi
       	addq	%rcx,%rdi
       	addq	$2056,%rdi
       	addq	$8000,%rdi
       	call	sysmx
       	movq	%rcx,kvmxl(%rip)
       	movq	%rcx,mxlen(%rip)
       	cmpq	%rcx,%rdi
       	ja  	ini06
       	addq	$15,%rcx
       	andq	$-8,%rcx
       	movq	%rcx,%rdi
ini06:
       	movq	%rdi,dnamb(%rip)
       	movq	%rdi,dnamp(%rip)
       	orq 	%rcx,%rcx
       	jnz 	ini07
       	subq	$8,%rdi
       	movq	%rdi,kvmxl(%rip)
       	movq	%rdi,mxlen(%rip)
ini07:
       	movq	%rsi,dname(%rip)
       	cmpq	%rsi,dnamb(%rip)
       	jb  	ini09
       	call	sysmm
       	salq	$3,%rdi
       	addq	%rdi,%rsi
       	orq 	%rdi,%rdi
       	jnz 	ini07
       	movq	$329,%rcx
       	xorq	%rbx,%rbx
       	xorq	%rdx,%rdx
       	movq	$0,%rdi
       	.data
r_0012:	.quad	nulls
       	.text
       	movq	r_0012(%rip),%rsi
       	call	sysea
       	decq	_rc_(%rip)
       	js  	call_1
       	decq	_rc_(%rip)
       	jns 	l_0002
       	jmp 	ini08
l_0002:
call_1:
       	jmp 	ini08
       	movq	$329,_rc_(%rip)
       	jmp 	err_
ini08:
       	.data
r_0013:	.quad	endmo
       	.text
       	movq	r_0013(%rip),%rdi
       	movq	endml(%rip),%rcx
       	call	syspr
       	decq	_rc_(%rip)
       	js  	call_2
       	decq	_rc_(%rip)
       	jns 	l_0003
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0003:
call_2:
       	xorq	%rsi,%rsi
       	movq	$10,%rbx
       	call	sysej
ini09:
       	movq	statb(%rip),%rdi
       	call	insta
       	movq	$257,%rcx
       	movq	%rcx,%r12
       	movq	%r12,hshnb(%rip)
       	movq	%rdi,hshtb(%rip)
ini11:
       	xorq	%rax,%rax
       	stosq
       	decq	%rcx
       	jnz 	ini11
       	movq	%rdi,hshte(%rip)
       	movq	%rdi,state(%rip)
       	movq	$1,%rdx
       	movq	r_0012(%rip),%rsi
       	movq	%rsi,r_sfc(%rip)
       	call	tmake
       	movq	%rdi,r_sfn(%rip)
       	movq	$1,%rdx
       	movq	r_0012(%rip),%rsi
       	call	tmake
       	movq	%rdi,r_inc(%rip)
       	movq	$9,%rcx
       	movq	r_0012(%rip),%rsi
       	call	vmake
       	decq	_rc_(%rip)
       	js  	call_3
       	decq	_rc_(%rip)
       	jns 	l_0004
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0004:
call_3:
       	movq	%rdi,r_ifa(%rip)
       	movq	$9,%rcx
       	.data
r_0014:	.quad	inton
       	.text
       	movq	r_0014(%rip),%rsi
       	call	vmake
       	decq	_rc_(%rip)
       	js  	call_4
       	decq	_rc_(%rip)
       	jns 	l_0005
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0005:
call_4:
       	movq	%rdi,r_ifl(%rip)
       	.data
r_0015:	.quad	v_inp
       	.text
       	movq	r_0015(%rip),%rsi
       	movq	$0,%rbx
       	call	inout
       	.data
r_0016:	.quad	v_oup
       	.text
       	movq	r_0016(%rip),%rsi
       	movq	$3,%rbx
       	call	inout
       	movq	initr(%rip),%rdx
       	orq 	%rdx,%rdx
       	jz  	ini13
       	call	prpar
ini13:
       	call	sysdc
       	movq	%rsp,flptr(%rip)
       	call	cmpil
       	movq	%rdi,r_cod(%rip)
       	movq	r_0012(%rip),%rax
       	movq	%rax,r_ttl(%rip)
       	movq	r_0012(%rip),%rax
       	movq	%rax,r_stl(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_cim(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	xorq	%rax,%rax
       	movq	%rax,cnind(%rip)
       	xorq	%rax,%rax
       	movq	%rax,lstid(%rip)
       	xorq	%rsi,%rsi
       	xorq	%rbx,%rbx
       	xorq	%rax,%rax
       	movq	%rax,dnams(%rip)
       	call	gbcol
       	movq	%rdi,dnams(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,cpsts(%rip)
       	jnz 	inix0
       	call	prtpg
       	call	prtmm
       	movq	cmerc(%rip),%r12
       	.data
r_0017:	.quad	encm3
       	.text
       	movq	r_0017(%rip),%rdi
       	call	prtmi
       	movq	gbcnt(%rip),%r12
       	subq	intv1(%rip),%r12
       	seto	reg_fl(%rip)
       	.data
r_0018:	.quad	stpm5
       	.text
       	movq	r_0018(%rip),%rdi
       	call	prtmi
       	call	systm
       	subq	timsx(%rip),%r12
       	seto	reg_fl(%rip)
       	.data
r_0019:	.quad	encm4
       	.text
       	movq	r_0019(%rip),%rdi
       	call	prtmi
       	addq	$5,lstlc(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,headp(%rip)
       	jz  	inix0
       	call	prtpg
inix0:
       	cmpq	$1024,cswin(%rip)
       	ja  	inix1
       	movq	$1024,cswin(%rip)
inix1:
       	call	systm
       	movq	%r12,timsx(%rip)
       	xorq	%rax,%rax
       	movq	%rax,gbcnt(%rip)
       	call	sysbx
       	movq	cswex(%rip),%rax
       	addq	%rax,noxeq(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,noxeq(%rip)
       	jnz 	inix2
iniy0:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,headp(%rip)
       	xorq	%rax,%rax
       	pushq	%rax
       	movq	%rsp,flptr(%rip)
       	movq	r_cod(%rip),%rdi
       	movq	$3,stage(%rip)
       	movq	$1,polcs(%rip)
       	movq	$1,polct(%rip)
       	movq	cmpsn(%rip),%rax
       	movq	%rax,pfnte(%rip)
       	movq	kvpfl(%rip),%rax
       	movq	%rax,pfdmp(%rip)
       	call	systm
       	movq	%r12,pfstm(%rip)
       	call	stgcc
       	jmp 	*(%rdi)
inix2:
       	xorq	%rcx,%rcx
       	movq	$999,%rbx
       	xorq	%rsi,%rsi
       	call	sysej
rstrt:
       	movq	stbas(%rip),%rsp
       	xorq	%rsi,%rsi
       	jmp 	iniy0
	.align	2
	nop
o_add:
       	call	arith
       	decq	_rc_(%rip)
       	js  	call_5
       	decq	_rc_(%rip)
       	jns 	l_0006
       	movq	$1,_rc_(%rip)
       	jmp 	err_
l_0006:
       	decq	_rc_(%rip)
       	jns 	l_0007
       	movq	$2,_rc_(%rip)
       	jmp 	err_
l_0007:
       	decq	_rc_(%rip)
       	jns 	l_0008
       	jmp 	oadd1
l_0008:
call_5:
       	addq	8(%rsi),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jno 	exint
       	movq	$3,_rc_(%rip)
       	jmp 	err_
oadd1:
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_adr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
       	movq	$261,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_aff:
       	popq	%rdi
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_6
       	decq	_rc_(%rip)
       	jns 	l_0009
       	movq	$4,_rc_(%rip)
       	jmp 	err_
l_0009:
call_6:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_alt:
       	popq	%rdi
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_7
       	decq	_rc_(%rip)
       	jns 	l_0010
       	movq	$5,_rc_(%rip)
       	jmp 	err_
l_0010:
call_7:
oalt1:
       	.data
r_0020:	.quad	p_alt
       	.text
       	movq	r_0020(%rip),%rbx
       	call	pbild
       	movq	%rdi,%rsi
       	popq	%rdi
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_8
       	decq	_rc_(%rip)
       	jns 	l_0011
       	movq	$6,_rc_(%rip)
       	jmp 	err_
l_0011:
call_8:
       	cmpq	r_0020(%rip),%rdi
       	je  	oalt2
       	movq	%rdi,8(%rsi)
       	pushq	%rsi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
oalt2:
       	movq	16(%rdi),%rax
       	movq	%rax,8(%rsi)
       	pushq	8(%rdi)
       	movq	%rsi,%rdi
       	jmp 	oalt1
	.align	2
	nop
o_amn:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	movq	%rdi,%rbx
       	jmp 	arref
	.align	2
	nop
o_amv:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	xorq	%rbx,%rbx
       	jmp 	arref
	.align	2
	nop
o_aon:
       	movq	(%rsp),%rdi
       	movq	8(%rsp),%rsi
       	movq	(%rsi),%rcx
       	.data
r_0021:	.quad	b_vct
       	.text
       	cmpq	r_0021(%rip),%rcx
       	je  	oaon2
       	.data
r_0022:	.quad	b_tbt
       	.text
       	cmpq	r_0022(%rip),%rcx
       	je  	oaon3
oaon1:
       	movq	$1,%rdi
       	movq	%rdi,%rbx
       	jmp 	arref
oaon2:
       	.data
r_0023:	.quad	b_icl
       	.text
       	movq	r_0023(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	oaon1
       	movq	8(%rdi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	exfal
       	movq	%r12,%rcx
       	orq 	%rcx,%rcx
       	jz  	exfal
       	addq	$2,%rcx
       	salq	$3,%rcx
       	movq	%rcx,(%rsp)
       	cmpq	16(%rsi),%rcx
       	jb  	oaon4
       	jmp 	exfal
oaon3:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_9
       	decq	_rc_(%rip)
       	jns 	l_0012
       	jmp 	exfal
l_0012:
call_9:
       	movq	%rsi,8(%rsp)
       	movq	%rcx,(%rsp)
oaon4:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_aov:
       	popq	%rdi
       	popq	%rsi
       	movq	(%rsi),%rcx
       	cmpq	r_0021(%rip),%rcx
       	je  	oaov2
       	cmpq	r_0022(%rip),%rcx
       	je  	oaov3
oaov1:
       	pushq	%rsi
       	pushq	%rdi
       	movq	$1,%rdi
       	xorq	%rbx,%rbx
       	jmp 	arref
oaov2:
       	movq	r_0023(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	oaov1
       	movq	8(%rdi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	exfal
       	movq	%r12,%rcx
       	orq 	%rcx,%rcx
       	jz  	exfal
       	addq	$2,%rcx
       	salq	$3,%rcx
       	cmpq	16(%rsi),%rcx
       	jae 	exfal
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_10
       	decq	_rc_(%rip)
       	jns 	l_0013
       	jmp 	exfal
l_0013:
call_10:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
oaov3:
       	xorq	%rbx,%rbx
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_11
       	decq	_rc_(%rip)
       	jns 	l_0014
       	jmp 	exfal
l_0014:
call_11:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_ass:
oass0:
       	popq	%rbx
       	popq	%rcx
       	movq	(%rsp),%rsi
       	movq	%rbx,(%rsp)
       	call	asign
       	decq	_rc_(%rip)
       	js  	call_12
       	decq	_rc_(%rip)
       	jns 	l_0015
       	jmp 	exfal
l_0015:
call_12:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_cer:
       	movq	$7,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_cas:
       	popq	%rdx
       	popq	%rdi
       	.data
r_0024:	.quad	p_cas
       	.text
       	movq	r_0024(%rip),%rbx
       	call	pbild
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_cnc:
       	movq	(%rsp),%rdi
       	cmpq	r_0012(%rip),%rdi
       	je  	ocnc3
       	movq	8(%rsp),%rsi
       	cmpq	r_0012(%rip),%rsi
       	je  	ocnc4
       	.data
r_0025:	.quad	b_scl
       	.text
       	movq	r_0025(%rip),%rcx
       	cmpq	(%rsi),%rcx
       	jne 	ocnc2
       	cmpq	(%rdi),%rcx
       	jne 	ocnc2
ocnc1:
       	movq	8(%rsi),%rcx
       	addq	8(%rdi),%rcx
       	call	alocs
       	movq	%rdi,8(%rsp)
       	addq	$16,%rdi
       	movq	8(%rsi),%rcx
       	addq	$16,%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	popq	%rsi
       	movq	8(%rsi),%rcx
       	addq	$16,%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	xorq	%rsi,%rsi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
ocnc2:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_13
       	decq	_rc_(%rip)
       	jns 	l_0016
       	jmp 	ocnc5
l_0016:
call_13:
       	movq	%rdi,%rsi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_14
       	decq	_rc_(%rip)
       	jns 	l_0017
       	jmp 	ocnc6
l_0017:
call_14:
       	pushq	%rdi
       	pushq	%rsi
       	movq	%rdi,%rsi
       	movq	(%rsp),%rdi
       	jmp 	ocnc1
ocnc3:
       	addq	$8,%rsp
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
ocnc4:
       	addq	$8,%rsp
       	movq	%rdi,(%rsp)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
ocnc5:
       	movq	%rdi,%rsi
       	popq	%rdi
ocnc6:
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_15
       	decq	_rc_(%rip)
       	jns 	l_0018
       	movq	$8,_rc_(%rip)
       	jmp 	err_
l_0018:
call_15:
       	pushq	%rdi
       	movq	%rsi,%rdi
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_16
       	decq	_rc_(%rip)
       	jns 	l_0019
       	movq	$9,_rc_(%rip)
       	jmp 	err_
l_0019:
call_16:
       	movq	%rdi,%rsi
       	popq	%rdi
       	call	pconc
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_com:
       	popq	%rdi
       	movq	(%rdi),%rcx
ocom1:
       	cmpq	r_0023(%rip),%rcx
       	je  	ocom2
       	.data
r_0026:	.quad	b_rcl
       	.text
       	cmpq	r_0026(%rip),%rcx
       	je  	ocom3
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_17
       	decq	_rc_(%rip)
       	jns 	l_0020
       	movq	$10,_rc_(%rip)
       	jmp 	err_
l_0020:
call_17:
       	jmp 	ocom1
ocom2:
       	movq	8(%rdi),%r12
       	negq	%r12
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jno 	exint
       	movq	$11,_rc_(%rip)
       	jmp 	err_
ocom3:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_ngr
       	jmp 	exrea
	.align	2
	nop
o_dvd:
       	call	arith
       	decq	_rc_(%rip)
       	js  	call_18
       	decq	_rc_(%rip)
       	jns 	l_0021
       	movq	$12,_rc_(%rip)
       	jmp 	err_
l_0021:
       	decq	_rc_(%rip)
       	jns 	l_0022
       	movq	$13,_rc_(%rip)
       	jmp 	err_
l_0022:
       	decq	_rc_(%rip)
       	jns 	l_0023
       	jmp 	odvd2
l_0023:
call_18:
       	movq	8(%rsi),%rax
       	call	M_dvi
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jno 	exint
       	movq	$14,_rc_(%rip)
       	jmp 	err_
odvd2:
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_dvr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
       	movq	$262,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_exp:
       	popq	%rdi
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_19
       	decq	_rc_(%rip)
       	jns 	l_0024
       	movq	$15,_rc_(%rip)
       	jmp 	err_
l_0024:
call_19:
       	movq	%rdi,%rsi
       	popq	%rdi
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_20
       	decq	_rc_(%rip)
       	jns 	l_0025
       	movq	$16,_rc_(%rip)
       	jmp 	err_
l_0025:
call_20:
       	movq	r_0026(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	oexp7
       	movq	8(%rsi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	oex12
       	cmpq	r_0026(%rip),%rcx
       	je  	oexp3
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	oexp2
       	movq	%r12,%rcx
       	movq	8(%rdi),%r12
       	orq 	%rcx,%rcx
       	jnz 	oexp1
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	je  	oexp4
       	movq	intv1(%rip),%r12
       	jmp 	exint
oex13:
       	imulq	8(%rdi),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	oexp2
oexp1:
       	decq	%rcx
       	jnz 	oex13
       	jmp 	exint
oexp2:
       	movq	$17,_rc_(%rip)
       	jmp 	err_
oexp3:
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	oexp6
       	movq	%r12,%rcx
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	orq 	%rcx,%rcx
       	jnz 	oexp5
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	oexp4
       	movq	reav1(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	jmp 	exrea
oexp4:
       	movq	$18,_rc_(%rip)
       	jmp 	err_
oex14:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	oexp6
oexp5:
       	decq	%rcx
       	jnz 	oex14
       	jmp 	exrea
oexp6:
       	movq	$266,_rc_(%rip)
       	jmp 	err_
oexp7:
       	movq	r_0026(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	oexp8
       	movq	8(%rdi),%r12
       	movq	%r12,reg_ia(%rip)
       	call	M_itr
       	call	rcbld
oexp8:
       	xorq	%rbx,%rbx
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	oexp9
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	oexp4
       	movq	reav0(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	jmp 	exrea
oexp9:
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jg  	oex10
       	call	M_ngr
       	call	rcbld
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_chp
       	movq	%r12,reg_ia(%rip)
       	call	M_rti
       	movq	reg_ia(%rip),%r12
       	jc  	oexp6
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	oex11
       	movq	%r12,%rbx
       	andq	bits1(%rip),%rbx
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
oex10:
       	call	M_lnf
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	oexp6
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	oexp6
       	call	M_etx
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	oexp6
       	orq 	%rbx,%rbx
       	jz  	exrea
       	call	M_ngr
       	jmp 	exrea
oex11:
       	movq	$311,_rc_(%rip)
       	jmp 	err_
oex12:
       	pushq	%rdi
       	movq	%r12,reg_ia(%rip)
       	call	M_itr
       	call	rcbld
       	movq	%rdi,%rsi
       	popq	%rdi
       	jmp 	oexp7
	.align	2
	nop
o_fex:
       	jmp 	evlx6
	.align	2
	nop
o_fif:
       	movq	$20,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_fnc:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	movq	40(%rdi),%rsi
       	cmpq	8(%rsi),%rcx
       	jne 	cfunc
       	jmp 	*(%rsi)
	.align	2
	nop
o_fne:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	.data
r_0027:	.quad	ornm_
       	.text
       	cmpq	r_0027(%rip),%rcx
       	jne 	ofne1
       	xorq	%rax,%rax
       	cmpq	%rax,16(%rsp)
       	jz  	evlx3
ofne1:
       	movq	$21,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_fns:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	movq	$1,%rcx
       	movq	40(%rdi),%rsi
       	cmpq	8(%rsi),%rcx
       	jne 	cfunc
       	jmp 	*(%rsi)
	.align	2
	nop
o_fun:
       	movq	$22,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_goc:
       	movq	8(%rsp),%rdi
       	cmpq	state(%rip),%rdi
       	ja  	ogoc1
       	addq	$24,%rdi
       	jmp 	*(%rdi)
ogoc1:
       	movq	$23,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_god:
       	movq	(%rsp),%rdi
       	movq	(%rdi),%rcx
       	.data
r_0028:	.quad	b_cds
       	.text
       	cmpq	r_0028(%rip),%rcx
       	je  	bcds0
       	cmpq	r_0008(%rip),%rcx
       	je  	bcdc0
       	movq	$24,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_gof:
       	movq	flptr(%rip),%rdi
       	addq	$8,(%rdi)
       	movq	reg_cp(%rip),%rax
       	addq	$8,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_ima:
       	.data
r_0029:	.quad	p_imc
       	.text
       	movq	r_0029(%rip),%rbx
       	popq	%rdx
       	popq	%rdi
       	call	pbild
       	movq	%rdi,%rsi
       	movq	(%rsp),%rdi
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_21
       	decq	_rc_(%rip)
       	jns 	l_0026
       	movq	$25,_rc_(%rip)
       	jmp 	err_
l_0026:
call_21:
       	movq	%rdi,(%rsp)
       	.data
r_0030:	.quad	p_ima
       	.text
       	movq	r_0030(%rip),%rbx
       	call	pbild
       	popq	8(%rdi)
       	call	pconc
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_inn:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	jmp 	indir
	.align	2
	nop
o_int:
       	movq	r_0012(%rip),%rax
       	movq	%rax,(%rsp)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_inv:
       	xorq	%rbx,%rbx
       	jmp 	indir
	.align	2
	nop
o_kwn:
       	call	kwnam
       	jmp 	exnam
	.align	2
	nop
o_kwv:
       	call	kwnam
       	movq	%rdi,dnamp(%rip)
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_22
       	decq	_rc_(%rip)
       	jns 	l_0027
       	jmp 	exnul
l_0027:
call_22:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_lex:
       	movq	$24,%rcx
       	call	alloc
       	.data
r_0031:	.quad	b_evt
       	.text
       	movq	r_0031(%rip),%rax
       	movq	%rax,(%rdi)
       	.data
r_0032:	.quad	trbev
       	.text
       	movq	r_0032(%rip),%rax
       	movq	%rax,16(%rdi)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	movq	%rcx,8(%rdi)
       	movq	%rdi,%rsi
       	movq	$16,%rcx
       	jmp 	exnam
	.align	2
	nop
o_lpt:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_lvn:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	pushq	%rcx
       	pushq	$16
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_mlt:
       	call	arith
       	decq	_rc_(%rip)
       	js  	call_23
       	decq	_rc_(%rip)
       	jns 	l_0028
       	movq	$26,_rc_(%rip)
       	jmp 	err_
l_0028:
       	decq	_rc_(%rip)
       	jns 	l_0029
       	movq	$27,_rc_(%rip)
       	jmp 	err_
l_0029:
       	decq	_rc_(%rip)
       	jns 	l_0030
       	jmp 	omlt1
l_0030:
call_23:
       	imulq	8(%rsi),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jno 	exint
       	movq	$28,_rc_(%rip)
       	jmp 	err_
omlt1:
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
       	movq	$263,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_nam:
       	movq	$24,%rcx
       	call	alloc
       	.data
r_0033:	.quad	b_nml
       	.text
       	movq	r_0033(%rip),%rax
       	movq	%rax,(%rdi)
       	popq	16(%rdi)
       	popq	8(%rdi)
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_nta:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	pushq	flptr(%rip)
       	pushq	%rcx
       	movq	%rsp,flptr(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_ntb:
       	movq	16(%rsp),%rax
       	movq	%rax,flptr(%rip)
       	jmp 	exfal
	.align	2
	nop
o_ntc:
       	addq	$8,%rsp
       	popq	flptr(%rip)
       	jmp 	exnul
	.align	2
	nop
o_oun:
       	movq	$29,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_pas:
       	.data
r_0034:	.quad	p_pac
       	.text
       	movq	r_0034(%rip),%rbx
       	popq	%rdx
       	popq	%rdi
       	call	pbild
       	movq	%rdi,%rsi
       	movq	(%rsp),%rdi
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_24
       	decq	_rc_(%rip)
       	jns 	l_0031
       	movq	$30,_rc_(%rip)
       	jmp 	err_
l_0031:
call_24:
       	movq	%rdi,(%rsp)
       	.data
r_0035:	.quad	p_paa
       	.text
       	movq	r_0035(%rip),%rbx
       	call	pbild
       	popq	8(%rdi)
       	call	pconc
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_pmn:
       	xorq	%rbx,%rbx
       	jmp 	match
	.align	2
	nop
o_pms:
       	movq	$2,%rbx
       	jmp 	match
	.align	2
	nop
o_pmv:
       	movq	$1,%rbx
       	jmp 	match
	.align	2
	nop
o_pop:
       	addq	$8,%rsp
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_stp:
       	jmp 	lend0
	.align	2
	nop
o_rnm:
       	jmp 	evlx4
	.align	2
	nop
o_rpl:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_25
       	decq	_rc_(%rip)
       	jns 	l_0032
       	movq	$31,_rc_(%rip)
       	jmp 	err_
l_0032:
call_25:
       	movq	(%rsp),%rsi
       	addq	8(%rsi),%rcx
       	addq	16(%rsp),%rcx
       	subq	8(%rsp),%rcx
       	orq 	%rcx,%rcx
       	jz  	orpl3
       	pushq	%rdi
       	call	alocs
       	movq	24(%rsp),%rcx
       	movq	%rdi,24(%rsp)
       	addq	$16,%rdi
       	orq 	%rcx,%rcx
       	jz  	orpl1
       	movq	8(%rsp),%rsi
       	addq	$16,%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
orpl1:
       	popq	%rsi
       	movq	8(%rsi),%rcx
       	orq 	%rcx,%rcx
       	jz  	orpl2
       	addq	$16,%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
orpl2:
       	popq	%rsi
       	popq	%rdx
       	movq	8(%rsi),%rcx
       	subq	%rdx,%rcx
       	orq 	%rcx,%rcx
       	jz  	oass0
       	leaq	16(%rsi,%rdx),%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	jmp 	oass0
orpl3:
       	addq	$16,%rsp
       	movq	r_0012(%rip),%rax
       	movq	%rax,(%rsp)
       	jmp 	oass0
	.align	2
	nop
o_rvl:
       	jmp 	evlx3
	.align	2
	nop
o_sla:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	pushq	flptr(%rip)
       	pushq	%rcx
       	movq	%rsp,flptr(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_slb:
       	popq	%rdi
       	addq	$8,%rsp
       	movq	(%rsp),%rax
       	movq	%rax,flptr(%rip)
       	movq	%rdi,(%rsp)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	addq	r_cod(%rip),%rcx
       	movq	%rcx,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_slc:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	movq	%rcx,(%rsp)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_sld:
       	addq	$8,%rsp
       	popq	flptr(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
o_sub:
       	call	arith
       	decq	_rc_(%rip)
       	js  	call_26
       	decq	_rc_(%rip)
       	jns 	l_0033
       	movq	$32,_rc_(%rip)
       	jmp 	err_
l_0033:
       	decq	_rc_(%rip)
       	jns 	l_0034
       	movq	$33,_rc_(%rip)
       	jmp 	err_
l_0034:
       	decq	_rc_(%rip)
       	jns 	l_0035
       	jmp 	osub1
l_0035:
call_26:
       	subq	8(%rsi),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jno 	exint
       	movq	$34,_rc_(%rip)
       	jmp 	err_
osub1:
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
       	movq	$264,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
o_txr:
       	jmp 	trxq1
	.align	2
	nop
o_unf:
       	movq	$35,_rc_(%rip)
       	jmp 	err_
	.align	2
	.byte	bl__i
b_aaa:
	.align	2
	.byte	bl_ex
b_exl:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_se
b_sel:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl__i
b_e__:
	.align	2
	.byte	bl_tr
b_trt:
	.align	2
	.byte	bl__i
b_t__:
	.align	2
	.byte	bl_ar
b_art:
	.align	2
	.byte	bl_bc
b_bct:
	.align	2
	.byte	bl_bf
b_bft:
	.align	2
	.byte	bl_cc
b_cct:
	.align	2
	.byte	bl_cd
b_cdc:
bcdc0:
       	movq	flptr(%rip),%rsp
       	movq	32(%rdi),%rax
       	movq	%rax,(%rsp)
       	jmp 	stmgo
	.align	2
	.byte	bl_cd
b_cds:
bcds0:
       	movq	flptr(%rip),%rsp
       	movq	$32,(%rsp)
       	jmp 	stmgo
	.align	2
	.byte	bl_cm
b_cmt:
	.align	2
	.byte	bl_ct
b_ctt:
	.align	2
	.byte	bl_df
b_dfc:
       	movq	24(%rsi),%rcx
       	call	alloc
       	.data
r_0036:	.quad	b_pdt
       	.text
       	movq	r_0036(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rsi,16(%rdi)
       	movq	%rdi,%rdx
       	addq	%rcx,%rdi
       	movq	8(%rsi),%rcx
bdfc1:
       	subq	$8,%rdi
       	popq	(%rdi)
       	decq	%rcx
       	jnz 	bdfc1
       	movq	%rdx,%rdi
       	jmp 	exsid
	.align	2
	.byte	bl_ef
b_efc:
       	movq	8(%rsi),%rdx
       	salq	$3,%rdx
       	pushq	%rsi
       	movq	%rsp,%rsi
befc1:
       	addq	$8,%rsi
       	movq	(%rsp),%rdi
       	subq	$8,%rdx
       	addq	%rdx,%rdi
       	movq	56(%rdi),%rdi
       	.data
r_0037:	.quad	l_0036
       	.text
       	movq	r_0037(%rip),%rax
       	salq	$3,%rdi
       	addq	%rdi,%rax
       	jmp 	*(%rax)
       	.data
l_0036:
       	.quad	befc7
       	.quad	befc2
       	.quad	befc3
       	.quad	befc4
       	.quad	beff1
       	.text
beff1:
       	pushq	%rsi
       	movq	%rdx,befof(%rip)
       	pushq	(%rsi)
       	call	iofcb
       	decq	_rc_(%rip)
       	js  	call_27
       	decq	_rc_(%rip)
       	jns 	l_0037
       	movq	$298,_rc_(%rip)
       	jmp 	err_
l_0037:
       	decq	_rc_(%rip)
       	jns 	l_0038
       	movq	$298,_rc_(%rip)
       	jmp 	err_
l_0038:
       	decq	_rc_(%rip)
       	jns 	l_0039
       	movq	$298,_rc_(%rip)
       	jmp 	err_
l_0039:
call_27:
       	movq	%rcx,%rdi
       	popq	%rsi
       	jmp 	befc5
befc2:
       	pushq	(%rsi)
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_28
       	decq	_rc_(%rip)
       	jns 	l_0040
       	movq	$39,_rc_(%rip)
       	jmp 	err_
l_0040:
call_28:
       	jmp 	befc6
befc3:
       	movq	(%rsi),%rdi
       	movq	%rdx,befof(%rip)
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_29
       	decq	_rc_(%rip)
       	jns 	l_0041
       	movq	$40,_rc_(%rip)
       	jmp 	err_
l_0041:
call_29:
       	jmp 	befc5
befc4:
       	movq	(%rsi),%rdi
       	movq	%rdx,befof(%rip)
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_30
       	decq	_rc_(%rip)
       	jns 	l_0042
       	movq	$265,_rc_(%rip)
       	jmp 	err_
l_0042:
call_30:
befc5:
       	movq	befof(%rip),%rdx
befc6:
       	movq	%rdi,(%rsi)
befc7:
       	orq 	%rdx,%rdx
       	jnz 	befc1
       	popq	%rsi
       	movq	8(%rsi),%rcx
       	call	sysex
       	decq	_rc_(%rip)
       	js  	call_31
       	decq	_rc_(%rip)
       	jns 	l_0043
       	jmp 	exfal
l_0043:
       	decq	_rc_(%rip)
       	jns 	l_0044
       	movq	$327,_rc_(%rip)
       	jmp 	err_
l_0044:
       	decq	_rc_(%rip)
       	jns 	l_0045
       	movq	$326,_rc_(%rip)
       	jmp 	err_
l_0045:
call_31:
       	salq	$3,%rcx
       	addq	%rcx,%rsp
       	movq	48(%rsi),%rbx
       	orq 	%rbx,%rbx
       	jnz 	befa8
       	movq	r_0025(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	befc8
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rdi)
       	jz  	exnul
befa8:
       	cmpq	$1,%rbx
       	jne 	befc8
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rdi)
       	jz  	exnul
befc8:
       	cmpq	dnamb(%rip),%rdi
       	jb  	befc9
       	cmpq	dnamp(%rip),%rdi
       	jbe 	exixr
befc9:
       	movq	(%rdi),%rcx
       	orq 	%rbx,%rbx
       	jz  	bef11
       	movq	r_0025(%rip),%rcx
       	cmpq	$1,%rbx
       	je  	bef10
       	movq	r_0023(%rip),%rcx
       	cmpq	$2,%rbx
       	je  	bef10
       	movq	r_0026(%rip),%rcx
bef10:
       	movq	%rcx,(%rdi)
bef11:
       	movq	r_0025(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	bef12
       	call	blkln
       	movq	%rdi,%rsi
       	call	alloc
       	pushq	%rdi
       	shrq	$3,%rcx
       	rep 	movsq
       	xorq	%rsi,%rsi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
bef12:
       	movq	%rdi,%rsi
       	movq	8(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jz  	exnul
       	call	alocs
       	pushq	%rdi
       	addq	$16,%rdi
       	addq	$16,%rsi
       	movq	%rdx,%rcx
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	xorq	%rsi,%rsi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_ev
b_evt:
	.align	2
	.byte	bl_ff
b_ffc:
       	movq	%rsi,%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdx
       	addq	$8,reg_cp(%rip)
       	movq	(%rsp),%rsi
       	movq	r_0036(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	bffc2
       	movq	16(%rsi),%rcx
bffc1:
       	cmpq	16(%rdi),%rcx
       	je  	bffc3
       	movq	24(%rdi),%rdi
       	orq 	%rdi,%rdi
       	jnz 	bffc1
bffc2:
       	movq	$41,_rc_(%rip)
       	jmp 	err_
bffc3:
       	movq	32(%rdi),%rcx
       	.data
r_0038:	.quad	ofne_
       	.text
       	cmpq	r_0038(%rip),%rdx
       	je  	bffc5
       	addq	%rcx,%rsi
       	movq	(%rsi),%rdi
       	.data
r_0039:	.quad	b_trt
       	.text
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	bffc4
       	subq	%rcx,%rsi
       	movq	%rdx,(%rsp)
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_32
       	decq	_rc_(%rip)
       	jns 	l_0046
       	jmp 	exfal
l_0046:
call_32:
       	movq	(%rsp),%rdx
bffc4:
       	movq	%rdi,(%rsp)
       	movq	%rdx,%rdi
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
bffc5:
       	pushq	%rcx
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_ic
b_icl:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_kv
b_kvt:
	.align	2
	.byte	bl_nm
b_nml:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_pd
b_pdt:
	.align	2
	.byte	bl_pf
b_pfc:
       	movq	%rsi,bpfpf(%rip)
       	movq	%rsi,%rdi
       	movq	24(%rdi),%rsi
bpf01:
       	movq	%rsi,%rbx
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	bpf01
       	movq	%rsi,bpfsv(%rip)
       	movq	%rbx,%rsi
       	movq	r_0012(%rip),%rax
       	movq	%rax,16(%rsi)
       	movq	8(%rdi),%rcx
       	addq	$64,%rdi
       	orq 	%rcx,%rcx
       	jz  	bpf04
       	movq	%rsp,%rsi
       	salq	$3,%rcx
       	addq	%rcx,%rsi
       	movq	%rsi,bpfxt(%rip)
bpf02:
       	movq	(%rdi),%rsi
       	addq	$8,%rdi
bpf03:
       	movq	%rsi,%rdx
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	bpf03
       	movq	%rsi,%rcx
       	movq	bpfxt(%rip),%rsi
       	subq	$8,%rsi
       	movq	(%rsi),%rbx
       	movq	%rcx,(%rsi)
       	movq	%rsi,bpfxt(%rip)
       	movq	%rdx,%rsi
       	movq	%rbx,16(%rsi)
       	cmpq	bpfxt(%rip),%rsp
       	jne 	bpf02
bpf04:
       	movq	bpfpf(%rip),%rsi
       	movq	32(%rsi),%rcx
       	orq 	%rcx,%rcx
       	jz  	bpf07
       	movq	r_0012(%rip),%rbx
bpf05:
       	movq	(%rdi),%rsi
       	addq	$8,%rdi
bpf06:
       	movq	%rsi,%rdx
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	bpf06
       	pushq	%rsi
       	movq	%rdx,%rsi
       	movq	%rbx,16(%rsi)
       	decq	%rcx
       	jnz 	bpf05
bpf07:
       	xorq	%rdi,%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,kvpfl(%rip)
       	jz  	bpf7c
       	cmpq	$2,kvpfl(%rip)
       	je  	bpf7a
       	call	systm
       	movq	%r12,pfetm(%rip)
       	subq	pfstm(%rip),%r12
       	seto	reg_fl(%rip)
       	call	icbld
       	movq	pfetm(%rip),%r12
       	jmp 	bpf7b
bpf7a:
       	movq	pfstm(%rip),%r12
       	call	icbld
       	call	systm
bpf7b:
       	movq	%r12,pfstm(%rip)
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,pffnc(%rip)
bpf7c:
       	pushq	%rdi
       	movq	r_cod(%rip),%rcx
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rbx
       	subq	%rcx,%rbx
       	movq	bpfpf(%rip),%rsi
       	pushq	bpfsv(%rip)
       	pushq	%rcx
       	pushq	%rbx
       	pushq	flprt(%rip)
       	pushq	flptr(%rip)
       	pushq	%rsi
       	xorq	%rax,%rax
       	pushq	%rax
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	movq	%rsp,flptr(%rip)
       	movq	%rsp,flprt(%rip)
       	movq	kvtra(%rip),%rcx
       	addq	kvftr(%rip),%rcx
       	orq 	%rcx,%rcx
       	jnz 	bpf09
       	incq	kvfnc(%rip)
bpf08:
       	movq	40(%rsi),%rdi
       	movq	32(%rdi),%rdi
       	.data
r_0040:	.quad	stndl
       	.text
       	cmpq	r_0040(%rip),%rdi
       	je  	bpf17
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	bpf8a
       	movq	16(%rdi),%rdi
bpf8a:
       	jmp 	*(%rdi)
bpf09:
       	movq	48(%rsi),%rdi
       	movq	24(%rsi),%rsi
       	movq	$16,%rcx
       	xorq	%rax,%rax
       	cmpq	%rax,kvtra(%rip)
       	jz  	bpf10
       	orq 	%rdi,%rdi
       	jz  	bpf10
       	decq	kvtra(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,32(%rdi)
       	jz  	bpf11
       	call	trxeq
bpf10:
       	xorq	%rax,%rax
       	cmpq	%rax,kvftr(%rip)
       	jz  	bpf16
       	decq	kvftr(%rip)
bpf11:
       	call	prtsn
       	call	prtnm
       	movq	$40,%rcx
       	call	prtch
       	movq	8(%rsp),%rsi
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rsi)
       	jz  	bpf15
       	xorq	%rbx,%rbx
       	jmp 	bpf13
bpf12:
       	movq	$44,%rcx
       	call	prtch
bpf13:
       	movq	%rbx,(%rsp)
       	salq	$3,%rbx
       	addq	%rbx,%rsi
       	movq	64(%rsi),%rdi
       	subq	%rbx,%rsi
       	movq	16(%rdi),%rdi
       	call	prtvl
       	movq	(%rsp),%rbx
       	incq	%rbx
       	cmpq	8(%rsi),%rbx
       	jb  	bpf12
bpf15:
       	movq	$41,%rcx
       	call	prtch
       	call	prtnl
bpf16:
       	incq	kvfnc(%rip)
       	movq	r_fnc(%rip),%rsi
       	call	ktrex
       	movq	8(%rsp),%rsi
       	jmp 	bpf08
bpf17:
       	movq	16(%rsp),%rax
       	movq	%rax,flptr(%rip)
       	movq	$286,_rc_(%rip)
       	jmp 	err_
	.align	2
	.byte	bl_rc
b_rcl:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_sc
b_scl:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_tb
b_tbt:
	.align	2
	.byte	bl_te
b_tet:
	.align	2
	.byte	bl_vc
b_vct:
	.align	2
	.byte	bl__i
b_vr_:
	.align	2
	.byte	bl__i
b_vra:
       	movq	%rdi,%rsi
       	movq	$16,%rcx
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_33
       	decq	_rc_(%rip)
       	jns 	l_0047
       	jmp 	exfal
l_0047:
call_33:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
b_vre:
       	movq	$42,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
b_vrg:
       	movq	8(%rdi),%rdi
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
	.align	2
	nop
b_vrl:
       	pushq	16(%rdi)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
b_vrs:
       	movq	(%rsp),%rax
       	movq	%rax,8(%rdi)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
b_vrt:
       	subq	$24,%rdi
       	movq	%rdi,%rsi
       	movq	$16,%rcx
       	movq	32(%rsi),%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,kvtra(%rip)
       	jz  	bvrt2
       	decq	kvtra(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,32(%rdi)
       	jz  	bvrt1
       	call	trxeq
       	jmp 	bvrt2
bvrt1:
       	call	prtsn
       	movq	%rsi,%rdi
       	movq	$58,%rcx
       	call	prtch
       	movq	$40,%rcx
       	call	prtch
       	call	prtvn
       	movq	$41,%rcx
       	call	prtch
       	call	prtnl
       	movq	32(%rsi),%rdi
bvrt2:
       	movq	16(%rdi),%rdi
       	jmp 	*(%rdi)
	.align	2
	nop
b_vrv:
       	movq	(%rsp),%rbx
       	subq	$8,%rdi
       	movq	%rdi,%rsi
       	movq	$16,%rcx
       	call	asign
       	decq	_rc_(%rip)
       	js  	call_34
       	decq	_rc_(%rip)
       	jns 	l_0048
       	jmp 	exfal
l_0048:
call_34:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_xn
b_xnt:
	.align	2
	.byte	bl_xr
b_xrt:
	.align	2
	.byte	bl__i
b_yyy:
	.align	2
	.byte	bl__i
p_aaa:
	.align	2
	.byte	bl_p0
p_aba:
       	pushq	%rbx
       	pushq	%rdi
       	pushq	pmhbs(%rip)
       	.data
r_0041:	.quad	ndabb
       	.text
       	pushq	r_0041(%rip)
       	movq	%rsp,pmhbs(%rip)
       	jmp 	succp
	.align	2
	nop
p_abb:
       	movq	%rbx,pmhbs(%rip)
       	jmp 	flpop
	.align	2
	.byte	bl_p0
p_abc:
       	movq	pmhbs(%rip),%rsi
       	movq	24(%rsi),%rcx
       	movq	8(%rsi),%rax
       	movq	%rax,pmhbs(%rip)
       	cmpq	%rsp,%rsi
       	je  	pabc1
       	pushq	%rsi
       	.data
r_0042:	.quad	ndabd
       	.text
       	pushq	r_0042(%rip)
       	jmp 	pabc2
pabc1:
       	addq	$32,%rsp
pabc2:
       	cmpq	%rbx,%rcx
       	jne 	succp
       	movq	8(%rdi),%rdi
       	jmp 	succp
	.align	2
	nop
p_abd:
       	movq	%rbx,pmhbs(%rip)
       	jmp 	failp
	.align	2
	.byte	bl_p0
p_abo:
       	jmp 	exfal
	.align	2
	.byte	bl_p1
p_alt:
       	pushq	%rbx
       	pushq	16(%rdi)
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_ans:
       	cmpq	pmssl(%rip),%rbx
       	je  	failp
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	cmpq	16(%rdi),%rcx
       	jne 	failp
       	incq	%rbx
       	jmp 	succp
	.align	2
	.byte	bl_p2
p_any:
pany1:
       	cmpq	pmssl(%rip),%rbx
       	je  	failp
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	movq	16(%rdi),%rsi
       	salq	$3,%rcx
       	addq	%rcx,%rsi
       	movq	8(%rsi),%rcx
       	andq	24(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jz  	failp
       	incq	%rbx
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_ayd:
       	call	evals
       	decq	_rc_(%rip)
       	js  	call_35
       	decq	_rc_(%rip)
       	jns 	l_0049
       	movq	$43,_rc_(%rip)
       	jmp 	err_
l_0049:
       	decq	_rc_(%rip)
       	jns 	l_0050
       	jmp 	failp
l_0050:
       	decq	_rc_(%rip)
       	jns 	l_0051
       	jmp 	pany1
l_0051:
call_35:
	.align	2
	.byte	bl_p0
p_arb:
       	movq	8(%rdi),%rdi
       	pushq	%rbx
       	pushq	%rdi
       	pushq	%rbx
       	.data
r_0043:	.quad	ndarc
       	.text
       	pushq	r_0043(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
p_arc:
       	cmpq	pmssl(%rip),%rbx
       	je  	flpop
       	incq	%rbx
       	pushq	%rbx
       	pushq	%rdi
       	movq	16(%rsp),%rdi
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_p0
p_bal:
       	xorq	%rdx,%rdx
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	jmp 	pbal2
pbal1:
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	incq	%rsi
       	incq	%rbx
       	cmpq	$40,%rcx
       	je  	pbal3
       	cmpq	$41,%rcx
       	je  	pbal4
       	orq 	%rdx,%rdx
       	jz  	pbal5
pbal2:
       	cmpq	pmssl(%rip),%rbx
       	jne 	pbal1
       	jmp 	failp
pbal3:
       	incq	%rdx
       	jmp 	pbal2
pbal4:
       	orq 	%rdx,%rdx
       	jz  	failp
       	decq	%rdx
       	orq 	%rdx,%rdx
       	jnz 	pbal2
pbal5:
       	pushq	%rbx
       	pushq	%rdi
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_bkd:
       	call	evals
       	decq	_rc_(%rip)
       	js  	call_36
       	decq	_rc_(%rip)
       	jns 	l_0052
       	movq	$44,_rc_(%rip)
       	jmp 	err_
l_0052:
       	decq	_rc_(%rip)
       	jns 	l_0053
       	jmp 	failp
l_0053:
       	decq	_rc_(%rip)
       	jns 	l_0054
       	jmp 	pbrk1
l_0054:
call_36:
	.align	2
	.byte	bl_p1
p_bks:
       	movq	pmssl(%rip),%rdx
       	subq	%rbx,%rdx
       	orq 	%rdx,%rdx
       	jz  	failp
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
pbks1:
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	incq	%rsi
       	cmpq	16(%rdi),%rcx
       	je  	succp
       	incq	%rbx
       	decq	%rdx
       	jnz 	pbks1
       	jmp 	failp
	.align	2
	.byte	bl_p2
p_brk:
pbrk1:
       	movq	pmssl(%rip),%rdx
       	subq	%rbx,%rdx
       	orq 	%rdx,%rdx
       	jz  	failp
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	movq	%rdi,psave(%rip)
pbrk2:
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	incq	%rsi
       	movq	16(%rdi),%rdi
       	salq	$3,%rcx
       	addq	%rcx,%rdi
       	movq	8(%rdi),%rcx
       	movq	psave(%rip),%rdi
       	andq	24(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jnz 	succp
       	incq	%rbx
       	decq	%rdx
       	jnz 	pbrk2
       	jmp 	failp
	.align	2
	.byte	bl_p0
p_bkx:
       	incq	%rbx
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_bxd:
       	call	evals
       	decq	_rc_(%rip)
       	js  	call_37
       	decq	_rc_(%rip)
       	jns 	l_0055
       	movq	$45,_rc_(%rip)
       	jmp 	err_
l_0055:
       	decq	_rc_(%rip)
       	jns 	l_0056
       	jmp 	failp
l_0056:
       	decq	_rc_(%rip)
       	jns 	l_0057
       	jmp 	pbrk1
l_0057:
call_37:
	.align	2
	.byte	bl_p2
p_cas:
       	pushq	%rdi
       	pushq	%rbx
       	movq	16(%rdi),%rsi
       	movq	%rbx,%r12
       	movq	24(%rdi),%rbx
       	call	icbld
       	movq	%rbx,%rcx
       	movq	%rdi,%rbx
       	call	asinp
       	decq	_rc_(%rip)
       	js  	call_38
       	decq	_rc_(%rip)
       	jns 	l_0058
       	jmp 	flpop
l_0058:
call_38:
       	popq	%rbx
       	popq	%rdi
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_exa:
       	call	evalp
       	decq	_rc_(%rip)
       	js  	call_39
       	decq	_rc_(%rip)
       	jns 	l_0059
       	jmp 	failp
l_0059:
call_39:
       	.data
r_0044:	.quad	p_aaa
       	.text
       	cmpq	r_0044(%rip),%rcx
       	jb  	pexa1
       	pushq	%rbx
       	pushq	%rdi
       	pushq	pmhbs(%rip)
       	.data
r_0045:	.quad	ndexb
       	.text
       	pushq	r_0045(%rip)
       	movq	%rsp,pmhbs(%rip)
       	movq	%rsi,%rdi
       	jmp 	*(%rdi)
pexa1:
       	cmpq	r_0025(%rip),%rcx
       	je  	pexa2
       	pushq	%rsi
       	movq	%rdi,%rsi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_40
       	decq	_rc_(%rip)
       	jns 	l_0060
       	movq	$46,_rc_(%rip)
       	jmp 	err_
l_0060:
call_40:
       	movq	%rdi,%rdx
       	movq	%rsi,%rdi
       	movq	%rdx,%rsi
pexa2:
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rsi)
       	jz  	succp
       	jmp 	pstr1
	.align	2
	nop
p_exb:
       	movq	%rbx,pmhbs(%rip)
       	jmp 	flpop
	.align	2
	nop
p_exc:
       	movq	%rbx,pmhbs(%rip)
       	jmp 	failp
	.align	2
	.byte	bl_p0
p_fal:
       	jmp 	failp
	.align	2
	.byte	bl_p0
p_fen:
       	pushq	%rbx
       	.data
r_0046:	.quad	ndabo
       	.text
       	pushq	r_0046(%rip)
       	jmp 	succp
	.align	2
	.byte	bl_p0
p_fna:
       	pushq	pmhbs(%rip)
       	.data
r_0047:	.quad	ndfnb
       	.text
       	pushq	r_0047(%rip)
       	movq	%rsp,pmhbs(%rip)
       	jmp 	succp
	.align	2
	.byte	bl_p0
p_fnb:
       	movq	%rbx,pmhbs(%rip)
       	jmp 	failp
	.align	2
	.byte	bl_p0
p_fnc:
       	movq	pmhbs(%rip),%rsi
       	movq	8(%rsi),%rax
       	movq	%rax,pmhbs(%rip)
       	cmpq	%rsp,%rsi
       	je  	pfnc1
       	pushq	%rsi
       	.data
r_0048:	.quad	ndfnd
       	.text
       	pushq	r_0048(%rip)
       	jmp 	succp
pfnc1:
       	addq	$16,%rsp
       	jmp 	succp
	.align	2
	.byte	bl_p0
p_fnd:
       	movq	%rbx,%rsp
       	jmp 	flpop
	.align	2
	.byte	bl_p0
p_ima:
       	pushq	%rbx
       	pushq	%rdi
       	pushq	pmhbs(%rip)
       	.data
r_0049:	.quad	ndimb
       	.text
       	pushq	r_0049(%rip)
       	movq	%rsp,pmhbs(%rip)
       	jmp 	succp
	.align	2
	nop
p_imb:
       	movq	%rbx,pmhbs(%rip)
       	jmp 	flpop
	.align	2
	.byte	bl_p2
p_imc:
       	movq	pmhbs(%rip),%rsi
       	movq	%rbx,%rcx
       	movq	24(%rsi),%rbx
       	movq	8(%rsi),%rax
       	movq	%rax,pmhbs(%rip)
       	cmpq	%rsp,%rsi
       	je  	pimc1
       	pushq	%rsi
       	.data
r_0050:	.quad	ndimd
       	.text
       	pushq	r_0050(%rip)
       	jmp 	pimc2
pimc1:
       	addq	$32,%rsp
pimc2:
       	pushq	%rcx
       	pushq	%rdi
       	movq	r_pms(%rip),%rsi
       	subq	%rbx,%rcx
       	call	sbstr
       	movq	%rdi,%rbx
       	movq	(%rsp),%rdi
       	movq	16(%rdi),%rsi
       	movq	24(%rdi),%rcx
       	call	asinp
       	decq	_rc_(%rip)
       	js  	call_41
       	decq	_rc_(%rip)
       	jns 	l_0061
       	jmp 	flpop
l_0061:
call_41:
       	popq	%rdi
       	popq	%rbx
       	jmp 	succp
	.align	2
	nop
p_imd:
       	movq	%rbx,pmhbs(%rip)
       	jmp 	failp
	.align	2
	.byte	bl_p1
p_len:
plen1:
       	addq	16(%rdi),%rbx
       	cmpq	pmssl(%rip),%rbx
       	jbe 	succp
       	jmp 	failp
	.align	2
	.byte	bl_p1
p_lnd:
       	call	evali
       	decq	_rc_(%rip)
       	js  	call_42
       	decq	_rc_(%rip)
       	jns 	l_0062
       	movq	$47,_rc_(%rip)
       	jmp 	err_
l_0062:
       	decq	_rc_(%rip)
       	jns 	l_0063
       	movq	$48,_rc_(%rip)
       	jmp 	err_
l_0063:
       	decq	_rc_(%rip)
       	jns 	l_0064
       	jmp 	failp
l_0064:
       	decq	_rc_(%rip)
       	jns 	l_0065
       	jmp 	plen1
l_0065:
call_42:
	.align	2
	.byte	bl_p1
p_nad:
       	call	evals
       	decq	_rc_(%rip)
       	js  	call_43
       	decq	_rc_(%rip)
       	jns 	l_0066
       	movq	$49,_rc_(%rip)
       	jmp 	err_
l_0066:
       	decq	_rc_(%rip)
       	jns 	l_0067
       	jmp 	failp
l_0067:
       	decq	_rc_(%rip)
       	jns 	l_0068
       	jmp 	pnay1
l_0068:
call_43:
	.align	2
	.byte	bl_p1
p_nas:
       	cmpq	pmssl(%rip),%rbx
       	je  	failp
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	cmpq	16(%rdi),%rcx
       	je  	failp
       	incq	%rbx
       	jmp 	succp
	.align	2
	.byte	bl_p2
p_nay:
pnay1:
       	cmpq	pmssl(%rip),%rbx
       	je  	failp
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	salq	$3,%rcx
       	movq	16(%rdi),%rsi
       	addq	%rcx,%rsi
       	movq	8(%rsi),%rcx
       	andq	24(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jnz 	failp
       	incq	%rbx
       	jmp 	succp
	.align	2
	.byte	bl_p0
p_nth:
       	movq	pmhbs(%rip),%rsi
       	movq	8(%rsi),%rcx
       	cmpq	$2,%rcx
       	jbe 	pnth2
       	movq	%rcx,pmhbs(%rip)
       	movq	16(%rsi),%rdi
       	cmpq	%rsp,%rsi
       	je  	pnth1
       	pushq	%rsi
       	.data
r_0051:	.quad	ndexc
       	.text
       	pushq	r_0051(%rip)
       	jmp 	succp
pnth1:
       	addq	$32,%rsp
       	jmp 	succp
pnth2:
       	movq	%rbx,pmssl(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,pmdfl(%rip)
       	jz  	pnth6
pnth3:
       	subq	$8,%rsi
       	subq	$8,%rsi
       	movq	(%rsi),%rcx
       	.data
r_0052:	.quad	ndpad
       	.text
       	cmpq	r_0052(%rip),%rcx
       	je  	pnth4
       	.data
r_0053:	.quad	ndpab
       	.text
       	cmpq	r_0053(%rip),%rcx
       	jne 	pnth5
       	pushq	8(%rsi)
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	jmp 	pnth3
pnth4:
       	movq	8(%rsi),%rcx
       	movq	(%rsp),%rbx
       	movq	%rsi,(%rsp)
       	subq	%rbx,%rcx
       	movq	r_pms(%rip),%rsi
       	call	sbstr
       	movq	%rdi,%rbx
       	movq	(%rsp),%rsi
       	movq	16(%rsi),%rsi
       	movq	24(%rsi),%rcx
       	movq	16(%rsi),%rsi
       	call	asinp
       	decq	_rc_(%rip)
       	js  	call_44
       	decq	_rc_(%rip)
       	jns 	l_0069
       	jmp 	exfal
l_0069:
call_44:
       	popq	%rsi
pnth5:
       	cmpq	%rsp,%rsi
       	jne 	pnth3
pnth6:
       	movq	pmhbs(%rip),%rsp
       	popq	%rbx
       	popq	%rdx
       	movq	pmssl(%rip),%rcx
       	movq	r_pms(%rip),%rsi
       	xorq	%rax,%rax
       	movq	%rax,r_pms(%rip)
       	orq 	%rdx,%rdx
       	jz  	pnth7
       	cmpq	$2,%rdx
       	je  	pnth9
       	subq	%rbx,%rcx
       	call	sbstr
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
pnth7:
       	pushq	%rbx
       	pushq	%rcx
pnth8:
       	pushq	%rsi
pnth9:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl_p1
p_pos:
       	cmpq	16(%rdi),%rbx
       	je  	succp
       	orq 	%rbx,%rbx
       	jnz 	failp
       	movq	pmhbs(%rip),%rsi
       	subq	$8,%rsi
       	cmpq	(%rsi),%rdi
       	jne 	failp
ppos2:
       	subq	$8,%rsi
       	.data
r_0054:	.quad	nduna
       	.text
       	movq	r_0054(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	failp
       	movq	16(%rdi),%rbx
       	cmpq	pmssl(%rip),%rbx
       	ja  	exfal
       	movq	%rbx,16(%rsi)
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_psd:
       	call	evali
       	decq	_rc_(%rip)
       	js  	call_45
       	decq	_rc_(%rip)
       	jns 	l_0070
       	movq	$50,_rc_(%rip)
       	jmp 	err_
l_0070:
       	decq	_rc_(%rip)
       	jns 	l_0071
       	movq	$51,_rc_(%rip)
       	jmp 	err_
l_0071:
       	decq	_rc_(%rip)
       	jns 	l_0072
       	jmp 	failp
l_0072:
       	decq	_rc_(%rip)
       	jns 	l_0073
       	jmp 	ppos1
l_0073:
call_45:
ppos1:
       	cmpq	16(%rdi),%rbx
       	je  	succp
       	orq 	%rbx,%rbx
       	jnz 	failp
       	xorq	%rax,%rax
       	cmpq	%rax,evlif(%rip)
       	jnz 	failp
       	movq	pmhbs(%rip),%rsi
       	movq	evlio(%rip),%rcx
       	subq	$8,%rsi
       	cmpq	(%rsi),%rcx
       	jne 	failp
       	jmp 	ppos2
	.align	2
	.byte	bl_p0
p_paa:
       	pushq	%rbx
       	pushq	r_0053(%rip)
       	jmp 	succp
	.align	2
	nop
p_pab:
       	jmp 	failp
	.align	2
	.byte	bl_p2
p_pac:
       	pushq	%rbx
       	pushq	%rdi
       	pushq	%rbx
       	pushq	r_0052(%rip)
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,pmdfl(%rip)
       	jmp 	succp
	.align	2
	nop
p_pad:
       	jmp 	flpop
	.align	2
	.byte	bl_p0
p_rem:
       	movq	pmssl(%rip),%rbx
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_rpd:
       	call	evali
       	decq	_rc_(%rip)
       	js  	call_46
       	decq	_rc_(%rip)
       	jns 	l_0074
       	movq	$52,_rc_(%rip)
       	jmp 	err_
l_0074:
       	decq	_rc_(%rip)
       	jns 	l_0075
       	movq	$53,_rc_(%rip)
       	jmp 	err_
l_0075:
       	decq	_rc_(%rip)
       	jns 	l_0076
       	jmp 	failp
l_0076:
       	decq	_rc_(%rip)
       	jns 	l_0077
       	jmp 	prps1
l_0077:
call_46:
prps1:
       	movq	pmssl(%rip),%rdx
       	subq	%rbx,%rdx
       	cmpq	16(%rdi),%rdx
       	je  	succp
       	orq 	%rbx,%rbx
       	jnz 	failp
       	xorq	%rax,%rax
       	cmpq	%rax,evlif(%rip)
       	jnz 	failp
       	movq	pmhbs(%rip),%rsi
       	movq	evlio(%rip),%rcx
       	subq	$8,%rsi
       	cmpq	(%rsi),%rcx
       	jne 	failp
       	jmp 	prps2
	.align	2
	.byte	bl_p1
p_rps:
       	movq	pmssl(%rip),%rdx
       	subq	%rbx,%rdx
       	cmpq	16(%rdi),%rdx
       	je  	succp
       	orq 	%rbx,%rbx
       	jnz 	failp
       	movq	pmhbs(%rip),%rsi
       	subq	$8,%rsi
       	cmpq	(%rsi),%rdi
       	jne 	failp
prps2:
       	subq	$8,%rsi
       	movq	r_0054(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	failp
       	movq	pmssl(%rip),%rbx
       	cmpq	16(%rdi),%rbx
       	jb  	failp
       	subq	16(%rdi),%rbx
       	movq	%rbx,16(%rsi)
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_rtb:
prtb1:
       	movq	%rbx,%rdx
       	movq	pmssl(%rip),%rbx
       	cmpq	16(%rdi),%rbx
       	jb  	failp
       	subq	16(%rdi),%rbx
       	cmpq	%rdx,%rbx
       	jae 	succp
       	jmp 	failp
	.align	2
	.byte	bl_p1
p_rtd:
       	call	evali
       	decq	_rc_(%rip)
       	js  	call_47
       	decq	_rc_(%rip)
       	jns 	l_0078
       	movq	$54,_rc_(%rip)
       	jmp 	err_
l_0078:
       	decq	_rc_(%rip)
       	jns 	l_0079
       	movq	$55,_rc_(%rip)
       	jmp 	err_
l_0079:
       	decq	_rc_(%rip)
       	jns 	l_0080
       	jmp 	failp
l_0080:
       	decq	_rc_(%rip)
       	jns 	l_0081
       	jmp 	prtb1
l_0081:
call_47:
	.align	2
	.byte	bl_p1
p_spd:
       	call	evals
       	decq	_rc_(%rip)
       	js  	call_48
       	decq	_rc_(%rip)
       	jns 	l_0082
       	movq	$56,_rc_(%rip)
       	jmp 	err_
l_0082:
       	decq	_rc_(%rip)
       	jns 	l_0083
       	jmp 	failp
l_0083:
       	decq	_rc_(%rip)
       	jns 	l_0084
       	jmp 	pspn1
l_0084:
call_48:
	.align	2
	.byte	bl_p2
p_spn:
pspn1:
       	movq	pmssl(%rip),%rdx
       	subq	%rbx,%rdx
       	orq 	%rdx,%rdx
       	jz  	failp
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	movq	%rbx,psavc(%rip)
       	movq	%rdi,psave(%rip)
pspn2:
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	incq	%rsi
       	salq	$3,%rcx
       	movq	16(%rdi),%rdi
       	addq	%rcx,%rdi
       	movq	8(%rdi),%rcx
       	movq	psave(%rip),%rdi
       	andq	24(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jz  	pspn3
       	incq	%rbx
       	decq	%rdx
       	jnz 	pspn2
pspn3:
       	cmpq	psavc(%rip),%rbx
       	jne 	succp
       	jmp 	failp
	.align	2
	.byte	bl_p1
p_sps:
       	movq	pmssl(%rip),%rdx
       	subq	%rbx,%rdx
       	orq 	%rdx,%rdx
       	jz  	failp
       	movq	r_pms(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	movq	%rbx,psavc(%rip)
psps1:
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	incq	%rsi
       	cmpq	16(%rdi),%rcx
       	jne 	psps2
       	incq	%rbx
       	decq	%rdx
       	jnz 	psps1
psps2:
       	cmpq	psavc(%rip),%rbx
       	jne 	succp
       	jmp 	failp
	.align	2
	.byte	bl_p1
p_str:
       	movq	16(%rdi),%rsi
pstr1:
       	movq	%rdi,psave(%rip)
       	movq	r_pms(%rip),%rdi
       	leaq	16(%rdi,%rbx),%rdi
       	addq	8(%rsi),%rbx
       	cmpq	pmssl(%rip),%rbx
       	ja  	failp
       	movq	%rbx,psavc(%rip)
       	movq	8(%rsi),%rcx
       	addq	$16,%rsi
       	repe	cmpsb
       	movq	$0,%rsi
       	movq	%rsi,%rdi
       	jnz 	failp
       	movq	psave(%rip),%rdi
       	movq	psavc(%rip),%rbx
       	jmp 	succp
	.align	2
	.byte	bl_p0
p_suc:
       	pushq	%rbx
       	pushq	%rdi
       	jmp 	succp
	.align	2
	.byte	bl_p1
p_tab:
ptab1:
       	cmpq	16(%rdi),%rbx
       	ja  	failp
       	movq	16(%rdi),%rbx
       	cmpq	pmssl(%rip),%rbx
       	jbe 	succp
       	jmp 	failp
	.align	2
	.byte	bl_p1
p_tbd:
       	call	evali
       	decq	_rc_(%rip)
       	js  	call_49
       	decq	_rc_(%rip)
       	jns 	l_0085
       	movq	$57,_rc_(%rip)
       	jmp 	err_
l_0085:
       	decq	_rc_(%rip)
       	jns 	l_0086
       	movq	$58,_rc_(%rip)
       	jmp 	err_
l_0086:
       	decq	_rc_(%rip)
       	jns 	l_0087
       	jmp 	failp
l_0087:
       	decq	_rc_(%rip)
       	jns 	l_0088
       	jmp 	ptab1
l_0088:
call_49:
	.align	2
	nop
p_una:
       	movq	%rbx,%rdi
       	movq	(%rsp),%rbx
       	cmpq	pmssl(%rip),%rbx
       	je  	exfal
       	incq	%rbx
       	movq	%rbx,(%rsp)
       	pushq	%rdi
       	pushq	r_0054(%rip)
       	jmp 	*(%rdi)
	.align	2
	.byte	bl__i
p_yyy:
	.align	2
	nop
l_abo:
labo1:
       	movq	kvert(%rip),%rcx
       	orq 	%rcx,%rcx
       	jz  	labo3
       	call	sysax
       	movq	kvstn(%rip),%rdx
       	call	filnm
       	movq	r_cod(%rip),%rdi
       	movq	16(%rdi),%rdx
       	xorq	%rbx,%rbx
       	movq	stage(%rip),%rdi
       	call	sysea
       	decq	_rc_(%rip)
       	js  	call_50
       	decq	_rc_(%rip)
       	jns 	l_0089
       	jmp 	stpr4
l_0089:
call_50:
       	call	prtpg
       	orq 	%rdi,%rdi
       	jz  	labo2
       	call	prtst
labo2:
       	call	ermsg
       	xorq	%rdi,%rdi
       	jmp 	stopr
labo3:
       	movq	$36,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
l_cnt:
lcnt1:
       	movq	r_cnt(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	lcnt3
       	xorq	%rax,%rax
       	movq	%rax,r_cnt(%rip)
       	movq	%rdi,r_cod(%rip)
       	movq	r_0008(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	lcnt2
       	movq	stxoc(%rip),%rcx
       	cmpq	stxof(%rip),%rcx
       	jae 	lcnt4
lcnt2:
       	addq	stxof(%rip),%rdi
       	movq	%rdi,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	flptr(%rip),%rsp
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
lcnt3:
       	incq	errft(%rip)
       	movq	$37,_rc_(%rip)
       	jmp 	err_
lcnt4:
       	incq	errft(%rip)
       	movq	$332,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
l_end:
lend0:
       	.data
r_0055:	.quad	endms
       	.text
       	movq	r_0055(%rip),%rdi
       	jmp 	stopr
	.align	2
	nop
l_frt:
       	.data
r_0056:	.quad	scfrt
       	.text
       	movq	r_0056(%rip),%rcx
       	jmp 	retrn
	.align	2
	nop
l_nrt:
       	.data
r_0057:	.quad	scnrt
       	.text
       	movq	r_0057(%rip),%rcx
       	jmp 	retrn
	.align	2
	nop
l_rtn:
       	.data
r_0058:	.quad	scrtn
       	.text
       	movq	r_0058(%rip),%rcx
       	jmp 	retrn
	.align	2
	nop
l_scn:
       	movq	r_cnt(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	lscn2
       	xorq	%rax,%rax
       	movq	%rax,r_cnt(%rip)
       	cmpq	$320,kvert(%rip)
       	jne 	lscn1
       	cmpq	$321,kvert(%rip)
       	je  	lscn2
       	movq	%rdi,r_cod(%rip)
       	addq	stxoc(%rip),%rdi
       	movq	%rdi,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
lscn1:
       	incq	errft(%rip)
       	movq	$331,_rc_(%rip)
       	jmp 	err_
lscn2:
       	incq	errft(%rip)
       	movq	$321,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
l_und:
       	movq	$38,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_any:
       	.data
r_0059:	.quad	p_ans
       	.text
       	movq	r_0059(%rip),%rbx
       	.data
r_0060:	.quad	p_any
       	.text
       	movq	r_0060(%rip),%rsi
       	.data
r_0061:	.quad	p_ayd
       	.text
       	movq	r_0061(%rip),%rdx
       	call	patst
       	decq	_rc_(%rip)
       	js  	call_51
       	decq	_rc_(%rip)
       	jns 	l_0090
       	movq	$59,_rc_(%rip)
       	jmp 	err_
l_0090:
call_51:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_app:
       	orq 	%rcx,%rcx
       	jz  	sapp3
       	decq	%rcx
       	movq	%rcx,%rbx
       	salq	$3,%rbx
       	movq	%rsp,%rsi
       	addq	%rbx,%rsi
       	movq	(%rsi),%rdi
       	orq 	%rcx,%rcx
       	jz  	sapp2
       	movq	%rcx,%rbx
sapp1:
       	subq	$8,%rsi
       	movq	(%rsi),%rax
       	movq	%rax,8(%rsi)
       	decq	%rbx
       	jnz 	sapp1
sapp2:
       	addq	$8,%rsp
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_52
       	decq	_rc_(%rip)
       	jns 	l_0091
       	jmp 	sapp3
l_0091:
call_52:
       	movq	40(%rdi),%rsi
       	jmp 	cfunc
sapp3:
       	movq	$60,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_abn:
       	xorq	%rdi,%rdi
       	movq	r_0020(%rip),%rbx
       	call	pbild
       	movq	%rdi,%rsi
       	.data
r_0062:	.quad	p_abc
       	.text
       	movq	r_0062(%rip),%rbx
       	xorq	%rdi,%rdi
       	call	pbild
       	movq	%rsi,8(%rdi)
       	movq	%rsi,%rcx
       	movq	%rdi,%rsi
       	movq	(%rsp),%rdi
       	movq	%rcx,(%rsp)
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_53
       	decq	_rc_(%rip)
       	jns 	l_0092
       	movq	$61,_rc_(%rip)
       	jmp 	err_
l_0092:
call_53:
       	call	pconc
       	movq	%rdi,%rsi
       	.data
r_0063:	.quad	p_aba
       	.text
       	movq	r_0063(%rip),%rbx
       	xorq	%rdi,%rdi
       	call	pbild
       	movq	%rsi,8(%rdi)
       	movq	(%rsp),%rsi
       	movq	%rdi,16(%rsi)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_arg:
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_54
       	decq	_rc_(%rip)
       	jns 	l_0093
       	movq	$62,_rc_(%rip)
       	jmp 	err_
l_0093:
       	decq	_rc_(%rip)
       	jns 	l_0094
       	jmp 	exfal
l_0094:
call_54:
       	movq	%rdi,%rcx
       	popq	%rdi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_55
       	decq	_rc_(%rip)
       	jns 	l_0095
       	jmp 	sarg1
l_0095:
call_55:
       	movq	40(%rdi),%rdi
       	.data
r_0064:	.quad	b_pfc
       	.text
       	movq	r_0064(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	sarg1
       	orq 	%rcx,%rcx
       	jz  	exfal
       	cmpq	8(%rdi),%rcx
       	ja  	exfal
       	salq	$3,%rcx
       	addq	%rcx,%rdi
       	movq	56(%rdi),%rdi
       	jmp 	exvnm
sarg1:
       	movq	$63,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_arr:
       	popq	%rsi
       	popq	%rdi
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_56
       	decq	_rc_(%rip)
       	jns 	l_0096
       	jmp 	sar02
l_0096:
call_56:
       	movq	8(%rdi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jle 	sar10
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	sar11
       	movq	%r12,%rcx
       	call	vmake
       	decq	_rc_(%rip)
       	js  	call_57
       	decq	_rc_(%rip)
       	jns 	l_0097
       	jmp 	sar11
l_0097:
call_57:
       	jmp 	exsid
sar02:
       	pushq	%rdi
       	call	xscni
       	decq	_rc_(%rip)
       	js  	call_58
       	decq	_rc_(%rip)
       	jns 	l_0098
       	movq	$64,_rc_(%rip)
       	jmp 	err_
l_0098:
       	decq	_rc_(%rip)
       	jns 	l_0099
       	jmp 	exnul
l_0099:
call_58:
       	pushq	r_xsc(%rip)
       	pushq	%rsi
       	xorq	%rax,%rax
       	movq	%rax,arcdm(%rip)
       	xorq	%rax,%rax
       	movq	%rax,arptr(%rip)
       	movq	intv1(%rip),%r12
       	movq	%r12,arnel(%rip)
sar03:
       	movq	intv1(%rip),%r12
       	movq	%r12,arsvl(%rip)
       	movq	$58,%rdx
       	movq	$44,%rsi
       	xorq	%rcx,%rcx
       	call	xscan
       	cmpq	$1,%rcx
       	jne 	sar04
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_59
       	decq	_rc_(%rip)
       	jns 	l_0100
       	movq	$65,_rc_(%rip)
       	jmp 	err_
l_0100:
call_59:
       	movq	8(%rdi),%r12
       	movq	%r12,arsvl(%rip)
       	movq	$44,%rdx
       	movq	%rdx,%rsi
       	xorq	%rcx,%rcx
       	call	xscan
sar04:
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_60
       	decq	_rc_(%rip)
       	jns 	l_0101
       	movq	$66,_rc_(%rip)
       	jmp 	err_
l_0101:
call_60:
       	movq	8(%rdi),%r12
       	subq	arsvl(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	sar10
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	sar10
       	addq	intv1(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	sar10
       	movq	arptr(%rip),%rsi
       	orq 	%rsi,%rsi
       	jz  	sar05
       	addq	(%rsp),%rsi
       	movq	%r12,8(%rsi)
       	movq	arsvl(%rip),%r12
       	movq	%r12,(%rsi)
       	addq	$16,arptr(%rip)
       	jmp 	sar06
sar05:
       	incq	arcdm(%rip)
       	imulq	arnel(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	sar11
       	movq	%r12,arnel(%rip)
sar06:
       	orq 	%rcx,%rcx
       	jnz 	sar03
       	xorq	%rax,%rax
       	cmpq	%rax,arptr(%rip)
       	jnz 	sar09
       	movq	arnel(%rip),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	sar11
       	movq	%r12,%rbx
       	salq	$3,%rbx
       	movq	$40,%rcx
       	movq	arcdm(%rip),%rdx
sar07:
       	addq	$16,%rcx
       	decq	%rdx
       	jnz 	sar07
       	movq	%rcx,%rsi
       	addq	%rbx,%rcx
       	addq	$8,%rcx
       	cmpq	mxlen(%rip),%rcx
       	ja  	sar11
       	call	alloc
       	movq	(%rsp),%rbx
       	movq	%rdi,(%rsp)
       	movq	%rcx,%rdx
       	shrq	$3,%rcx
sar08:
       	movq	%rbx,%rax
       	stosq
       	decq	%rcx
       	jnz 	sar08
       	popq	%rdi
       	movq	(%rsp),%rbx
       	.data
r_0065:	.quad	b_art
       	.text
       	movq	r_0065(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rdx,16(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,8(%rdi)
       	movq	%rsi,24(%rdi)
       	movq	arcdm(%rip),%rax
       	movq	%rax,32(%rdi)
       	movq	%rdi,%rdx
       	addq	%rsi,%rdi
       	movq	%rbx,(%rdi)
       	movq	$40,arptr(%rip)
       	movq	%rbx,r_xsc(%rip)
       	movq	%rdx,(%rsp)
       	xorq	%rax,%rax
       	movq	%rax,xsofs(%rip)
       	jmp 	sar03
sar09:
       	popq	%rdi
       	jmp 	exsid
sar10:
       	movq	$67,_rc_(%rip)
       	jmp 	err_
sar11:
       	movq	$68,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_atn:
       	popq	%rdi
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_61
       	decq	_rc_(%rip)
       	jns 	l_0102
       	movq	$301,_rc_(%rip)
       	jmp 	err_
l_0102:
call_61:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_atn
       	jmp 	exrea
	.align	2
	nop
s_bsp:
       	call	iofcb
       	decq	_rc_(%rip)
       	js  	call_62
       	decq	_rc_(%rip)
       	jns 	l_0103
       	movq	$316,_rc_(%rip)
       	jmp 	err_
l_0103:
       	decq	_rc_(%rip)
       	jns 	l_0104
       	movq	$316,_rc_(%rip)
       	jmp 	err_
l_0104:
       	decq	_rc_(%rip)
       	jns 	l_0105
       	movq	$317,_rc_(%rip)
       	jmp 	err_
l_0105:
call_62:
       	call	sysbs
       	decq	_rc_(%rip)
       	js  	call_63
       	decq	_rc_(%rip)
       	jns 	l_0106
       	movq	$317,_rc_(%rip)
       	jmp 	err_
l_0106:
       	decq	_rc_(%rip)
       	jns 	l_0107
       	movq	$318,_rc_(%rip)
       	jmp 	err_
l_0107:
       	decq	_rc_(%rip)
       	jns 	l_0108
       	movq	$319,_rc_(%rip)
       	jmp 	err_
l_0108:
call_63:
       	jmp 	exnul
	.align	2
	nop
s_brk:
       	.data
r_0066:	.quad	p_bks
       	.text
       	movq	r_0066(%rip),%rbx
       	.data
r_0067:	.quad	p_brk
       	.text
       	movq	r_0067(%rip),%rsi
       	.data
r_0068:	.quad	p_bkd
       	.text
       	movq	r_0068(%rip),%rdx
       	call	patst
       	decq	_rc_(%rip)
       	js  	call_64
       	decq	_rc_(%rip)
       	jns 	l_0109
       	movq	$69,_rc_(%rip)
       	jmp 	err_
l_0109:
call_64:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_bkx:
       	movq	r_0066(%rip),%rbx
       	movq	r_0067(%rip),%rsi
       	.data
r_0069:	.quad	p_bxd
       	.text
       	movq	r_0069(%rip),%rdx
       	call	patst
       	decq	_rc_(%rip)
       	js  	call_65
       	decq	_rc_(%rip)
       	jns 	l_0110
       	movq	$70,_rc_(%rip)
       	jmp 	err_
l_0110:
call_65:
       	pushq	%rdi
       	.data
r_0070:	.quad	p_bkx
       	.text
       	movq	r_0070(%rip),%rbx
       	call	pbild
       	movq	(%rsp),%rax
       	movq	%rax,8(%rdi)
       	movq	r_0020(%rip),%rbx
       	call	pbild
       	movq	%rdi,%rcx
       	movq	(%rsp),%rdi
       	movq	%rcx,8(%rdi)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_chr:
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_66
       	decq	_rc_(%rip)
       	jns 	l_0111
       	movq	$281,_rc_(%rip)
       	jmp 	err_
l_0111:
       	decq	_rc_(%rip)
       	jns 	l_0112
       	jmp 	schr1
l_0112:
call_66:
       	cmpq	$256,%rdx
       	jae 	schr1
       	movq	$1,%rcx
       	movq	%rdx,%rbx
       	call	alocs
       	movq	%rdi,%rsi
       	addq	$16,%rsi
       	movb	%bl,(%rsi)
       	xorq	%rsi,%rsi
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
schr1:
       	movq	$282,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_chp:
       	popq	%rdi
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_67
       	decq	_rc_(%rip)
       	jns 	l_0113
       	movq	$302,_rc_(%rip)
       	jmp 	err_
l_0113:
call_67:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_chp
       	jmp 	exrea
	.align	2
	nop
s_clr:
       	call	xscni
       	decq	_rc_(%rip)
       	js  	call_68
       	decq	_rc_(%rip)
       	jns 	l_0114
       	movq	$71,_rc_(%rip)
       	jmp 	err_
l_0114:
       	decq	_rc_(%rip)
       	jns 	l_0115
       	jmp 	sclr2
l_0115:
call_68:
sclr1:
       	movq	$44,%rdx
       	movq	%rdx,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_69
       	decq	_rc_(%rip)
       	jns 	l_0116
       	movq	$72,_rc_(%rip)
       	jmp 	err_
l_0116:
call_69:
       	xorq	%rax,%rax
       	movq	%rax,0(%rdi)
       	orq 	%rcx,%rcx
       	jnz 	sclr1
sclr2:
       	movq	hshtb(%rip),%rbx
sclr3:
       	cmpq	hshte(%rip),%rbx
       	je  	exnul
       	movq	%rbx,%rdi
       	addq	$8,%rbx
       	subq	$48,%rdi
sclr4:
       	movq	48(%rdi),%rdi
       	orq 	%rdi,%rdi
       	jz  	sclr3
       	xorq	%rax,%rax
       	cmpq	%rax,0(%rdi)
       	jnz 	sclr5
       	call	setvr
       	jmp 	sclr4
sclr5:
       	.data
r_0071:	.quad	b_vre
       	.text
       	movq	r_0071(%rip),%rax
       	cmpq	%rax,8(%rdi)
       	je  	sclr4
       	movq	%rdi,%rsi
sclr6:
       	movq	%rsi,%rcx
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	sclr6
       	movq	%rcx,%rsi
       	movq	r_0012(%rip),%rax
       	movq	%rax,16(%rsi)
       	jmp 	sclr4
	.align	2
	nop
s_cod:
       	popq	%rdi
       	call	gtcod
       	decq	_rc_(%rip)
       	js  	call_70
       	decq	_rc_(%rip)
       	jns 	l_0117
       	jmp 	exfal
l_0117:
call_70:
       	pushq	%rdi
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_col:
       	popq	%rdi
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_71
       	decq	_rc_(%rip)
       	jns 	l_0118
       	movq	$73,_rc_(%rip)
       	jmp 	err_
l_0118:
call_71:
       	movq	8(%rdi),%r12
       	movq	%r12,clsvi(%rip)
       	xorq	%rbx,%rbx
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	xorq	%rax,%rax
       	movq	%rax,dnams(%rip)
       	call	gbcol
       	movq	%rdi,dnams(%rip)
       	movq	dname(%rip),%rcx
       	subq	dnamp(%rip),%rcx
       	shrq	$3,%rcx
       	movq	%rcx,%r12
       	subq	clsvi(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	exfal
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	exfal
       	addq	clsvi(%rip),%r12
       	seto	reg_fl(%rip)
       	jmp 	exint
	.align	2
	nop
s_cnv:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_72
       	decq	_rc_(%rip)
       	jns 	l_0119
       	jmp 	scv29
l_0119:
call_72:
       	orq 	%rcx,%rcx
       	jz  	scv29
       	call	flstg
       	movq	(%rsp),%rsi
       	movq	r_0036(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	scv01
       	movq	16(%rsi),%rsi
       	movq	32(%rsi),%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_73
       	decq	_rc_(%rip)
       	jns 	l_0120
       	jmp 	exits
l_0120:
call_73:
       	jmp 	exfal
scv01:
       	pushq	%rdi
       	.data
r_0072:	.quad	svctb
       	.text
       	movq	r_0072(%rip),%rsi
       	xorq	%rbx,%rbx
       	movq	%rcx,%rdx
scv02:
       	lodsq
       	movq	%rax,%rdi
       	orq 	%rdi,%rdi
       	jz  	exfal
       	cmpq	8(%rdi),%rdx
       	jne 	scv05
       	movq	%rsi,cnvtp(%rip)
       	addq	$16,%rdi
       	movq	(%rsp),%rsi
       	addq	$16,%rsi
       	movq	%rdx,%rcx
       	repe	cmpsb
       	movq	$0,%rsi
       	movq	%rsi,%rdi
       	jnz 	scv04
scv03:
       	movq	%rbx,%rsi
       	addq	$8,%rsp
       	popq	%rdi
       	.data
r_0073:	.quad	l_0121
       	.text
       	movq	r_0073(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0121:
       	.quad	scv06
       	.quad	scv07
       	.quad	scv09
       	.quad	scv10
       	.quad	scv11
       	.quad	scv19
       	.quad	scv25
       	.quad	scv26
       	.quad	scv27
       	.quad	scv08
       	.text
scv04:
       	movq	cnvtp(%rip),%rsi
scv05:
       	incq	%rbx
       	jmp 	scv02
scv06:
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_74
       	decq	_rc_(%rip)
       	jns 	l_0122
       	jmp 	exfal
l_0122:
call_74:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
scv07:
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_75
       	decq	_rc_(%rip)
       	jns 	l_0123
       	jmp 	exfal
l_0123:
call_75:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
scv08:
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_76
       	decq	_rc_(%rip)
       	jns 	l_0124
       	jmp 	exfal
l_0124:
call_76:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
scv09:
       	movq	r_0033(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	exixr
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_77
       	decq	_rc_(%rip)
       	jns 	l_0125
       	jmp 	exfal
l_0125:
call_77:
       	jmp 	exvnm
scv10:
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_78
       	decq	_rc_(%rip)
       	jns 	l_0126
       	jmp 	exfal
l_0126:
call_78:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
scv11:
       	pushq	%rdi
       	xorq	%rcx,%rcx
       	call	gtarr
       	decq	_rc_(%rip)
       	js  	call_79
       	decq	_rc_(%rip)
       	jns 	l_0127
       	jmp 	exfal
l_0127:
       	decq	_rc_(%rip)
       	jns 	l_0128
       	jmp 	exfal
l_0128:
call_79:
       	popq	%rsi
       	movq	r_0022(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	exsid
       	pushq	%rdi
       	pushq	r_0012(%rip)
       	xorq	%rcx,%rcx
       	call	sorta
       	decq	_rc_(%rip)
       	js  	call_80
       	decq	_rc_(%rip)
       	jns 	l_0129
       	jmp 	exfal
l_0129:
call_80:
       	movq	%rdi,%rbx
       	movq	48(%rdi),%r12
       	movq	%r12,%rcx
       	addq	$80,%rdi
scv12:
       	movq	(%rdi),%rsi
       	movq	8(%rsi),%rax
       	stosq
       	movq	16(%rsi),%rax
       	stosq
       	decq	%rcx
       	jnz 	scv12
       	movq	%rbx,%rdi
       	jmp 	exsid
scv19:
       	movq	(%rdi),%rcx
       	pushq	%rdi
       	cmpq	r_0022(%rip),%rcx
       	je  	exits
       	cmpq	r_0065(%rip),%rcx
       	jne 	exfal
       	cmpq	$2,32(%rdi)
       	jne 	exfal
       	movq	64(%rdi),%r12
       	subq	intv2(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jne 	exfal
       	movq	48(%rdi),%r12
       	movq	%r12,%rcx
       	movq	%rcx,%rbx
       	addq	$4,%rcx
       	salq	$3,%rcx
       	call	alloc
       	movq	%rdi,%rdx
       	pushq	%rdi
       	movq	r_0022(%rip),%rax
       	stosq
       	xorq	%rax,%rax
       	stosq
       	movq	%rcx,%rax
       	stosq
       	movq	r_0012(%rip),%rax
       	stosq
scv20:
       	movq	%rdx,%rax
       	stosq
       	decq	%rbx
       	jnz 	scv20
       	movq	$80,%rbx
scv21:
       	movq	8(%rsp),%rsi
       	cmpq	16(%rsi),%rbx
       	je  	scv24
       	addq	%rbx,%rsi
       	addq	$16,%rbx
       	movq	(%rsi),%rdi
       	subq	$8,%rsi
scv22:
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	scv22
scv23:
       	pushq	%rsi
       	movq	8(%rsp),%rsi
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_81
       	decq	_rc_(%rip)
       	jns 	l_0130
       	jmp 	exfal
l_0130:
call_81:
       	popq	16(%rsi)
       	jmp 	scv21
scv24:
       	popq	%rdi
       	addq	$8,%rsp
       	jmp 	exsid
scv25:
       	xorq	%rbx,%rbx
       	call	gtexp
       	decq	_rc_(%rip)
       	js  	call_82
       	decq	_rc_(%rip)
       	jns 	l_0131
       	jmp 	exfal
l_0131:
call_82:
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
scv26:
       	call	gtcod
       	decq	_rc_(%rip)
       	js  	call_83
       	decq	_rc_(%rip)
       	jns 	l_0132
       	jmp 	exfal
l_0132:
call_83:
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
scv27:
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_84
       	decq	_rc_(%rip)
       	jns 	l_0133
       	jmp 	exfal
l_0133:
call_84:
scv31:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
scv29:
       	movq	$74,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_cop:
       	call	copyb
       	decq	_rc_(%rip)
       	js  	call_85
       	decq	_rc_(%rip)
       	jns 	l_0134
       	jmp 	exits
l_0134:
call_85:
       	jmp 	exsid
	.align	2
	nop
s_cos:
       	popq	%rdi
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_86
       	decq	_rc_(%rip)
       	jns 	l_0135
       	movq	$303,_rc_(%rip)
       	jmp 	err_
l_0135:
call_86:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_cos
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
       	movq	$322,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_dat:
       	call	xscni
       	decq	_rc_(%rip)
       	js  	call_87
       	decq	_rc_(%rip)
       	jns 	l_0136
       	movq	$75,_rc_(%rip)
       	jmp 	err_
l_0136:
       	decq	_rc_(%rip)
       	jns 	l_0137
       	movq	$76,_rc_(%rip)
       	jmp 	err_
l_0137:
call_87:
       	movq	$40,%rdx
       	movq	%rdx,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	orq 	%rcx,%rcx
       	jnz 	sdat1
       	movq	$77,_rc_(%rip)
       	jmp 	err_
sdat1:
       	movq	8(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jz  	sdt1a
       	call	flstg
sdt1a:
       	movq	%rdi,%rsi
       	movq	8(%rdi),%rcx
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	call	alost
       	pushq	%rdi
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	(%rsp),%rdi
       	xorq	%rsi,%rsi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_88
       	decq	_rc_(%rip)
       	jns 	l_0138
       	movq	$78,_rc_(%rip)
       	jmp 	err_
l_0138:
call_88:
       	movq	%rdi,datdv(%rip)
       	movq	%rsp,datxs(%rip)
       	xorq	%rbx,%rbx
sdat2:
       	movq	$41,%rdx
       	movq	$44,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	orq 	%rcx,%rcx
       	jnz 	sdat3
       	movq	$79,_rc_(%rip)
       	jmp 	err_
sdat3:
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_89
       	decq	_rc_(%rip)
       	jns 	l_0139
       	movq	$80,_rc_(%rip)
       	jmp 	err_
l_0139:
call_89:
       	pushq	%rdi
       	incq	%rbx
       	cmpq	$2,%rcx
       	je  	sdat2
       	movq	$5,%rcx
       	addq	%rbx,%rcx
       	salq	$3,%rcx
       	movq	%rbx,%rdx
       	call	alost
       	movq	%rdx,%rbx
       	movq	datxs(%rip),%rsi
       	movq	(%rsi),%rdx
       	movq	%rdi,(%rsi)
       	.data
r_0074:	.quad	b_dfc
       	.text
       	movq	r_0074(%rip),%rax
       	stosq
       	movq	%rbx,%rax
       	stosq
       	movq	%rcx,%rax
       	stosq
       	subq	$16,%rcx
       	movq	%rcx,%rax
       	stosq
       	movq	%rdx,%rax
       	stosq
       	movq	%rbx,%rdx
sdat4:
       	subq	$8,%rsi
       	movq	(%rsi),%rax
       	stosq
       	decq	%rdx
       	jnz 	sdat4
       	movq	%rcx,%rdx
       	movq	datdv(%rip),%rdi
       	movq	datxs(%rip),%rsi
       	movq	(%rsi),%rsi
       	call	dffnc
sdat5:
       	movq	$40,%rcx
       	call	alloc
       	.data
r_0075:	.quad	b_ffc
       	.text
       	movq	r_0075(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	$1,8(%rdi)
       	movq	datxs(%rip),%rsi
       	movq	(%rsi),%rax
       	movq	%rax,16(%rdi)
       	subq	$8,%rdx
       	movq	%rdx,32(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,24(%rdi)
       	movq	%rdi,%rsi
       	movq	(%rsp),%rdi
       	movq	40(%rdi),%rdi
       	movq	r_0075(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	sdat6
       	movq	%rdi,24(%rsi)
sdat6:
       	popq	%rdi
       	call	dffnc
       	cmpq	datxs(%rip),%rsp
       	jne 	sdat5
       	addq	$8,%rsp
       	jmp 	exnul
	.align	2
	nop
s_dtp:
       	popq	%rdi
       	call	dtype
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_dte:
       	popq	%rdi
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_90
       	decq	_rc_(%rip)
       	jns 	l_0140
       	movq	$330,_rc_(%rip)
       	jmp 	err_
l_0140:
call_90:
       	call	sysdt
       	movq	8(%rsi),%rcx
       	orq 	%rcx,%rcx
       	jz  	exnul
       	xorq	%rbx,%rbx
       	call	sbstr
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_def:
       	popq	%rdi
       	xorq	%rax,%rax
       	movq	%rax,deflb(%rip)
       	cmpq	r_0012(%rip),%rdi
       	je  	sdf01
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_91
       	decq	_rc_(%rip)
       	jns 	l_0141
       	jmp 	sdf12
l_0141:
call_91:
       	movq	%rdi,deflb(%rip)
sdf01:
       	call	xscni
       	decq	_rc_(%rip)
       	js  	call_92
       	decq	_rc_(%rip)
       	jns 	l_0142
       	movq	$81,_rc_(%rip)
       	jmp 	err_
l_0142:
       	decq	_rc_(%rip)
       	jns 	l_0143
       	movq	$82,_rc_(%rip)
       	jmp 	err_
l_0143:
call_92:
       	movq	$40,%rdx
       	movq	%rdx,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	orq 	%rcx,%rcx
       	jnz 	sdf02
       	movq	$83,_rc_(%rip)
       	jmp 	err_
sdf02:
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_93
       	decq	_rc_(%rip)
       	jns 	l_0144
       	movq	$84,_rc_(%rip)
       	jmp 	err_
l_0144:
call_93:
       	movq	%rdi,defvr(%rip)
       	xorq	%rbx,%rbx
       	movq	%rsp,defxs(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,deflb(%rip)
       	jnz 	sdf03
       	movq	%rdi,deflb(%rip)
sdf03:
       	movq	$41,%rdx
       	movq	$44,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	orq 	%rcx,%rcx
       	jnz 	sdf04
       	movq	$85,_rc_(%rip)
       	jmp 	err_
sdf04:
       	cmpq	r_0012(%rip),%rdi
       	jne 	sdf05
       	orq 	%rbx,%rbx
       	jz  	sdf06
sdf05:
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_94
       	decq	_rc_(%rip)
       	jns 	l_0145
       	jmp 	sdf03
l_0145:
call_94:
       	pushq	%rdi
       	incq	%rbx
       	cmpq	$2,%rcx
       	je  	sdf03
sdf06:
       	movq	%rbx,defna(%rip)
       	xorq	%rbx,%rbx
sdf07:
       	movq	$44,%rdx
       	movq	%rdx,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	cmpq	r_0012(%rip),%rdi
       	jne 	sdf08
       	orq 	%rcx,%rcx
       	jz  	sdf09
sdf08:
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_95
       	decq	_rc_(%rip)
       	jns 	l_0146
       	jmp 	sdf07
l_0146:
call_95:
       	incq	%rbx
       	pushq	%rdi
       	orq 	%rcx,%rcx
       	jnz 	sdf07
sdf09:
       	movq	%rbx,%rcx
       	addq	defna(%rip),%rcx
       	movq	%rcx,%rdx
       	addq	$8,%rcx
       	salq	$3,%rcx
       	call	alloc
       	movq	%rdi,%rsi
       	movq	r_0064(%rip),%rax
       	stosq
       	movq	defna(%rip),%rax
       	stosq
       	movq	%rcx,%rax
       	stosq
       	movq	defvr(%rip),%rax
       	stosq
       	movq	%rbx,%rax
       	stosq
       	xorq	%rax,%rax
       	stosq
       	xorq	%rax,%rax
       	stosq
       	xorq	%rax,%rax
       	stosq
       	orq 	%rdx,%rdx
       	jz  	sdf11
       	movq	%rsi,%rcx
       	movq	defxs(%rip),%rsi
sdf10:
       	subq	$8,%rsi
       	movq	(%rsi),%rax
       	stosq
       	decq	%rdx
       	jnz 	sdf10
       	movq	%rcx,%rsi
sdf11:
       	movq	defxs(%rip),%rsp
       	movq	deflb(%rip),%rax
       	movq	%rax,40(%rsi)
       	movq	defvr(%rip),%rdi
       	call	dffnc
       	jmp 	exnul
sdf12:
       	movq	$86,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_det:
       	popq	%rdi
       	call	gtvar
       	decq	_rc_(%rip)
       	js  	call_96
       	decq	_rc_(%rip)
       	jns 	l_0147
       	movq	$87,_rc_(%rip)
       	jmp 	err_
l_0147:
call_96:
       	call	dtach
       	jmp 	exnul
	.align	2
	nop
s_dif:
       	popq	%rdi
       	popq	%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_97
       	decq	_rc_(%rip)
       	jns 	l_0148
       	jmp 	exfal
l_0148:
call_97:
       	jmp 	exnul
	.align	2
	nop
s_dmp:
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_98
       	decq	_rc_(%rip)
       	jns 	l_0149
       	movq	$88,_rc_(%rip)
       	jmp 	err_
l_0149:
       	decq	_rc_(%rip)
       	jns 	l_0150
       	movq	$89,_rc_(%rip)
       	jmp 	err_
l_0150:
call_98:
       	call	dumpr
       	jmp 	exnul
	.align	2
	nop
s_dup:
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_99
       	decq	_rc_(%rip)
       	jns 	l_0151
       	movq	$90,_rc_(%rip)
       	jmp 	err_
l_0151:
       	decq	_rc_(%rip)
       	jns 	l_0152
       	jmp 	sdup7
l_0152:
call_99:
       	movq	%rdi,%rbx
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_100
       	decq	_rc_(%rip)
       	jns 	l_0153
       	jmp 	sdup4
l_0153:
call_100:
       	movq	%rcx,%r12
       	movq	%r12,dupsi(%rip)
       	movq	%rbx,%r12
       	imulq	dupsi(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	sdup3
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	je  	exnul
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	sdup3
       	movq	%r12,%rcx
sdup1:
       	movq	%rdi,%rsi
       	call	alocs
       	pushq	%rdi
       	movq	%rsi,%rdx
       	addq	$16,%rdi
sdup2:
       	movq	%rdx,%rsi
       	movq	8(%rsi),%rcx
       	addq	$16,%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	decq	%rbx
       	jnz 	sdup2
       	xorq	%rsi,%rsi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
sdup3:
       	movq	dname(%rip),%rcx
       	jmp 	sdup1
sdup4:
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_101
       	decq	_rc_(%rip)
       	jns 	l_0154
       	movq	$91,_rc_(%rip)
       	jmp 	err_
l_0154:
call_101:
       	pushq	%rdi
       	.data
r_0076:	.quad	ndnth
       	.text
       	movq	r_0076(%rip),%rdi
       	orq 	%rbx,%rbx
       	jz  	sdup6
       	pushq	%rbx
sdup5:
       	movq	%rdi,%rsi
       	movq	8(%rsp),%rdi
       	call	pconc
       	decq	(%rsp)
       	xorq	%rax,%rax
       	cmpq	%rax,(%rsp)
       	jnz 	sdup5
       	addq	$8,%rsp
sdup6:
       	movq	%rdi,(%rsp)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
sdup7:
       	addq	$8,%rsp
       	jmp 	exfal
	.align	2
	nop
s_ejc:
       	call	iofcb
       	decq	_rc_(%rip)
       	js  	call_102
       	decq	_rc_(%rip)
       	jns 	l_0155
       	movq	$92,_rc_(%rip)
       	jmp 	err_
l_0155:
       	decq	_rc_(%rip)
       	jns 	l_0156
       	jmp 	sejc1
l_0156:
       	decq	_rc_(%rip)
       	jns 	l_0157
       	movq	$93,_rc_(%rip)
       	jmp 	err_
l_0157:
call_102:
       	call	sysef
       	decq	_rc_(%rip)
       	js  	call_103
       	decq	_rc_(%rip)
       	jns 	l_0158
       	movq	$93,_rc_(%rip)
       	jmp 	err_
l_0158:
       	decq	_rc_(%rip)
       	jns 	l_0159
       	movq	$94,_rc_(%rip)
       	jmp 	err_
l_0159:
       	decq	_rc_(%rip)
       	jns 	l_0160
       	movq	$95,_rc_(%rip)
       	jmp 	err_
l_0160:
call_103:
       	jmp 	exnul
sejc1:
       	call	sysep
       	jmp 	exnul
	.align	2
	nop
s_enf:
       	call	iofcb
       	decq	_rc_(%rip)
       	js  	call_104
       	decq	_rc_(%rip)
       	jns 	l_0161
       	movq	$96,_rc_(%rip)
       	jmp 	err_
l_0161:
       	decq	_rc_(%rip)
       	jns 	l_0162
       	movq	$97,_rc_(%rip)
       	jmp 	err_
l_0162:
       	decq	_rc_(%rip)
       	jns 	l_0163
       	movq	$98,_rc_(%rip)
       	jmp 	err_
l_0163:
call_104:
       	call	sysen
       	decq	_rc_(%rip)
       	js  	call_105
       	decq	_rc_(%rip)
       	jns 	l_0164
       	movq	$98,_rc_(%rip)
       	jmp 	err_
l_0164:
       	decq	_rc_(%rip)
       	jns 	l_0165
       	movq	$99,_rc_(%rip)
       	jmp 	err_
l_0165:
       	decq	_rc_(%rip)
       	jns 	l_0166
       	movq	$100,_rc_(%rip)
       	jmp 	err_
l_0166:
call_105:
       	movq	%rsi,%rbx
       	movq	%rsi,%rdi
senf1:
       	movq	%rdi,%rsi
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	exnul
       	cmpq	$4,8(%rdi)
       	jne 	senf1
       	movq	16(%rdi),%rax
       	movq	%rax,16(%rsi)
       	movq	24(%rdi),%rax
       	movq	%rax,enfch(%rip)
       	movq	32(%rdi),%rdx
       	movq	%rbx,%rdi
       	call	setvr
       	.data
r_0077:	.quad	r_fcb
       	.text
       	movq	r_0077(%rip),%rsi
       	subq	$16,%rsi
senf2:
       	movq	%rsi,%rdi
       	movq	16(%rsi),%rsi
       	orq 	%rsi,%rsi
       	jz  	senf4
       	cmpq	%rdx,24(%rsi)
       	je  	senf3
       	jmp 	senf2
senf3:
       	movq	16(%rsi),%rax
       	movq	%rax,16(%rdi)
senf4:
       	movq	enfch(%rip),%rsi
       	orq 	%rsi,%rsi
       	jz  	exnul
       	movq	24(%rsi),%rax
       	movq	%rax,enfch(%rip)
       	movq	32(%rsi),%rcx
       	movq	16(%rsi),%rsi
       	call	dtach
       	jmp 	senf4
	.align	2
	nop
s_eqf:
       	call	acomp
       	decq	_rc_(%rip)
       	js  	call_106
       	decq	_rc_(%rip)
       	jns 	l_0167
       	movq	$101,_rc_(%rip)
       	jmp 	err_
l_0167:
       	decq	_rc_(%rip)
       	jns 	l_0168
       	movq	$102,_rc_(%rip)
       	jmp 	err_
l_0168:
       	decq	_rc_(%rip)
       	jns 	l_0169
       	jmp 	exfal
l_0169:
       	decq	_rc_(%rip)
       	jns 	l_0170
       	jmp 	exnul
l_0170:
       	decq	_rc_(%rip)
       	jns 	l_0171
       	jmp 	exfal
l_0171:
call_106:
	.align	2
	nop
s_evl:
       	popq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdx
       	addq	$8,reg_cp(%rip)
       	cmpq	r_0038(%rip),%rdx
       	jne 	sevl1
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rsi
       	movq	(%rsi),%rcx
       	cmpq	r_0027(%rip),%rcx
       	jne 	sevl2
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rsp)
       	jnz 	sevl2
sevl1:
       	xorq	%rbx,%rbx
       	pushq	%rdx
       	call	gtexp
       	decq	_rc_(%rip)
       	js  	call_107
       	decq	_rc_(%rip)
       	jns 	l_0172
       	movq	$103,_rc_(%rip)
       	jmp 	err_
l_0172:
call_107:
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	xorq	%rbx,%rbx
       	call	evalx
       	decq	_rc_(%rip)
       	js  	call_108
       	decq	_rc_(%rip)
       	jns 	l_0173
       	jmp 	exfal
l_0173:
call_108:
       	movq	%rdi,%rsi
       	movq	(%rsp),%rdi
       	movq	%rsi,(%rsp)
       	jmp 	*(%rdi)
sevl2:
       	movq	$1,%rbx
       	call	gtexp
       	decq	_rc_(%rip)
       	js  	call_109
       	decq	_rc_(%rip)
       	jns 	l_0174
       	movq	$103,_rc_(%rip)
       	jmp 	err_
l_0174:
call_109:
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	movq	$1,%rbx
       	call	evalx
       	decq	_rc_(%rip)
       	js  	call_110
       	decq	_rc_(%rip)
       	jns 	l_0175
       	jmp 	exfal
l_0175:
call_110:
       	jmp 	exnam
	.align	2
	nop
s_ext:
       	xorq	%rbx,%rbx
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	xorq	%rax,%rax
       	movq	%rax,dnams(%rip)
       	call	gbcol
       	movq	%rdi,dnams(%rip)
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_111
       	decq	_rc_(%rip)
       	jns 	l_0176
       	movq	$288,_rc_(%rip)
       	jmp 	err_
l_0176:
call_111:
       	movq	%rdi,%rsi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_112
       	decq	_rc_(%rip)
       	jns 	l_0177
       	movq	$104,_rc_(%rip)
       	jmp 	err_
l_0177:
call_112:
       	pushq	%rsi
       	movq	%rdi,%rsi
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_113
       	decq	_rc_(%rip)
       	jns 	l_0178
       	jmp 	sext1
l_0178:
call_113:
       	xorq	%rsi,%rsi
       	movq	8(%rdi),%r12
sext1:
       	movq	r_fcb(%rip),%rbx
       	.data
r_0078:	.quad	headv
       	.text
       	movq	r_0078(%rip),%rdi
       	popq	%rcx
       	call	sysxi
       	decq	_rc_(%rip)
       	js  	call_114
       	decq	_rc_(%rip)
       	jns 	l_0179
       	movq	$105,_rc_(%rip)
       	jmp 	err_
l_0179:
       	decq	_rc_(%rip)
       	jns 	l_0180
       	movq	$106,_rc_(%rip)
       	jmp 	err_
l_0180:
call_114:
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	je  	exnul
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jg  	sext2
       	negq	%r12
sext2:
       	movq	%r12,%rdx
       	addq	%rdx,%rcx
       	cmpq	$5,%rcx
       	je  	sext5
       	xorq	%rax,%rax
       	movq	%rax,gbcnt(%rip)
       	cmpq	$3,%rdx
       	jae 	sext3
       	pushq	%rdx
       	xorq	%rdx,%rdx
       	call	prpar
       	popq	%rdx
sext3:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,headp(%rip)
       	cmpq	$1,%rdx
       	jne 	sext4
       	xorq	%rax,%rax
       	movq	%rax,headp(%rip)
sext4:
       	call	systm
       	movq	%r12,timsx(%rip)
       	movq	kvstc(%rip),%r12
       	movq	%r12,kvstl(%rip)
       	call	stgcc
       	jmp 	exnul
sext5:
       	movq	r_0014(%rip),%rdi
       	jmp 	exixr
	.align	2
	nop
s_exp:
       	popq	%rdi
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_115
       	decq	_rc_(%rip)
       	jns 	l_0181
       	movq	$304,_rc_(%rip)
       	jmp 	err_
l_0181:
call_115:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_etx
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
       	movq	$305,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_fld:
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_116
       	decq	_rc_(%rip)
       	jns 	l_0182
       	movq	$107,_rc_(%rip)
       	jmp 	err_
l_0182:
       	decq	_rc_(%rip)
       	jns 	l_0183
       	jmp 	exfal
l_0183:
call_116:
       	movq	%rdi,%rbx
       	popq	%rdi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_117
       	decq	_rc_(%rip)
       	jns 	l_0184
       	jmp 	sfld1
l_0184:
call_117:
       	movq	40(%rdi),%rdi
       	movq	r_0074(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	sfld1
       	orq 	%rbx,%rbx
       	jz  	exfal
       	cmpq	8(%rdi),%rbx
       	ja  	exfal
       	salq	$3,%rbx
       	addq	%rbx,%rdi
       	movq	32(%rdi),%rdi
       	jmp 	exvnm
sfld1:
       	movq	$108,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_fnc:
       	.data
r_0079:	.quad	p_fnc
       	.text
       	movq	r_0079(%rip),%rbx
       	xorq	%rdi,%rdi
       	call	pbild
       	movq	%rdi,%rsi
       	popq	%rdi
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_118
       	decq	_rc_(%rip)
       	jns 	l_0185
       	movq	$259,_rc_(%rip)
       	jmp 	err_
l_0185:
call_118:
       	call	pconc
       	movq	%rdi,%rsi
       	.data
r_0080:	.quad	p_fna
       	.text
       	movq	r_0080(%rip),%rbx
       	xorq	%rdi,%rdi
       	call	pbild
       	movq	%rsi,8(%rdi)
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_gef:
       	call	acomp
       	decq	_rc_(%rip)
       	js  	call_119
       	decq	_rc_(%rip)
       	jns 	l_0186
       	movq	$109,_rc_(%rip)
       	jmp 	err_
l_0186:
       	decq	_rc_(%rip)
       	jns 	l_0187
       	movq	$110,_rc_(%rip)
       	jmp 	err_
l_0187:
       	decq	_rc_(%rip)
       	jns 	l_0188
       	jmp 	exfal
l_0188:
       	decq	_rc_(%rip)
       	jns 	l_0189
       	jmp 	exnul
l_0189:
       	decq	_rc_(%rip)
       	jns 	l_0190
       	jmp 	exnul
l_0190:
call_119:
	.align	2
	nop
s_gtf:
       	call	acomp
       	decq	_rc_(%rip)
       	js  	call_120
       	decq	_rc_(%rip)
       	jns 	l_0191
       	movq	$111,_rc_(%rip)
       	jmp 	err_
l_0191:
       	decq	_rc_(%rip)
       	jns 	l_0192
       	movq	$112,_rc_(%rip)
       	jmp 	err_
l_0192:
       	decq	_rc_(%rip)
       	jns 	l_0193
       	jmp 	exfal
l_0193:
       	decq	_rc_(%rip)
       	jns 	l_0194
       	jmp 	exfal
l_0194:
       	decq	_rc_(%rip)
       	jns 	l_0195
       	jmp 	exnul
l_0195:
call_120:
	.align	2
	nop
s_hst:
       	popq	%rdx
       	popq	%rbx
       	popq	%rdi
       	popq	%rsi
       	popq	%rcx
       	call	syshs
       	decq	_rc_(%rip)
       	js  	call_121
       	decq	_rc_(%rip)
       	jns 	l_0196
       	movq	$254,_rc_(%rip)
       	jmp 	err_
l_0196:
       	decq	_rc_(%rip)
       	jns 	l_0197
       	movq	$255,_rc_(%rip)
       	jmp 	err_
l_0197:
       	decq	_rc_(%rip)
       	jns 	l_0198
       	jmp 	shst1
l_0198:
       	decq	_rc_(%rip)
       	jns 	l_0199
       	jmp 	exnul
l_0199:
       	decq	_rc_(%rip)
       	jns 	l_0200
       	jmp 	exixr
l_0200:
       	decq	_rc_(%rip)
       	jns 	l_0201
       	jmp 	exfal
l_0201:
       	decq	_rc_(%rip)
       	jns 	l_0202
       	jmp 	shst3
l_0202:
       	decq	_rc_(%rip)
       	jns 	l_0203
       	jmp 	shst4
l_0203:
call_121:
shst1:
       	orq 	%rsi,%rsi
       	jz  	exnul
       	movq	8(%rsi),%rcx
       	xorq	%rbx,%rbx
shst2:
       	call	sbstr
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
shst3:
       	xorq	%rbx,%rbx
       	subq	$16,%rbx
       	jmp 	shst2
shst4:
       	pushq	%rdi
       	call	copyb
       	decq	_rc_(%rip)
       	js  	call_122
       	decq	_rc_(%rip)
       	jns 	l_0204
       	jmp 	exits
l_0204:
call_122:
       	jmp 	exsid
	.align	2
	nop
s_idn:
       	popq	%rdi
       	popq	%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_123
       	decq	_rc_(%rip)
       	jns 	l_0205
       	jmp 	exnul
l_0205:
call_123:
       	jmp 	exfal
	.align	2
	nop
s_inp:
       	xorq	%rbx,%rbx
       	call	ioput
       	decq	_rc_(%rip)
       	js  	call_124
       	decq	_rc_(%rip)
       	jns 	l_0206
       	movq	$113,_rc_(%rip)
       	jmp 	err_
l_0206:
       	decq	_rc_(%rip)
       	jns 	l_0207
       	movq	$114,_rc_(%rip)
       	jmp 	err_
l_0207:
       	decq	_rc_(%rip)
       	jns 	l_0208
       	movq	$115,_rc_(%rip)
       	jmp 	err_
l_0208:
       	decq	_rc_(%rip)
       	jns 	l_0209
       	movq	$116,_rc_(%rip)
       	jmp 	err_
l_0209:
       	decq	_rc_(%rip)
       	jns 	l_0210
       	jmp 	exfal
l_0210:
       	decq	_rc_(%rip)
       	jns 	l_0211
       	movq	$117,_rc_(%rip)
       	jmp 	err_
l_0211:
       	decq	_rc_(%rip)
       	jns 	l_0212
       	movq	$289,_rc_(%rip)
       	jmp 	err_
l_0212:
call_124:
       	jmp 	exnul
	.align	2
	nop
s_int:
       	popq	%rdi
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_125
       	decq	_rc_(%rip)
       	jns 	l_0213
       	jmp 	exfal
l_0213:
call_125:
       	cmpq	r_0023(%rip),%rcx
       	je  	exnul
       	jmp 	exfal
	.align	2
	nop
s_itm:
       	orq 	%rcx,%rcx
       	jnz 	sitm1
       	pushq	r_0012(%rip)
       	movq	$1,%rcx
sitm1:
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rdi
       	movq	(%rdi),%rsi
       	decq	%rcx
       	movq	%rcx,%rdi
       	cmpq	r_0038(%rip),%rsi
       	je  	sitm2
       	xorq	%rbx,%rbx
       	jmp 	arref
sitm2:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rcx
       	addq	$8,reg_cp(%rip)
       	jmp 	arref
	.align	2
	nop
s_lef:
       	call	acomp
       	decq	_rc_(%rip)
       	js  	call_126
       	decq	_rc_(%rip)
       	jns 	l_0214
       	movq	$118,_rc_(%rip)
       	jmp 	err_
l_0214:
       	decq	_rc_(%rip)
       	jns 	l_0215
       	movq	$119,_rc_(%rip)
       	jmp 	err_
l_0215:
       	decq	_rc_(%rip)
       	jns 	l_0216
       	jmp 	exnul
l_0216:
       	decq	_rc_(%rip)
       	jns 	l_0217
       	jmp 	exnul
l_0217:
       	decq	_rc_(%rip)
       	jns 	l_0218
       	jmp 	exfal
l_0218:
call_126:
	.align	2
	nop
s_len:
       	.data
r_0081:	.quad	p_len
       	.text
       	movq	r_0081(%rip),%rbx
       	.data
r_0082:	.quad	p_lnd
       	.text
       	movq	r_0082(%rip),%rcx
       	call	patin
       	decq	_rc_(%rip)
       	js  	call_127
       	decq	_rc_(%rip)
       	jns 	l_0219
       	movq	$120,_rc_(%rip)
       	jmp 	err_
l_0219:
       	decq	_rc_(%rip)
       	jns 	l_0220
       	movq	$121,_rc_(%rip)
       	jmp 	err_
l_0220:
call_127:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_leq:
       	call	lcomp
       	decq	_rc_(%rip)
       	js  	call_128
       	decq	_rc_(%rip)
       	jns 	l_0221
       	movq	$122,_rc_(%rip)
       	jmp 	err_
l_0221:
       	decq	_rc_(%rip)
       	jns 	l_0222
       	movq	$123,_rc_(%rip)
       	jmp 	err_
l_0222:
       	decq	_rc_(%rip)
       	jns 	l_0223
       	jmp 	exfal
l_0223:
       	decq	_rc_(%rip)
       	jns 	l_0224
       	jmp 	exnul
l_0224:
       	decq	_rc_(%rip)
       	jns 	l_0225
       	jmp 	exfal
l_0225:
call_128:
	.align	2
	nop
s_lge:
       	call	lcomp
       	decq	_rc_(%rip)
       	js  	call_129
       	decq	_rc_(%rip)
       	jns 	l_0226
       	movq	$124,_rc_(%rip)
       	jmp 	err_
l_0226:
       	decq	_rc_(%rip)
       	jns 	l_0227
       	movq	$125,_rc_(%rip)
       	jmp 	err_
l_0227:
       	decq	_rc_(%rip)
       	jns 	l_0228
       	jmp 	exfal
l_0228:
       	decq	_rc_(%rip)
       	jns 	l_0229
       	jmp 	exnul
l_0229:
       	decq	_rc_(%rip)
       	jns 	l_0230
       	jmp 	exnul
l_0230:
call_129:
	.align	2
	nop
s_lgt:
       	call	lcomp
       	decq	_rc_(%rip)
       	js  	call_130
       	decq	_rc_(%rip)
       	jns 	l_0231
       	movq	$126,_rc_(%rip)
       	jmp 	err_
l_0231:
       	decq	_rc_(%rip)
       	jns 	l_0232
       	movq	$127,_rc_(%rip)
       	jmp 	err_
l_0232:
       	decq	_rc_(%rip)
       	jns 	l_0233
       	jmp 	exfal
l_0233:
       	decq	_rc_(%rip)
       	jns 	l_0234
       	jmp 	exfal
l_0234:
       	decq	_rc_(%rip)
       	jns 	l_0235
       	jmp 	exnul
l_0235:
call_130:
	.align	2
	nop
s_lle:
       	call	lcomp
       	decq	_rc_(%rip)
       	js  	call_131
       	decq	_rc_(%rip)
       	jns 	l_0236
       	movq	$128,_rc_(%rip)
       	jmp 	err_
l_0236:
       	decq	_rc_(%rip)
       	jns 	l_0237
       	movq	$129,_rc_(%rip)
       	jmp 	err_
l_0237:
       	decq	_rc_(%rip)
       	jns 	l_0238
       	jmp 	exnul
l_0238:
       	decq	_rc_(%rip)
       	jns 	l_0239
       	jmp 	exnul
l_0239:
       	decq	_rc_(%rip)
       	jns 	l_0240
       	jmp 	exfal
l_0240:
call_131:
	.align	2
	nop
s_llt:
       	call	lcomp
       	decq	_rc_(%rip)
       	js  	call_132
       	decq	_rc_(%rip)
       	jns 	l_0241
       	movq	$130,_rc_(%rip)
       	jmp 	err_
l_0241:
       	decq	_rc_(%rip)
       	jns 	l_0242
       	movq	$131,_rc_(%rip)
       	jmp 	err_
l_0242:
       	decq	_rc_(%rip)
       	jns 	l_0243
       	jmp 	exnul
l_0243:
       	decq	_rc_(%rip)
       	jns 	l_0244
       	jmp 	exfal
l_0244:
       	decq	_rc_(%rip)
       	jns 	l_0245
       	jmp 	exfal
l_0245:
call_132:
	.align	2
	nop
s_lne:
       	call	lcomp
       	decq	_rc_(%rip)
       	js  	call_133
       	decq	_rc_(%rip)
       	jns 	l_0246
       	movq	$132,_rc_(%rip)
       	jmp 	err_
l_0246:
       	decq	_rc_(%rip)
       	jns 	l_0247
       	movq	$133,_rc_(%rip)
       	jmp 	err_
l_0247:
       	decq	_rc_(%rip)
       	jns 	l_0248
       	jmp 	exnul
l_0248:
       	decq	_rc_(%rip)
       	jns 	l_0249
       	jmp 	exfal
l_0249:
       	decq	_rc_(%rip)
       	jns 	l_0250
       	jmp 	exnul
l_0250:
call_133:
	.align	2
	nop
s_lnf:
       	popq	%rdi
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_134
       	decq	_rc_(%rip)
       	jns 	l_0251
       	movq	$306,_rc_(%rip)
       	jmp 	err_
l_0251:
call_134:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	slnf1
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jl  	slnf2
       	call	M_lnf
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
slnf1:
       	movq	$307,_rc_(%rip)
       	jmp 	err_
slnf2:
       	movq	$315,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_loc:
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_135
       	decq	_rc_(%rip)
       	jns 	l_0252
       	movq	$134,_rc_(%rip)
       	jmp 	err_
l_0252:
       	decq	_rc_(%rip)
       	jns 	l_0253
       	jmp 	exfal
l_0253:
call_135:
       	movq	%rdi,%rbx
       	popq	%rdi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_136
       	decq	_rc_(%rip)
       	jns 	l_0254
       	jmp 	sloc1
l_0254:
call_136:
       	movq	40(%rdi),%rdi
       	movq	r_0064(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	sloc1
       	orq 	%rbx,%rbx
       	jz  	exfal
       	cmpq	32(%rdi),%rbx
       	ja  	exfal
       	addq	8(%rdi),%rbx
       	salq	$3,%rbx
       	addq	%rbx,%rdi
       	movq	56(%rdi),%rdi
       	jmp 	exvnm
sloc1:
       	movq	$135,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_lod:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_137
       	decq	_rc_(%rip)
       	jns 	l_0255
       	movq	$136,_rc_(%rip)
       	jmp 	err_
l_0255:
call_137:
       	movq	%rdi,%rsi
       	call	xscni
       	decq	_rc_(%rip)
       	js  	call_138
       	decq	_rc_(%rip)
       	jns 	l_0256
       	movq	$137,_rc_(%rip)
       	jmp 	err_
l_0256:
       	decq	_rc_(%rip)
       	jns 	l_0257
       	movq	$138,_rc_(%rip)
       	jmp 	err_
l_0257:
call_138:
       	pushq	%rsi
       	movq	$40,%rdx
       	movq	%rdx,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	pushq	%rdi
       	orq 	%rcx,%rcx
       	jnz 	slod1
       	movq	$139,_rc_(%rip)
       	jmp 	err_
slod1:
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_139
       	decq	_rc_(%rip)
       	jns 	l_0258
       	movq	$140,_rc_(%rip)
       	jmp 	err_
l_0258:
call_139:
       	movq	%rdi,lodfn(%rip)
       	xorq	%rax,%rax
       	movq	%rax,lodna(%rip)
slod2:
       	movq	$41,%rdx
       	movq	$44,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	incq	lodna(%rip)
       	orq 	%rcx,%rcx
       	jnz 	slod3
       	movq	$141,_rc_(%rip)
       	jmp 	err_
slod3:
       	movq	%rcx,%rbx
       	movq	8(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jz  	sld3a
       	call	flstg
sld3a:
       	movq	%rbx,%rcx
       	pushq	%rdi
       	movq	$1,%rbx
       	.data
r_0083:	.quad	scstr
       	.text
       	movq	r_0083(%rip),%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_140
       	decq	_rc_(%rip)
       	jns 	l_0259
       	jmp 	slod4
l_0259:
call_140:
       	movq	(%rsp),%rdi
       	addq	%rbx,%rbx
       	.data
r_0084:	.quad	scint
       	.text
       	movq	r_0084(%rip),%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_141
       	decq	_rc_(%rip)
       	jns 	l_0260
       	jmp 	slod4
l_0260:
call_141:
       	movq	(%rsp),%rdi
       	incq	%rbx
       	.data
r_0085:	.quad	screa
       	.text
       	movq	r_0085(%rip),%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_142
       	decq	_rc_(%rip)
       	jns 	l_0261
       	jmp 	slod4
l_0261:
call_142:
       	movq	(%rsp),%rdi
       	incq	%rbx
       	.data
r_0086:	.quad	scfil
       	.text
       	movq	r_0086(%rip),%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_143
       	decq	_rc_(%rip)
       	jns 	l_0262
       	jmp 	slod4
l_0262:
call_143:
       	xorq	%rbx,%rbx
slod4:
       	movq	%rbx,(%rsp)
       	cmpq	$2,%rcx
       	je  	slod2
       	orq 	%rcx,%rcx
       	jz  	slod5
       	movq	mxlen(%rip),%rdx
       	movq	%rdx,%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	xscan
       	xorq	%rcx,%rcx
       	jmp 	slod3
slod5:
       	movq	lodna(%rip),%rcx
       	movq	%rcx,%rdx
       	salq	$3,%rcx
       	addq	$56,%rcx
       	call	alloc
       	.data
r_0087:	.quad	b_efc
       	.text
       	movq	r_0087(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rdx,8(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,24(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,32(%rdi)
       	popq	48(%rdi)
       	movq	lodfn(%rip),%rax
       	movq	%rax,40(%rdi)
       	movq	%rcx,16(%rdi)
       	movq	%rdi,%rbx
       	addq	%rcx,%rdi
slod6:
       	subq	$8,%rdi
       	popq	(%rdi)
       	decq	%rdx
       	jnz 	slod6
       	popq	%rdi
       	movq	8(%rdi),%rcx
       	call	flstg
       	movq	(%rsp),%rsi
       	movq	%rbx,(%rsp)
       	call	sysld
       	decq	_rc_(%rip)
       	js  	call_144
       	decq	_rc_(%rip)
       	jns 	l_0263
       	movq	$142,_rc_(%rip)
       	jmp 	err_
l_0263:
       	decq	_rc_(%rip)
       	jns 	l_0264
       	movq	$143,_rc_(%rip)
       	jmp 	err_
l_0264:
       	decq	_rc_(%rip)
       	jns 	l_0265
       	movq	$328,_rc_(%rip)
       	jmp 	err_
l_0265:
call_144:
       	popq	%rsi
       	movq	%rdi,32(%rsi)
       	movq	lodfn(%rip),%rdi
       	call	dffnc
       	jmp 	exnul
	.align	2
	nop
s_lpd:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_145
       	decq	_rc_(%rip)
       	jns 	l_0266
       	movq	$144,_rc_(%rip)
       	jmp 	err_
l_0266:
call_145:
       	addq	$16,%rdi
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_146
       	decq	_rc_(%rip)
       	jns 	l_0267
       	movq	$145,_rc_(%rip)
       	jmp 	err_
l_0267:
       	decq	_rc_(%rip)
       	jns 	l_0268
       	jmp 	slpd4
l_0268:
call_146:
slpd1:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_147
       	decq	_rc_(%rip)
       	jns 	l_0269
       	movq	$146,_rc_(%rip)
       	jmp 	err_
l_0269:
call_147:
       	cmpq	%rdx,%rcx
       	jae 	exixr
       	movq	%rdi,%rsi
       	movq	%rdx,%rcx
       	call	alocs
       	pushq	%rdi
       	movq	8(%rsi),%rcx
       	subq	%rcx,%rdx
       	addq	$16,%rdi
slpd2:
       	movb	%bl,(%rdi)
       	incq	%rdi
       	decq	%rdx
       	jnz 	slpd2
       	orq 	%rcx,%rcx
       	jz  	slpd3
       	addq	$16,%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	xorq	%rsi,%rsi
slpd3:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
slpd4:
       	xorq	%rdx,%rdx
       	jmp 	slpd1
	.align	2
	nop
s_ltf:
       	call	acomp
       	decq	_rc_(%rip)
       	js  	call_148
       	decq	_rc_(%rip)
       	jns 	l_0270
       	movq	$147,_rc_(%rip)
       	jmp 	err_
l_0270:
       	decq	_rc_(%rip)
       	jns 	l_0271
       	movq	$148,_rc_(%rip)
       	jmp 	err_
l_0271:
       	decq	_rc_(%rip)
       	jns 	l_0272
       	jmp 	exnul
l_0272:
       	decq	_rc_(%rip)
       	jns 	l_0273
       	jmp 	exfal
l_0273:
       	decq	_rc_(%rip)
       	jns 	l_0274
       	jmp 	exfal
l_0274:
call_148:
	.align	2
	nop
s_nef:
       	call	acomp
       	decq	_rc_(%rip)
       	js  	call_149
       	decq	_rc_(%rip)
       	jns 	l_0275
       	movq	$149,_rc_(%rip)
       	jmp 	err_
l_0275:
       	decq	_rc_(%rip)
       	jns 	l_0276
       	movq	$150,_rc_(%rip)
       	jmp 	err_
l_0276:
       	decq	_rc_(%rip)
       	jns 	l_0277
       	jmp 	exnul
l_0277:
       	decq	_rc_(%rip)
       	jns 	l_0278
       	jmp 	exfal
l_0278:
       	decq	_rc_(%rip)
       	jns 	l_0279
       	jmp 	exnul
l_0279:
call_149:
	.align	2
	nop
s_nay:
       	.data
r_0088:	.quad	p_nas
       	.text
       	movq	r_0088(%rip),%rbx
       	.data
r_0089:	.quad	p_nay
       	.text
       	movq	r_0089(%rip),%rsi
       	.data
r_0090:	.quad	p_nad
       	.text
       	movq	r_0090(%rip),%rdx
       	call	patst
       	decq	_rc_(%rip)
       	js  	call_150
       	decq	_rc_(%rip)
       	jns 	l_0280
       	movq	$151,_rc_(%rip)
       	jmp 	err_
l_0280:
call_150:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_ops:
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_151
       	decq	_rc_(%rip)
       	jns 	l_0281
       	movq	$152,_rc_(%rip)
       	jmp 	err_
l_0281:
       	decq	_rc_(%rip)
       	jns 	l_0282
       	movq	$153,_rc_(%rip)
       	jmp 	err_
l_0282:
call_151:
       	movq	%rdx,%rbx
       	popq	%rdi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_152
       	decq	_rc_(%rip)
       	jns 	l_0283
       	movq	$154,_rc_(%rip)
       	jmp 	err_
l_0283:
call_152:
       	movq	40(%rdi),%rsi
       	orq 	%rbx,%rbx
       	jnz 	sops2
       	popq	%rdi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_153
       	decq	_rc_(%rip)
       	jns 	l_0284
       	movq	$155,_rc_(%rip)
       	jmp 	err_
l_0284:
call_153:
sops1:
       	call	dffnc
       	jmp 	exnul
sops2:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_154
       	decq	_rc_(%rip)
       	jns 	l_0285
       	jmp 	sops5
l_0285:
call_154:
       	cmpq	$1,%rcx
       	jne 	sops5
       	addq	$16,%rdi
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	.data
r_0091:	.quad	r_uub
       	.text
       	movq	r_0091(%rip),%rcx
       	.data
r_0092:	.quad	opnsu
       	.text
       	movq	r_0092(%rip),%rdi
       	addq	$5,%rbx
       	cmpq	$6,%rbx
       	je  	sops3
       	.data
r_0093:	.quad	r_uba
       	.text
       	movq	r_0093(%rip),%rcx
       	.data
r_0094:	.quad	opsnb
       	.text
       	movq	r_0094(%rip),%rdi
       	movq	$5,%rbx
sops3:
sops4:
       	cmpq	(%rdi),%rdx
       	je  	sops6
       	addq	$8,%rcx
       	addq	$8,%rdi
       	decq	%rbx
       	jnz 	sops4
sops5:
       	movq	$156,_rc_(%rip)
       	jmp 	err_
sops6:
       	movq	%rcx,%rdi
       	subq	$40,%rdi
       	jmp 	sops1
	.align	2
	nop
s_oup:
       	movq	$3,%rbx
       	call	ioput
       	decq	_rc_(%rip)
       	js  	call_155
       	decq	_rc_(%rip)
       	jns 	l_0286
       	movq	$157,_rc_(%rip)
       	jmp 	err_
l_0286:
       	decq	_rc_(%rip)
       	jns 	l_0287
       	movq	$158,_rc_(%rip)
       	jmp 	err_
l_0287:
       	decq	_rc_(%rip)
       	jns 	l_0288
       	movq	$159,_rc_(%rip)
       	jmp 	err_
l_0288:
       	decq	_rc_(%rip)
       	jns 	l_0289
       	movq	$160,_rc_(%rip)
       	jmp 	err_
l_0289:
       	decq	_rc_(%rip)
       	jns 	l_0290
       	jmp 	exfal
l_0290:
       	decq	_rc_(%rip)
       	jns 	l_0291
       	movq	$161,_rc_(%rip)
       	jmp 	err_
l_0291:
       	decq	_rc_(%rip)
       	jns 	l_0292
       	movq	$290,_rc_(%rip)
       	jmp 	err_
l_0292:
call_155:
       	jmp 	exnul
	.align	2
	nop
s_pos:
       	.data
r_0095:	.quad	p_pos
       	.text
       	movq	r_0095(%rip),%rbx
       	.data
r_0096:	.quad	p_psd
       	.text
       	movq	r_0096(%rip),%rcx
       	call	patin
       	decq	_rc_(%rip)
       	js  	call_156
       	decq	_rc_(%rip)
       	jns 	l_0293
       	movq	$162,_rc_(%rip)
       	jmp 	err_
l_0293:
       	decq	_rc_(%rip)
       	jns 	l_0294
       	movq	$163,_rc_(%rip)
       	jmp 	err_
l_0294:
call_156:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_pro:
       	popq	%rdi
       	movq	16(%rdi),%rbx
       	shrq	$3,%rbx
       	movq	(%rdi),%rcx
       	cmpq	r_0065(%rip),%rcx
       	je  	spro4
       	cmpq	r_0022(%rip),%rcx
       	je  	spro1
       	cmpq	r_0021(%rip),%rcx
       	je  	spro3
       	movq	$164,_rc_(%rip)
       	jmp 	err_
spro1:
       	subq	$4,%rbx
spro2:
       	movq	%rbx,%r12
       	jmp 	exint
spro3:
       	subq	$3,%rbx
       	jmp 	spro2
spro4:
       	addq	24(%rdi),%rdi
       	movq	(%rdi),%rdi
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_rmd:
       	call	arith
       	decq	_rc_(%rip)
       	js  	call_157
       	decq	_rc_(%rip)
       	jns 	l_0295
       	movq	$166,_rc_(%rip)
       	jmp 	err_
l_0295:
       	decq	_rc_(%rip)
       	jns 	l_0296
       	movq	$165,_rc_(%rip)
       	jmp 	err_
l_0296:
       	decq	_rc_(%rip)
       	jns 	l_0297
       	jmp 	srm06
l_0297:
call_157:
       	xorq	%rbx,%rbx
       	movq	8(%rdi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jge 	srm01
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
srm01:
       	movq	8(%rsi),%rax
       	call	M_rmi
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	srm05
       	orq 	%rbx,%rbx
       	jz  	srm03
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jle 	exint
srm02:
       	negq	%r12
       	jmp 	exint
srm03:
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	srm02
       	jmp 	exint
srm04:
       	movq	$166,_rc_(%rip)
       	jmp 	err_
srm05:
       	movq	$167,_rc_(%rip)
       	jmp 	err_
srm06:
       	xorq	%rbx,%rbx
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jge 	srm07
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
srm07:
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_dvr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	srm10
       	call	M_chp
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	orq 	%rbx,%rbx
       	jz  	srm09
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jle 	exrea
srm08:
       	call	M_ngr
       	jmp 	exrea
srm09:
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jl  	srm08
       	jmp 	exrea
srm10:
       	movq	$312,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_rpl:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_158
       	decq	_rc_(%rip)
       	jns 	l_0298
       	movq	$168,_rc_(%rip)
       	jmp 	err_
l_0298:
call_158:
       	movq	%rdi,%rsi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_159
       	decq	_rc_(%rip)
       	jns 	l_0299
       	movq	$169,_rc_(%rip)
       	jmp 	err_
l_0299:
call_159:
       	cmpq	r_ra2(%rip),%rdi
       	jne 	srpl1
       	cmpq	r_ra3(%rip),%rsi
       	je  	srpl4
srpl1:
       	movq	8(%rsi),%rbx
       	cmpq	%rbx,%rcx
       	jne 	srpl6
       	cmpq	kvalp(%rip),%rdi
       	je  	srpl5
       	orq 	%rbx,%rbx
       	jz  	srpl6
       	movq	%rsi,r_ra3(%rip)
       	movq	%rdi,r_ra2(%rip)
       	movq	kvalp(%rip),%rsi
       	movq	8(%rsi),%rcx
       	movq	r_rpt(%rip),%rdi
       	orq 	%rdi,%rdi
       	jnz 	srpl2
       	call	alocs
       	movq	%rdx,%rcx
       	movq	%rdi,r_rpt(%rip)
srpl2:
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	r_ra2(%rip),%rsi
       	xorq	%rdx,%rdx
       	movq	r_ra3(%rip),%rdi
       	addq	$16,%rdi
srpl3:
       	movq	r_ra2(%rip),%rsi
       	leaq	16(%rsi,%rdx),%rsi
       	incq	%rdx
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	movq	r_rpt(%rip),%rsi
       	leaq	16(%rsi,%rcx),%rsi
       	xorq	%rcx,%rcx
       	movb	(%rdi),%cl
       	incq	%rdi
       	movb	%cl,(%rsi)
       	decq	%rbx
       	jnz 	srpl3
srpl4:
       	movq	r_rpt(%rip),%rsi
srpl5:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_160
       	decq	_rc_(%rip)
       	jns 	l_0300
       	movq	$170,_rc_(%rip)
       	jmp 	err_
l_0300:
call_160:
       	orq 	%rcx,%rcx
       	jz  	exnul
       	pushq	%rsi
       	movq	%rdi,%rsi
       	movq	%rcx,%rdx
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	call	alloc
       	movq	%rdi,%rbx
       	shrq	$3,%rcx
       	rep 	movsq
       	popq	%rdi
       	addq	$16,%rdi
       	movq	%rbx,%rsi
       	addq	$16,%rsi
       	movq	%rdx,%rcx
       	xchgq	%rdi,%rsi
l_0301:	movzbq	(%rdi),%rax
       	movb	(%rsi,%rax),%al
       	stosb
       	decq	%rcx
       	jnz 	l_0301
       	xorq	%rsi,%rsi
       	xorq	%rdi,%rdi
srpl8:
       	pushq	%rbx
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
srpl6:
       	movq	$171,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_rew:
       	call	iofcb
       	decq	_rc_(%rip)
       	js  	call_161
       	decq	_rc_(%rip)
       	jns 	l_0302
       	movq	$172,_rc_(%rip)
       	jmp 	err_
l_0302:
       	decq	_rc_(%rip)
       	jns 	l_0303
       	movq	$173,_rc_(%rip)
       	jmp 	err_
l_0303:
       	decq	_rc_(%rip)
       	jns 	l_0304
       	movq	$174,_rc_(%rip)
       	jmp 	err_
l_0304:
call_161:
       	call	sysrw
       	decq	_rc_(%rip)
       	js  	call_162
       	decq	_rc_(%rip)
       	jns 	l_0305
       	movq	$174,_rc_(%rip)
       	jmp 	err_
l_0305:
       	decq	_rc_(%rip)
       	jns 	l_0306
       	movq	$175,_rc_(%rip)
       	jmp 	err_
l_0306:
       	decq	_rc_(%rip)
       	jns 	l_0307
       	movq	$176,_rc_(%rip)
       	jmp 	err_
l_0307:
call_162:
       	jmp 	exnul
	.align	2
	nop
s_rvs:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_163
       	decq	_rc_(%rip)
       	jns 	l_0308
       	movq	$177,_rc_(%rip)
       	jmp 	err_
l_0308:
call_163:
       	orq 	%rcx,%rcx
       	jz  	exixr
       	movq	%rdi,%rsi
       	call	alocs
       	pushq	%rdi
       	addq	$16,%rdi
       	leaq	16(%rsi,%rdx),%rsi
srvs1:
       	xorq	%rbx,%rbx
       	decq	%rsi
       	movb	(%rsi),%bl
       	movb	%bl,(%rdi)
       	incq	%rdi
       	decq	%rdx
       	jnz 	srvs1
srvs4:
       	xorq	%rsi,%rsi
srvs2:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_rpd:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_164
       	decq	_rc_(%rip)
       	jns 	l_0309
       	movq	$178,_rc_(%rip)
       	jmp 	err_
l_0309:
call_164:
       	addq	$16,%rdi
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_165
       	decq	_rc_(%rip)
       	jns 	l_0310
       	movq	$179,_rc_(%rip)
       	jmp 	err_
l_0310:
       	decq	_rc_(%rip)
       	jns 	l_0311
       	jmp 	srpd3
l_0311:
call_165:
srpd1:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_166
       	decq	_rc_(%rip)
       	jns 	l_0312
       	movq	$180,_rc_(%rip)
       	jmp 	err_
l_0312:
call_166:
       	cmpq	%rdx,%rcx
       	jae 	exixr
       	movq	%rdi,%rsi
       	movq	%rdx,%rcx
       	call	alocs
       	pushq	%rdi
       	movq	8(%rsi),%rcx
       	subq	%rcx,%rdx
       	addq	$16,%rdi
       	orq 	%rcx,%rcx
       	jz  	srpd2
       	addq	$16,%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	xorq	%rsi,%rsi
srpd2:
       	movb	%bl,(%rdi)
       	incq	%rdi
       	decq	%rdx
       	jnz 	srpd2
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
srpd3:
       	xorq	%rdx,%rdx
       	jmp 	srpd1
	.align	2
	nop
s_rtb:
       	.data
r_0097:	.quad	p_rtb
       	.text
       	movq	r_0097(%rip),%rbx
       	.data
r_0098:	.quad	p_rtd
       	.text
       	movq	r_0098(%rip),%rcx
       	call	patin
       	decq	_rc_(%rip)
       	js  	call_167
       	decq	_rc_(%rip)
       	jns 	l_0313
       	movq	$181,_rc_(%rip)
       	jmp 	err_
l_0313:
       	decq	_rc_(%rip)
       	jns 	l_0314
       	movq	$182,_rc_(%rip)
       	jmp 	err_
l_0314:
call_167:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_set:
       	popq	r_io2(%rip)
       	popq	r_io1(%rip)
       	call	iofcb
       	decq	_rc_(%rip)
       	js  	call_168
       	decq	_rc_(%rip)
       	jns 	l_0315
       	movq	$291,_rc_(%rip)
       	jmp 	err_
l_0315:
       	decq	_rc_(%rip)
       	jns 	l_0316
       	movq	$292,_rc_(%rip)
       	jmp 	err_
l_0316:
       	decq	_rc_(%rip)
       	jns 	l_0317
       	movq	$295,_rc_(%rip)
       	jmp 	err_
l_0317:
call_168:
       	movq	r_io1(%rip),%rbx
       	movq	r_io2(%rip),%rdx
       	call	sysst
       	decq	_rc_(%rip)
       	jns 	l_0318
       	movq	$293,_rc_(%rip)
       	jmp 	err_
l_0318:
       	decq	_rc_(%rip)
       	jns 	l_0319
       	movq	$294,_rc_(%rip)
       	jmp 	err_
l_0319:
       	decq	_rc_(%rip)
       	jns 	l_0320
       	movq	$295,_rc_(%rip)
       	jmp 	err_
l_0320:
       	decq	_rc_(%rip)
       	jns 	l_0321
       	movq	$296,_rc_(%rip)
       	jmp 	err_
l_0321:
       	decq	_rc_(%rip)
       	jns 	l_0322
       	movq	$297,_rc_(%rip)
       	jmp 	err_
l_0322:
       	jmp 	exint
	.align	2
	nop
s_tab:
       	.data
r_0099:	.quad	p_tab
       	.text
       	movq	r_0099(%rip),%rbx
       	.data
r_0100:	.quad	p_tbd
       	.text
       	movq	r_0100(%rip),%rcx
       	call	patin
       	decq	_rc_(%rip)
       	js  	call_169
       	decq	_rc_(%rip)
       	jns 	l_0323
       	movq	$183,_rc_(%rip)
       	jmp 	err_
l_0323:
       	decq	_rc_(%rip)
       	jns 	l_0324
       	movq	$184,_rc_(%rip)
       	jmp 	err_
l_0324:
call_169:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_rps:
       	.data
r_0101:	.quad	p_rps
       	.text
       	movq	r_0101(%rip),%rbx
       	.data
r_0102:	.quad	p_rpd
       	.text
       	movq	r_0102(%rip),%rcx
       	call	patin
       	decq	_rc_(%rip)
       	js  	call_170
       	decq	_rc_(%rip)
       	jns 	l_0325
       	movq	$185,_rc_(%rip)
       	jmp 	err_
l_0325:
       	decq	_rc_(%rip)
       	jns 	l_0326
       	movq	$186,_rc_(%rip)
       	jmp 	err_
l_0326:
call_170:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_rsr:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	sorta
       	decq	_rc_(%rip)
       	js  	call_171
       	decq	_rc_(%rip)
       	jns 	l_0327
       	jmp 	exfal
l_0327:
call_171:
       	jmp 	exsid
	.align	2
	nop
s_stx:
       	popq	%rdi
       	movq	stxvr(%rip),%rcx
       	xorq	%rsi,%rsi
       	cmpq	r_0012(%rip),%rdi
       	je  	sstx1
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_172
       	decq	_rc_(%rip)
       	jns 	l_0328
       	jmp 	sstx2
l_0328:
call_172:
       	movq	32(%rdi),%rsi
       	cmpq	r_0040(%rip),%rsi
       	je  	sstx2
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	sstx1
       	movq	16(%rsi),%rsi
sstx1:
       	movq	%rdi,stxvr(%rip)
       	movq	%rsi,r_sxc(%rip)
       	cmpq	r_0012(%rip),%rcx
       	je  	exnul
       	movq	%rcx,%rdi
       	jmp 	exvnm
sstx2:
       	movq	$187,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_sin:
       	popq	%rdi
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_173
       	decq	_rc_(%rip)
       	jns 	l_0329
       	movq	$308,_rc_(%rip)
       	jmp 	err_
l_0329:
call_173:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_sin
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
       	movq	$323,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_sqr:
       	popq	%rdi
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_174
       	decq	_rc_(%rip)
       	jns 	l_0330
       	movq	$313,_rc_(%rip)
       	jmp 	err_
l_0330:
call_174:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jl  	ssqr1
       	call	M_sqr
       	jmp 	exrea
ssqr1:
       	movq	$314,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_srt:
       	xorq	%rcx,%rcx
       	call	sorta
       	decq	_rc_(%rip)
       	js  	call_175
       	decq	_rc_(%rip)
       	jns 	l_0331
       	jmp 	exfal
l_0331:
call_175:
       	jmp 	exsid
	.align	2
	nop
s_spn:
       	.data
r_0103:	.quad	p_sps
       	.text
       	movq	r_0103(%rip),%rbx
       	.data
r_0104:	.quad	p_spn
       	.text
       	movq	r_0104(%rip),%rsi
       	.data
r_0105:	.quad	p_spd
       	.text
       	movq	r_0105(%rip),%rdx
       	call	patst
       	decq	_rc_(%rip)
       	js  	call_176
       	decq	_rc_(%rip)
       	jns 	l_0332
       	movq	$188,_rc_(%rip)
       	jmp 	err_
l_0332:
call_176:
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_si_:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_177
       	decq	_rc_(%rip)
       	jns 	l_0333
       	movq	$189,_rc_(%rip)
       	jmp 	err_
l_0333:
call_177:
       	movq	%rcx,%r12
       	jmp 	exint
	.align	2
	nop
s_stt:
       	xorq	%rsi,%rsi
       	call	trace
       	decq	_rc_(%rip)
       	js  	call_178
       	decq	_rc_(%rip)
       	jns 	l_0334
       	movq	$190,_rc_(%rip)
       	jmp 	err_
l_0334:
       	decq	_rc_(%rip)
       	jns 	l_0335
       	movq	$191,_rc_(%rip)
       	jmp 	err_
l_0335:
call_178:
       	jmp 	exnul
	.align	2
	nop
s_sub:
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_179
       	decq	_rc_(%rip)
       	jns 	l_0336
       	movq	$192,_rc_(%rip)
       	jmp 	err_
l_0336:
       	decq	_rc_(%rip)
       	jns 	l_0337
       	jmp 	exfal
l_0337:
call_179:
       	movq	%rdi,sbssv(%rip)
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_180
       	decq	_rc_(%rip)
       	jns 	l_0338
       	movq	$193,_rc_(%rip)
       	jmp 	err_
l_0338:
       	decq	_rc_(%rip)
       	jns 	l_0339
       	jmp 	exfal
l_0339:
call_180:
       	movq	%rdi,%rdx
       	orq 	%rdx,%rdx
       	jz  	exfal
       	decq	%rdx
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_181
       	decq	_rc_(%rip)
       	jns 	l_0340
       	movq	$194,_rc_(%rip)
       	jmp 	err_
l_0340:
call_181:
       	movq	%rdx,%rbx
       	movq	sbssv(%rip),%rdx
       	orq 	%rdx,%rdx
       	jnz 	ssub2
       	movq	%rcx,%rdx
       	cmpq	%rdx,%rbx
       	ja  	exfal
       	subq	%rbx,%rdx
ssub2:
       	movq	%rcx,%rsi
       	movq	%rdx,%rcx
       	addq	%rbx,%rdx
       	cmpq	%rsi,%rdx
       	ja  	exfal
       	movq	%rdi,%rsi
       	call	sbstr
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_tbl:
       	popq	%rsi
       	addq	$8,%rsp
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_182
       	decq	_rc_(%rip)
       	jns 	l_0341
       	movq	$195,_rc_(%rip)
       	jmp 	err_
l_0341:
       	decq	_rc_(%rip)
       	jns 	l_0342
       	movq	$196,_rc_(%rip)
       	jmp 	err_
l_0342:
call_182:
       	orq 	%rdx,%rdx
       	jnz 	stbl1
       	movq	$11,%rdx
stbl1:
       	call	tmake
       	jmp 	exsid
	.align	2
	nop
s_tan:
       	popq	%rdi
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_183
       	decq	_rc_(%rip)
       	jns 	l_0343
       	movq	$309,_rc_(%rip)
       	jmp 	err_
l_0343:
call_183:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_tan
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	exrea
       	movq	$310,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_tim:
       	call	systm
       	subq	timsx(%rip),%r12
       	seto	reg_fl(%rip)
       	jmp 	exint
	.align	2
	nop
s_tra:
       	movq	r_0012(%rip),%rax
       	cmpq	%rax,24(%rsp)
       	je  	str02
       	popq	%rdi
       	xorq	%rsi,%rsi
       	cmpq	r_0012(%rip),%rdi
       	je  	str01
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_184
       	decq	_rc_(%rip)
       	jns 	l_0344
       	jmp 	str03
l_0344:
call_184:
       	movq	%rdi,%rsi
str01:
       	popq	%rdi
       	xorq	%rbx,%rbx
       	call	trbld
       	movq	%rdi,%rsi
       	call	trace
       	decq	_rc_(%rip)
       	js  	call_185
       	decq	_rc_(%rip)
       	jns 	l_0345
       	movq	$198,_rc_(%rip)
       	jmp 	err_
l_0345:
       	decq	_rc_(%rip)
       	jns 	l_0346
       	movq	$199,_rc_(%rip)
       	jmp 	err_
l_0346:
call_185:
       	jmp 	exnul
str02:
       	call	systt
       	addq	$32,%rsp
       	jmp 	exnul
str03:
       	movq	$197,_rc_(%rip)
       	jmp 	err_
	.align	2
	nop
s_trm:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_186
       	decq	_rc_(%rip)
       	jns 	l_0347
       	movq	$200,_rc_(%rip)
       	jmp 	err_
l_0347:
call_186:
       	orq 	%rcx,%rcx
       	jz  	exnul
       	movq	%rdi,%rsi
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	call	alloc
       	movq	%rdi,%rbx
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	%rbx,%rdi
       	call	trimr
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
	.align	2
	nop
s_unl:
       	popq	%rdi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_187
       	decq	_rc_(%rip)
       	jns 	l_0348
       	movq	$201,_rc_(%rip)
       	jmp 	err_
l_0348:
call_187:
       	.data
r_0106:	.quad	stndf
       	.text
       	movq	r_0106(%rip),%rsi
       	call	dffnc
       	jmp 	exnul
arref:
       	movq	%rdi,%rcx
       	movq	%rsp,%rsi
       	salq	$3,%rdi
       	addq	%rdi,%rsi
       	addq	$8,%rsi
       	movq	%rsi,arfxs(%rip)
       	subq	$8,%rsi
       	movq	(%rsi),%rdi
       	movq	%rdi,r_arf(%rip)
       	movq	%rsi,%rdi
       	movq	r_arf(%rip),%rsi
       	movq	(%rsi),%rdx
       	cmpq	r_0065(%rip),%rdx
       	je  	arf01
       	cmpq	r_0021(%rip),%rdx
       	je  	arf07
       	cmpq	r_0022(%rip),%rdx
       	je  	arf10
       	movq	$235,_rc_(%rip)
       	jmp 	err_
arf01:
       	cmpq	32(%rsi),%rcx
       	jne 	arf09
       	movq	intv0(%rip),%r12
       	movq	%rdi,%rsi
       	xorq	%rcx,%rcx
       	jmp 	arf03
arf02:
       	imulq	64(%rdi),%r12
       	seto	reg_fl(%rip)
arf03:
       	subq	$8,%rsi
       	movq	(%rsi),%rdi
       	movq	%r12,arfsi(%rip)
       	movq	8(%rdi),%r12
       	movq	r_0023(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	arf04
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_188
       	decq	_rc_(%rip)
       	jns 	l_0349
       	jmp 	arf12
l_0349:
call_188:
       	movq	8(%rdi),%r12
arf04:
       	movq	r_arf(%rip),%rdi
       	addq	%rcx,%rdi
       	subq	40(%rdi),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	arf13
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	arf13
       	subq	48(%rdi),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jge 	arf13
       	addq	48(%rdi),%r12
       	seto	reg_fl(%rip)
       	addq	arfsi(%rip),%r12
       	seto	reg_fl(%rip)
       	addq	$16,%rcx
       	cmpq	%rsp,%rsi
       	jne 	arf02
       	movq	%r12,%rcx
       	salq	$3,%rcx
       	movq	r_arf(%rip),%rsi
       	addq	24(%rsi),%rcx
       	addq	$8,%rcx
       	orq 	%rbx,%rbx
       	jnz 	arf08
arf05:
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_189
       	decq	_rc_(%rip)
       	jns 	l_0350
       	jmp 	arf13
l_0350:
call_189:
arf06:
       	movq	arfxs(%rip),%rsp
       	xorq	%rax,%rax
       	movq	%rax,r_arf(%rip)
       	pushq	%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
arf07:
       	cmpq	$1,%rcx
       	jne 	arf09
       	movq	(%rsp),%rdi
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_190
       	decq	_rc_(%rip)
       	jns 	l_0351
       	jmp 	arf12
l_0351:
call_190:
       	movq	8(%rdi),%r12
       	subq	intv1(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	arf13
       	movq	%r12,%rcx
       	addq	$3,%rcx
       	salq	$3,%rcx
       	cmpq	16(%rsi),%rcx
       	jae 	arf13
       	orq 	%rbx,%rbx
       	jz  	arf05
arf08:
       	movq	arfxs(%rip),%rsp
       	xorq	%rax,%rax
       	movq	%rax,r_arf(%rip)
       	jmp 	exnam
arf09:
       	movq	$236,_rc_(%rip)
       	jmp 	err_
arf10:
       	cmpq	$1,%rcx
       	jne 	arf11
       	movq	(%rsp),%rdi
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_191
       	decq	_rc_(%rip)
       	jns 	l_0352
       	jmp 	arf13
l_0352:
call_191:
       	orq 	%rbx,%rbx
       	jnz 	arf08
       	jmp 	arf06
arf11:
       	movq	$237,_rc_(%rip)
       	jmp 	err_
arf12:
       	movq	$238,_rc_(%rip)
       	jmp 	err_
arf13:
       	xorq	%rax,%rax
       	movq	%rax,r_arf(%rip)
       	jmp 	exfal
cfunc:
       	cmpq	8(%rsi),%rcx
       	jb  	cfnc1
       	cmpq	8(%rsi),%rcx
       	je  	cfnc3
       	movq	%rcx,%rbx
       	subq	8(%rsi),%rbx
       	salq	$3,%rbx
       	addq	%rbx,%rsp
       	jmp 	cfnc3
cfnc1:
       	movq	8(%rsi),%rbx
       	cmpq	$999,%rbx
       	je  	cfnc3
       	subq	%rcx,%rbx
cfnc2:
       	pushq	r_0012(%rip)
       	decq	%rbx
       	jnz 	cfnc2
cfnc3:
       	jmp 	*(%rsi)
exfal:
       	movq	flptr(%rip),%rsp
       	movq	(%rsp),%rdi
       	addq	r_cod(%rip),%rdi
       	movq	%rdi,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
exint:
       	xorq	%rsi,%rsi
       	call	icbld
exixr:
       	pushq	%rdi
exits:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
exnam:
       	pushq	%rsi
       	pushq	%rcx
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
exnul:
       	pushq	r_0012(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
exrea:
       	xorq	%rsi,%rsi
       	call	rcbld
       	jmp 	exixr
exsid:
       	movq	curid(%rip),%rcx
       	cmpq	mxint(%rip),%rcx
       	jne 	exsi1
       	xorq	%rcx,%rcx
exsi1:
       	incq	%rcx
       	movq	%rcx,curid(%rip)
       	movq	%rcx,8(%rdi)
       	jmp 	exixr
exvnm:
       	movq	%rdi,%rsi
       	movq	$24,%rcx
       	call	alloc
       	movq	r_0033(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rsi,8(%rdi)
       	movq	$16,16(%rdi)
       	jmp 	exixr
flpop:
       	addq	$16,%rsp
failp:
       	popq	%rdi
       	popq	%rbx
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
indir:
       	popq	%rdi
       	movq	r_0033(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	indr2
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_192
       	decq	_rc_(%rip)
       	jns 	l_0353
       	movq	$239,_rc_(%rip)
       	jmp 	err_
l_0353:
call_192:
       	orq 	%rbx,%rbx
       	jz  	indr1
       	pushq	%rdi
       	pushq	$16
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
indr1:
       	jmp 	*(%rdi)
indr2:
       	movq	8(%rdi),%rsi
       	movq	16(%rdi),%rcx
       	orq 	%rbx,%rbx
       	jnz 	exnam
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_193
       	decq	_rc_(%rip)
       	jns 	l_0354
       	jmp 	exfal
l_0354:
call_193:
       	jmp 	exixr
match:
       	popq	%rdi
       	call	gtpat
       	decq	_rc_(%rip)
       	js  	call_194
       	decq	_rc_(%rip)
       	jns 	l_0355
       	movq	$240,_rc_(%rip)
       	jmp 	err_
l_0355:
call_194:
       	movq	%rdi,%rsi
       	orq 	%rbx,%rbx
       	jnz 	mtch1
       	movq	(%rsp),%rcx
       	pushq	%rsi
       	movq	16(%rsp),%rsi
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_195
       	decq	_rc_(%rip)
       	jns 	l_0356
       	jmp 	exfal
l_0356:
call_195:
       	movq	(%rsp),%rsi
       	movq	%rdi,(%rsp)
       	xorq	%rbx,%rbx
mtch1:
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_196
       	decq	_rc_(%rip)
       	jns 	l_0357
       	movq	$241,_rc_(%rip)
       	jmp 	err_
l_0357:
call_196:
       	pushq	%rbx
       	movq	%rdi,r_pms(%rip)
       	movq	%rcx,pmssl(%rip)
       	xorq	%rax,%rax
       	pushq	%rax
       	xorq	%rbx,%rbx
       	movq	%rsp,pmhbs(%rip)
       	xorq	%rax,%rax
       	movq	%rax,pmdfl(%rip)
       	movq	%rsi,%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,kvanc(%rip)
       	jnz 	mtch2
       	pushq	%rdi
       	pushq	r_0054(%rip)
       	jmp 	*(%rdi)
mtch2:
       	xorq	%rax,%rax
       	pushq	%rax
       	pushq	r_0046(%rip)
       	jmp 	*(%rdi)
retrn:
       	xorq	%rax,%rax
       	cmpq	%rax,kvfnc(%rip)
       	jnz 	rtn01
       	movq	$242,_rc_(%rip)
       	jmp 	err_
rtn01:
       	movq	flprt(%rip),%rsp
       	addq	$8,%rsp
       	popq	%rdi
       	popq	flptr(%rip)
       	popq	flprt(%rip)
       	popq	%rbx
       	popq	%rdx
       	addq	%rdx,%rbx
       	movq	%rbx,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	%rdx,r_cod(%rip)
       	decq	kvfnc(%rip)
       	movq	kvtra(%rip),%rbx
       	addq	kvftr(%rip),%rbx
       	orq 	%rbx,%rbx
       	jz  	rtn06
       	pushq	%rcx
       	pushq	%rdi
       	movq	%rcx,kvrtn(%rip)
       	movq	r_fnc(%rip),%rsi
       	call	ktrex
       	movq	24(%rdi),%rsi
       	xorq	%rax,%rax
       	cmpq	%rax,kvtra(%rip)
       	jz  	rtn02
       	movq	56(%rdi),%rdi
       	orq 	%rdi,%rdi
       	jz  	rtn02
       	decq	kvtra(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,32(%rdi)
       	jz  	rtn03
       	movq	$16,%rcx
       	movq	8(%rsp),%rax
       	movq	%rax,kvrtn(%rip)
       	call	trxeq
rtn02:
       	xorq	%rax,%rax
       	cmpq	%rax,kvftr(%rip)
       	jz  	rtn05
       	decq	kvftr(%rip)
rtn03:
       	call	prtsn
       	movq	8(%rsp),%rdi
       	call	prtst
       	movq	$32,%rcx
       	call	prtch
       	movq	0(%rsp),%rsi
       	movq	24(%rsi),%rsi
       	movq	$16,%rcx
       	cmpq	r_0056(%rip),%rdi
       	jne 	rtn04
       	call	prtnm
       	call	prtnl
       	jmp 	rtn05
rtn04:
       	call	prtnv
rtn05:
       	popq	%rdi
       	popq	%rcx
rtn06:
       	movq	%rcx,kvrtn(%rip)
       	movq	24(%rdi),%rsi
rtn07:
       	movq	%rsi,rtnbp(%rip)
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	rtn07
       	movq	%rsi,rtnfv(%rip)
       	popq	rtnsv(%rip)
       	popq	%rsi
       	orq 	%rsi,%rsi
       	jz  	rtn7c
       	xorq	%rax,%rax
       	cmpq	%rax,kvpfl(%rip)
       	jz  	rtn7c
       	call	prflu
       	cmpq	$2,kvpfl(%rip)
       	je  	rtn7a
       	movq	pfstm(%rip),%r12
       	subq	8(%rsi),%r12
       	seto	reg_fl(%rip)
       	jmp 	rtn7b
rtn7a:
       	movq	8(%rsi),%r12
rtn7b:
       	movq	%r12,pfstm(%rip)
rtn7c:
       	movq	8(%rdi),%rbx
       	addq	32(%rdi),%rbx
       	orq 	%rbx,%rbx
       	jz  	rtn10
       	addq	16(%rdi),%rdi
rtn08:
       	subq	$8,%rdi
       	movq	(%rdi),%rsi
rtn09:
       	movq	%rsi,%rcx
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	rtn09
       	movq	%rcx,%rsi
       	popq	16(%rsi)
       	decq	%rbx
       	jnz 	rtn08
rtn10:
       	movq	rtnbp(%rip),%rsi
       	movq	rtnsv(%rip),%rax
       	movq	%rax,16(%rsi)
       	movq	rtnfv(%rip),%rdi
       	movq	r_cod(%rip),%rsi
       	movq	kvstn(%rip),%rax
       	movq	%rax,kvlst(%rip)
       	movq	8(%rsi),%rax
       	movq	%rax,kvstn(%rip)
       	movq	kvlin(%rip),%rax
       	movq	%rax,kvlln(%rip)
       	movq	16(%rsi),%rax
       	movq	%rax,kvlin(%rip)
       	movq	kvrtn(%rip),%rcx
       	cmpq	r_0058(%rip),%rcx
       	je  	exixr
       	cmpq	r_0056(%rip),%rcx
       	je  	exfal
       	movq	r_0033(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	rtn11
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_197
       	decq	_rc_(%rip)
       	jns 	l_0358
       	movq	$243,_rc_(%rip)
       	jmp 	err_
l_0358:
call_197:
       	movq	%rdi,%rsi
       	movq	$16,%rcx
       	jmp 	rtn12
rtn11:
       	movq	8(%rdi),%rsi
       	movq	16(%rdi),%rcx
rtn12:
       	movq	%rsi,%rdi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rbx
       	addq	$8,reg_cp(%rip)
       	movq	%rdi,%rsi
       	cmpq	r_0038(%rip),%rbx
       	je  	exnam
       	pushq	%rbx
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_198
       	decq	_rc_(%rip)
       	jns 	l_0359
       	jmp 	exfal
l_0359:
call_198:
       	movq	%rdi,%rsi
       	movq	(%rsp),%rdi
       	movq	%rsi,(%rsp)
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
stcov:
       	incq	errft(%rip)
       	movq	intvt(%rip),%r12
       	addq	kvstl(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,kvstl(%rip)
       	movq	intvt(%rip),%r12
       	movq	%r12,kvstc(%rip)
       	call	stgcc
       	movq	$244,_rc_(%rip)
       	jmp 	err_
stmgo:
       	movq	%rdi,r_cod(%rip)
       	decq	stmct(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,stmct(%rip)
       	jz  	stgo2
       	movq	kvstn(%rip),%rax
       	movq	%rax,kvlst(%rip)
       	movq	8(%rdi),%rax
       	movq	%rax,kvstn(%rip)
       	movq	kvlin(%rip),%rax
       	movq	%rax,kvlln(%rip)
       	movq	16(%rdi),%rax
       	movq	%rax,kvlin(%rip)
       	addq	$40,%rdi
       	movq	%rdi,%rax
       	movq	%rax,reg_cp(%rip)
stgo1:
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	xorq	%rsi,%rsi
       	jmp 	*(%rdi)
stgo2:
       	xorq	%rax,%rax
       	cmpq	%rax,kvpfl(%rip)
       	jz  	stgo3
       	call	prflu
stgo3:
       	movq	kvstn(%rip),%rax
       	movq	%rax,kvlst(%rip)
       	movq	8(%rdi),%rax
       	movq	%rax,kvstn(%rip)
       	movq	kvlin(%rip),%rax
       	movq	%rax,kvlln(%rip)
       	movq	16(%rdi),%rax
       	movq	%rax,kvlin(%rip)
       	addq	$40,%rdi
       	movq	%rdi,%rax
       	movq	%rax,reg_cp(%rip)
       	pushq	stmcs(%rip)
       	decq	polct(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,polct(%rip)
       	jnz 	stgo4
       	xorq	%rcx,%rcx
       	movq	kvstn(%rip),%rbx
       	movq	%rdi,%rsi
       	call	syspl
       	decq	_rc_(%rip)
       	js  	call_199
       	decq	_rc_(%rip)
       	jns 	l_0360
       	movq	$320,_rc_(%rip)
       	jmp 	err_
l_0360:
       	decq	_rc_(%rip)
       	jns 	l_0361
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0361:
       	decq	_rc_(%rip)
       	jns 	l_0362
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0362:
call_199:
       	movq	%rsi,%rdi
       	movq	%rcx,polcs(%rip)
       	call	stgcc
stgo4:
       	movq	kvstc(%rip),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	stgo5
       	popq	%rax
       	movq	%rax,%r12
       	negq	%r12
       	addq	kvstc(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,kvstc(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jle 	stcov
       	xorq	%rax,%rax
       	cmpq	%rax,r_stc(%rip)
       	jz  	stgo5
       	xorq	%rdi,%rdi
       	movq	r_stc(%rip),%rsi
       	call	ktrex
stgo5:
       	movq	stmcs(%rip),%rax
       	movq	%rax,stmct(%rip)
       	jmp 	stgo1
stopr:
       	orq 	%rdi,%rdi
       	jz  	stpra
       	call	sysax
stpra:
       	movq	rsmem(%rip),%rax
       	addq	%rax,dname(%rip)
       	cmpq	r_0055(%rip),%rdi
       	jne 	stpr0
       	xorq	%rax,%rax
       	cmpq	%rax,exsts(%rip)
       	jnz 	stpr3
       	xorq	%rax,%rax
       	movq	%rax,erich(%rip)
stpr0:
       	call	prtpg
       	orq 	%rdi,%rdi
       	jz  	stpr1
       	call	prtst
stpr1:
       	call	prtis
       	xorq	%rax,%rax
       	cmpq	%rax,gbcfl(%rip)
       	jnz 	stpr5
       	.data
r_0107:	.quad	stpm7
       	.text
       	movq	r_0107(%rip),%rdi
       	call	prtst
       	movq	$21,profs(%rip)
       	movq	kvstn(%rip),%rdx
       	call	filnm
       	movq	%rsi,%rdi
       	call	prtst
       	call	prtis
       	movq	r_cod(%rip),%rdi
       	movq	16(%rdi),%r12
       	.data
r_0108:	.quad	stpm6
       	.text
       	movq	r_0108(%rip),%rdi
       	call	prtmx
stpr5:
       	movq	kvstn(%rip),%r12
       	.data
r_0109:	.quad	stpm1
       	.text
       	movq	r_0109(%rip),%rdi
       	call	prtmx
       	call	systm
       	subq	timsx(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,stpti(%rip)
       	.data
r_0110:	.quad	stpm3
       	.text
       	movq	r_0110(%rip),%rdi
       	call	prtmx
       	movq	kvstl(%rip),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	stpr2
       	subq	kvstc(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,stpsi(%rip)
       	movq	stmcs(%rip),%rcx
       	subq	stmct(%rip),%rcx
       	movq	%rcx,%r12
       	addq	stpsi(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,stpsi(%rip)
       	.data
r_0111:	.quad	stpm2
       	.text
       	movq	r_0111(%rip),%rdi
       	call	prtmx
       	movq	stpti(%rip),%r12
       	imulq	intth(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	stpr2
       	movq	stpsi(%rip),%rax
       	call	M_dvi
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	stpr2
       	.data
r_0112:	.quad	stpm4
       	.text
       	movq	r_0112(%rip),%rdi
       	call	prtmx
stpr2:
       	movq	gbcnt(%rip),%r12
       	movq	r_0018(%rip),%rdi
       	call	prtmx
       	call	prtmm
       	call	prtis
stpr3:
       	call	prflr
       	movq	kvdmp(%rip),%rdi
       	call	dumpr
       	movq	r_fcb(%rip),%rsi
       	movq	kvabe(%rip),%rcx
       	movq	kvcod(%rip),%rbx
       	call	sysej
stpr4:
       	movq	rsmem(%rip),%rax
       	addq	%rax,dname(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,exsts(%rip)
       	jz  	stpr1
       	jmp 	stpr3
succp:
       	movq	8(%rdi),%rdi
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
sysab:
       	.data
r_0113:	.quad	endab
       	.text
       	movq	r_0113(%rip),%rdi
       	movq	$1,kvabe(%rip)
       	call	prtnl
       	jmp 	stopr
systu:
       	.data
r_0114:	.quad	endtu
       	.text
       	movq	r_0114(%rip),%rdi
       	movq	strtu(%rip),%rcx
       	movq	%rcx,kvcod(%rip)
       	movq	timup(%rip),%rcx
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,timup(%rip)
       	orq 	%rcx,%rcx
       	jnz 	stopr
       	movq	$245,_rc_(%rip)
       	jmp 	err_
acess:
       	movq	%rsi,%rdi
       	addq	%rcx,%rdi
       	movq	(%rdi),%rdi
acs02:
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	acs18
       	.data
r_0115:	.quad	trbkv
       	.text
       	cmpq	r_0115(%rip),%rdi
       	je  	acs12
       	cmpq	r_0032(%rip),%rdi
       	jne 	acs05
       	movq	8(%rsi),%rdi
       	xorq	%rbx,%rbx
       	call	evalx
       	decq	_rc_(%rip)
       	js  	call_200
       	decq	_rc_(%rip)
       	jns 	l_0363
       	jmp 	acs04
l_0363:
call_200:
       	jmp 	acs02
acs03:
       	addq	$24,%rsp
       	movq	%rdi,dnamp(%rip)
acs04:
       	movq	$1,_rc_(%rip)
       	ret
acs05:
       	movq	8(%rdi),%rbx
       	orq 	%rbx,%rbx
       	jnz 	acs10
       	xorq	%rax,%rax
       	cmpq	%rax,kvinp(%rip)
       	jz  	acs09
       	pushq	%rsi
       	pushq	%rcx
       	pushq	%rdi
       	movq	kvtrm(%rip),%rax
       	movq	%rax,actrm(%rip)
       	movq	32(%rdi),%rsi
       	orq 	%rsi,%rsi
       	jnz 	acs06
       	.data
r_0116:	.quad	v_ter
       	.text
       	movq	r_0116(%rip),%rax
       	cmpq	%rax,24(%rdi)
       	je  	acs21
       	movq	cswin(%rip),%rcx
       	call	alocs
       	call	sysrd
       	decq	_rc_(%rip)
       	js  	call_201
       	decq	_rc_(%rip)
       	jns 	l_0364
       	jmp 	acs03
l_0364:
call_201:
       	jmp 	acs07
acs06:
       	movq	%rsi,%rcx
       	call	sysil
       	orq 	%rdx,%rdx
       	jnz 	acs6a
       	movq	%rdx,actrm(%rip)
acs6a:
       	call	alocs
       	movq	%rsi,%rcx
       	call	sysin
       	decq	_rc_(%rip)
       	js  	call_202
       	decq	_rc_(%rip)
       	jns 	l_0365
       	jmp 	acs03
l_0365:
       	decq	_rc_(%rip)
       	jns 	l_0366
       	jmp 	acs22
l_0366:
       	decq	_rc_(%rip)
       	jns 	l_0367
       	jmp 	acs23
l_0367:
call_202:
acs07:
       	movq	actrm(%rip),%rbx
       	call	trimr
       	movq	%rdi,%rbx
       	movq	(%rsp),%rdi
acs08:
       	movq	%rdi,%rsi
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	acs08
       	movq	%rbx,16(%rsi)
       	popq	%rdi
       	popq	%rcx
       	popq	%rsi
acs09:
       	movq	16(%rdi),%rdi
       	jmp 	acs02
acs10:
       	cmpq	$1,%rbx
       	jne 	acs09
       	xorq	%rax,%rax
       	cmpq	%rax,kvtra(%rip)
       	jz  	acs09
       	decq	kvtra(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,32(%rdi)
       	jz  	acs11
       	call	trxeq
       	jmp 	acs09
acs11:
       	call	prtsn
       	call	prtnv
       	jmp 	acs09
acs12:
       	movq	16(%rsi),%rdi
       	cmpq	$168,%rdi
       	jae 	acs14
       	.data
r_0117:	.quad	kvabe
       	.text
       	movq	r_0117(%rip),%rax
       	addq	%rdi,%rax
       	movq	(%rax),%r12
acs13:
       	call	icbld
       	jmp 	acs18
acs14:
       	cmpq	$181,%rdi
       	jae 	acs15
       	subq	$168,%rdi
       	salq	$3,%rdi
       	addq	r_0046(%rip),%rdi
       	jmp 	acs18
acs15:
       	movq	kvrtn(%rip),%rsi
       	movq	kvstl(%rip),%r12
       	subq	$181,%rdi
       	.data
r_0118:	.quad	l_0368
       	.text
       	movq	r_0118(%rip),%rax
       	salq	$3,%rdi
       	addq	%rdi,%rax
       	jmp 	*(%rax)
       	.data
l_0368:
       	.quad	acs16
       	.quad	acs17
       	.quad	acs19
       	.quad	acs20
       	.quad	acs26
       	.quad	acs27
       	.quad	acs13
       	.quad	acs24
       	.quad	acs25
       	.text
acs24:
       	.data
r_0119:	.quad	lcase
       	.text
       	movq	r_0119(%rip),%rdi
       	jmp 	acs18
acs25:
       	.data
r_0120:	.quad	ucase
       	.text
       	movq	r_0120(%rip),%rdi
       	jmp 	acs18
acs26:
       	movq	kvstn(%rip),%rdx
       	jmp 	acs28
acs27:
       	movq	kvlst(%rip),%rdx
acs28:
       	call	filnm
       	jmp 	acs17
acs16:
       	movq	kvalp(%rip),%rsi
acs17:
       	movq	%rsi,%rdi
acs18:
       	movq	$0,_rc_(%rip)
       	ret
acs19:
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	acs29
       	movq	stmcs(%rip),%rcx
       	subq	stmct(%rip),%rcx
       	movq	%rcx,%r12
       	addq	kvstl(%rip),%r12
       	seto	reg_fl(%rip)
acs29:
       	subq	kvstc(%rip),%r12
       	seto	reg_fl(%rip)
       	jmp 	acs13
acs20:
       	movq	r_etx(%rip),%rdi
       	jmp 	acs18
acs21:
       	movq	$1024,%rcx
       	call	alocs
       	call	sysri
       	decq	_rc_(%rip)
       	js  	call_203
       	decq	_rc_(%rip)
       	jns 	l_0369
       	jmp 	acs03
l_0369:
call_203:
       	jmp 	acs07
acs22:
       	movq	%rdi,dnamp(%rip)
       	movq	$202,_rc_(%rip)
       	jmp 	err_
acs23:
       	movq	%rdi,dnamp(%rip)
       	movq	$203,_rc_(%rip)
       	jmp 	err_
acomp:
       	popq	prc_001(%rip)
       	call	arith
       	decq	_rc_(%rip)
       	js  	call_204
       	decq	_rc_(%rip)
       	jns 	l_0370
       	jmp 	acmp7
l_0370:
       	decq	_rc_(%rip)
       	jns 	l_0371
       	jmp 	acmp8
l_0371:
       	decq	_rc_(%rip)
       	jns 	l_0372
       	jmp 	acmp4
l_0372:
call_204:
       	subq	8(%rsi),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	acmp3
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	acmp5
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	je  	acmp2
acmp1:
       	movq	$5,_rc_(%rip)
       	movq	prc_001(%rip),%rax
       	jmp 	*%rax
acmp2:
       	movq	$4,_rc_(%rip)
       	movq	prc_001(%rip),%rax
       	jmp 	*%rax
acmp3:
       	movq	8(%rsi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	acmp1
       	jmp 	acmp5
acmp4:
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	acmp6
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jg  	acmp1
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	acmp2
acmp5:
       	movq	$3,_rc_(%rip)
       	movq	prc_001(%rip),%rax
       	jmp 	*%rax
acmp6:
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jl  	acmp1
       	jmp 	acmp5
acmp7:
       	movq	$1,_rc_(%rip)
       	movq	prc_001(%rip),%rax
       	jmp 	*%rax
acmp8:
       	movq	$2,_rc_(%rip)
       	movq	prc_001(%rip),%rax
       	jmp 	*%rax
alloc:
aloc1:
       	movq	dnamp(%rip),%rdi
       	addq	%rcx,%rdi
       	jc  	aloc2
       	cmpq	dname(%rip),%rdi
       	ja  	aloc2
       	movq	%rdi,dnamp(%rip)
       	subq	%rcx,%rdi
       	ret
aloc2:
       	movq	%rbx,allsv(%rip)
alc2a:
       	xorq	%rbx,%rbx
       	call	gbcol
       	movq	%rdi,%rbx
aloc3:
       	movq	dnamp(%rip),%rdi
       	addq	%rcx,%rdi
       	jc  	alc3a
       	cmpq	dname(%rip),%rdi
       	jb  	aloc4
alc3a:
       	call	sysmm
       	salq	$3,%rdi
       	addq	%rdi,dname(%rip)
       	orq 	%rdi,%rdi
       	jnz 	aloc3
       	xorq	%rax,%rax
       	cmpq	%rax,dnams(%rip)
       	jz  	alc3b
       	xorq	%rax,%rax
       	movq	%rax,dnams(%rip)
       	jmp 	alc2a
alc3b:
       	movq	rsmem(%rip),%rax
       	addq	%rax,dname(%rip)
       	xorq	%rax,%rax
       	movq	%rax,rsmem(%rip)
       	incq	errft(%rip)
       	movq	$204,_rc_(%rip)
       	jmp 	err_
aloc4:
       	movq	%r12,allia(%rip)
       	movq	%rbx,dnams(%rip)
       	movq	dname(%rip),%rbx
       	subq	dnamp(%rip),%rbx
       	shrq	$3,%rbx
       	movq	%rbx,%r12
       	imulq	alfsf(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	aloc5
       	movq	dname(%rip),%rbx
       	subq	dnamb(%rip),%rbx
       	shrq	$3,%rbx
       	movq	%rbx,aldyn(%rip)
       	subq	aldyn(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jg  	aloc5
       	call	sysmm
       	salq	$3,%rdi
       	addq	%rdi,dname(%rip)
aloc5:
       	movq	allia(%rip),%r12
       	movq	allsv(%rip),%rbx
       	jmp 	aloc1
alocs:
       	cmpq	kvmxl(%rip),%rcx
       	ja  	alcs2
       	movq	%rcx,%rdx
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	movq	dnamp(%rip),%rdi
       	addq	%rcx,%rdi
       	jc  	alcs0
       	cmpq	dname(%rip),%rdi
       	jb  	alcs1
alcs0:
       	xorq	%rdi,%rdi
       	call	alloc
       	addq	%rcx,%rdi
alcs1:
       	movq	%rdi,dnamp(%rip)
       	subq	$8,%rdi
       	xorq	%rax,%rax
       	movq	%rax,(%rdi)
       	subq	$8,%rcx
       	subq	%rcx,%rdi
       	movq	r_0025(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rdx,8(%rdi)
       	ret
alcs2:
       	movq	$205,_rc_(%rip)
       	jmp 	err_
alost:
alst1:
       	movq	state(%rip),%rdi
       	addq	%rcx,%rdi
       	jc  	alst2
       	cmpq	dnamb(%rip),%rdi
       	jae 	alst2
       	movq	%rdi,state(%rip)
       	subq	%rcx,%rdi
       	ret
alst2:
       	movq	%rcx,alsta(%rip)
       	cmpq	$8000,%rcx
       	jae 	alst3
       	movq	$8000,%rcx
alst3:
       	call	alloc
       	movq	%rdi,dnamp(%rip)
       	movq	%rcx,%rbx
       	call	gbcol
       	movq	%rdi,dnams(%rip)
       	movq	alsta(%rip),%rcx
       	jmp 	alst1
arith:
       	popq	prc_002(%rip)
       	popq	%rsi
       	popq	%rdi
       	movq	(%rsi),%rcx
       	cmpq	r_0023(%rip),%rcx
       	je  	arth1
       	cmpq	r_0026(%rip),%rcx
       	je  	arth4
       	pushq	%rdi
       	movq	%rsi,%rdi
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_205
       	decq	_rc_(%rip)
       	jns 	l_0373
       	jmp 	arth6
l_0373:
call_205:
       	movq	%rdi,%rsi
       	movq	(%rsi),%rcx
       	popq	%rdi
       	cmpq	r_0026(%rip),%rcx
       	je  	arth4
arth1:
       	movq	r_0023(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	arth3
arth2:
       	movq	8(%rdi),%r12
       	movq	$0,_rc_(%rip)
       	movq	prc_002(%rip),%rax
       	jmp 	*%rax
arth3:
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_206
       	decq	_rc_(%rip)
       	jns 	l_0374
       	jmp 	arth7
l_0374:
call_206:
       	cmpq	r_0023(%rip),%rcx
       	je  	arth2
       	pushq	%rdi
       	movq	8(%rsi),%r12
       	movq	%r12,reg_ia(%rip)
       	call	M_itr
       	call	rcbld
       	movq	%rdi,%rsi
       	popq	%rdi
       	jmp 	arth5
arth4:
       	movq	r_0026(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	arth5
       	call	gtrea
       	decq	_rc_(%rip)
       	js  	call_207
       	decq	_rc_(%rip)
       	jns 	l_0375
       	jmp 	arth7
l_0375:
call_207:
arth5:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	$3,_rc_(%rip)
       	movq	prc_002(%rip),%rax
       	jmp 	*%rax
arth6:
       	addq	$8,%rsp
       	movq	$2,_rc_(%rip)
       	movq	prc_002(%rip),%rax
       	jmp 	*%rax
arth7:
       	movq	$1,_rc_(%rip)
       	movq	prc_002(%rip),%rax
       	jmp 	*%rax
asign:
asg01:
       	addq	%rcx,%rsi
       	movq	(%rsi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	asg02
       	movq	%rbx,(%rsi)
       	xorq	%rsi,%rsi
       	movq	$0,_rc_(%rip)
       	ret
asg02:
       	subq	%rcx,%rsi
       	cmpq	r_0115(%rip),%rdi
       	je  	asg14
       	cmpq	r_0032(%rip),%rdi
       	jne 	asg04
       	movq	8(%rsi),%rdi
       	pushq	%rbx
       	movq	$1,%rbx
       	call	evalx
       	decq	_rc_(%rip)
       	js  	call_208
       	decq	_rc_(%rip)
       	jns 	l_0376
       	jmp 	asg03
l_0376:
call_208:
       	popq	%rbx
       	jmp 	asg01
asg03:
       	addq	$8,%rsp
       	movq	$1,_rc_(%rip)
       	ret
asg04:
       	pushq	%rdi
asg05:
       	movq	%rdi,%rdx
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	asg05
       	movq	%rdx,%rdi
       	movq	%rbx,16(%rdi)
       	popq	%rdi
asg06:
       	movq	8(%rdi),%rbx
       	cmpq	$2,%rbx
       	je  	asg08
       	cmpq	$3,%rbx
       	je  	asg10
asg07:
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	asg06
       	movq	$0,_rc_(%rip)
       	ret
asg08:
       	xorq	%rax,%rax
       	cmpq	%rax,kvtra(%rip)
       	jz  	asg07
       	decq	kvtra(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,32(%rdi)
       	jz  	asg09
       	call	trxeq
       	jmp 	asg07
asg09:
       	call	prtsn
       	call	prtnv
       	jmp 	asg07
asg10:
       	xorq	%rax,%rax
       	cmpq	%rax,kvoup(%rip)
       	jz  	asg07
asg1b:
       	movq	%rdi,%rsi
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	asg1b
       	movq	%rsi,%rdi
       	pushq	16(%rdi)
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_209
       	decq	_rc_(%rip)
       	jns 	l_0377
       	jmp 	asg12
l_0377:
call_209:
asg11:
       	movq	32(%rsi),%rcx
       	orq 	%rcx,%rcx
       	jz  	asg13
asg1a:
       	call	sysou
       	decq	_rc_(%rip)
       	js  	call_210
       	decq	_rc_(%rip)
       	jns 	l_0378
       	movq	$206,_rc_(%rip)
       	jmp 	err_
l_0378:
       	decq	_rc_(%rip)
       	jns 	l_0379
       	movq	$207,_rc_(%rip)
       	jmp 	err_
l_0379:
call_210:
       	movq	$0,_rc_(%rip)
       	ret
asg12:
       	call	dtype
       	jmp 	asg11
asg13:
       	movq	r_0116(%rip),%rax
       	cmpq	%rax,24(%rsi)
       	je  	asg1a
       	incq	%rcx
       	jmp 	asg1a
asg14:
       	movq	16(%rsi),%rsi
       	cmpq	$184,%rsi
       	je  	asg19
       	movq	%rbx,%rdi
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_211
       	decq	_rc_(%rip)
       	jns 	l_0380
       	movq	$208,_rc_(%rip)
       	jmp 	err_
l_0380:
call_211:
       	movq	8(%rdi),%r12
       	cmpq	$187,%rsi
       	je  	asg16
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	asg18
       	movq	%r12,%rcx
       	cmpq	mxlen(%rip),%rcx
       	ja  	asg18
       	cmpq	$56,%rsi
       	je  	asg17
       	cmpq	$104,%rsi
       	je  	asg21
       	cmpq	$88,%rsi
       	je  	asg24
       	cmpq	$72,%rsi
       	je  	asg26
       	cmpq	$128,%rsi
       	jb  	asg15
       	movq	$209,_rc_(%rip)
       	jmp 	err_
asg15:
       	movq	r_0117(%rip),%rax
       	addq	%rsi,%rax
       	movq	%rcx,(%rax)
       	movq	$0,_rc_(%rip)
       	ret
asg16:
       	subq	kvstl(%rip),%r12
       	seto	reg_fl(%rip)
       	addq	kvstc(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,kvstc(%rip)
       	movq	kvstl(%rip),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	asg25
       	movq	stmcs(%rip),%rcx
       	subq	stmct(%rip),%rcx
       	movq	%rcx,%r12
       	negq	%r12
       	addq	kvstc(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,kvstc(%rip)
asg25:
       	movq	8(%rdi),%r12
       	movq	%r12,kvstl(%rip)
       	call	stgcc
       	movq	$0,_rc_(%rip)
       	ret
asg17:
       	cmpq	$999,%rcx
       	jbe 	error
asg18:
       	movq	$210,_rc_(%rip)
       	jmp 	err_
asg19:
       	pushq	%rbx
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_212
       	decq	_rc_(%rip)
       	jns 	l_0381
       	movq	$211,_rc_(%rip)
       	jmp 	err_
l_0381:
call_212:
       	movq	%rdi,r_etx(%rip)
       	movq	$0,_rc_(%rip)
       	ret
asg21:
       	cmpq	$2,%rcx
       	ja  	asg18
       	orq 	%rcx,%rcx
       	jz  	asg15
       	xorq	%rax,%rax
       	cmpq	%rax,pfdmp(%rip)
       	jz  	asg22
       	cmpq	pfdmp(%rip),%rcx
       	je  	asg23
       	movq	$268,_rc_(%rip)
       	jmp 	err_
asg22:
       	movq	%rcx,pfdmp(%rip)
asg23:
       	movq	%rcx,kvpfl(%rip)
       	call	stgcc
       	call	systm
       	movq	%r12,pfstm(%rip)
       	movq	$0,_rc_(%rip)
       	ret
asg24:
       	cmpq	$1024,%rcx
       	jae 	asg15
       	movq	$287,_rc_(%rip)
       	jmp 	err_
asg26:
       	orq 	%rcx,%rcx
       	jnz 	asg15
       	movq	$274,_rc_(%rip)
       	jmp 	err_
asinp:
       	addq	%rcx,%rsi
       	movq	(%rsi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	asnp1
       	movq	%rbx,(%rsi)
       	xorq	%rsi,%rsi
       	movq	$0,_rc_(%rip)
       	ret
asnp1:
       	subq	%rcx,%rsi
       	pushq	pmssl(%rip)
       	pushq	pmhbs(%rip)
       	pushq	r_pms(%rip)
       	pushq	pmdfl(%rip)
       	call	asign
       	decq	_rc_(%rip)
       	js  	call_213
       	decq	_rc_(%rip)
       	jns 	l_0382
       	jmp 	asnp2
l_0382:
call_213:
       	popq	pmdfl(%rip)
       	popq	r_pms(%rip)
       	popq	pmhbs(%rip)
       	popq	pmssl(%rip)
       	movq	$0,_rc_(%rip)
       	ret
asnp2:
       	popq	pmdfl(%rip)
       	popq	r_pms(%rip)
       	popq	pmhbs(%rip)
       	popq	pmssl(%rip)
       	movq	$1,_rc_(%rip)
       	ret
blkln:
       	movq	%rcx,%rsi
       	movq	%rsi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rsi
       	cmpq	$29,%rsi
       	jge 	bln00
       	.data
r_0121:	.quad	l_0383
       	.text
       	movq	r_0121(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0383:
       	.quad	bln01
       	.quad	bln12
       	.quad	bln12
       	.quad	bln07
       	.quad	bln03
       	.quad	bln02
       	.quad	bln03
       	.quad	bln04
       	.quad	bln09
       	.quad	bln10
       	.quad	bln02
       	.quad	bln01
       	.quad	bln01
       	.quad	bln00
       	.quad	bln00
       	.quad	bln00
       	.quad	bln08
       	.quad	bln05
       	.quad	bln00
       	.quad	bln00
       	.quad	bln00
       	.quad	bln06
       	.quad	bln01
       	.quad	bln01
       	.quad	bln03
       	.quad	bln05
       	.quad	bln03
       	.quad	bln01
       	.quad	bln04
       	.text
bln00:
       	movq	8(%rdi),%rcx
       	ret
bln01:
       	movq	16(%rdi),%rcx
       	ret
bln02:
       	movq	$16,%rcx
       	ret
bln03:
       	movq	$24,%rcx
       	ret
bln04:
       	movq	$32,%rcx
       	ret
bln05:
       	movq	$40,%rcx
       	ret
bln06:
       	movq	$2056,%rcx
       	ret
bln07:
       	movq	$16,%rcx
       	ret
bln08:
       	movq	16(%rdi),%rsi
       	movq	24(%rsi),%rcx
       	ret
bln09:
       	movq	$16,%rcx
       	ret
bln10:
       	movq	8(%rdi),%rcx
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	ret
bln12:
       	movq	24(%rdi),%rcx
       	ret
copyb:
       	popq	prc_003(%rip)
       	movq	(%rsp),%rdi
       	cmpq	r_0012(%rip),%rdi
       	je  	cop10
       	movq	(%rdi),%rcx
       	movq	%rcx,%rbx
       	call	blkln
       	movq	%rdi,%rsi
       	call	alloc
       	movq	%rdi,(%rsp)
       	shrq	$3,%rcx
       	rep 	movsq
       	xorq	%rsi,%rsi
       	movq	(%rsp),%rdi
       	cmpq	r_0022(%rip),%rbx
       	je  	cop05
       	cmpq	r_0021(%rip),%rbx
       	je  	cop01
       	cmpq	r_0036(%rip),%rbx
       	je  	cop01
       	cmpq	r_0065(%rip),%rbx
       	jne 	cop10
       	addq	24(%rdi),%rdi
       	jmp 	cop02
cop01:
       	addq	$24,%rdi
cop02:
       	movq	(%rdi),%rsi
cop03:
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	cop04
       	movq	16(%rsi),%rsi
       	jmp 	cop03
cop04:
       	movq	%rsi,%rax
       	stosq
       	cmpq	dnamp(%rip),%rdi
       	jne 	cop02
       	jmp 	cop09
cop05:
       	xorq	%rax,%rax
       	movq	%rax,8(%rdi)
       	movq	$32,%rcx
       	movq	$32,%rdx
cop06:
       	movq	(%rsp),%rdi
       	cmpq	16(%rdi),%rdx
       	je  	cop09
       	movq	%rdx,%rbx
       	subq	$24,%rbx
       	addq	%rbx,%rdi
       	addq	$8,%rdx
cop07:
       	movq	24(%rdi),%rsi
       	movq	(%rsp),%rax
       	movq	%rax,24(%rdi)
       	movq	r_0022(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	cop06
       	subq	%rbx,%rdi
       	pushq	%rdi
       	movq	$32,%rcx
       	call	alloc
       	pushq	%rdi
       	shrq	$3,%rcx
       	rep 	movsq
       	popq	%rdi
       	popq	%rsi
       	addq	%rbx,%rsi
       	movq	%rdi,24(%rsi)
       	movq	%rdi,%rsi
cop08:
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	cop08
       	movq	%rsi,16(%rdi)
       	xorq	%rbx,%rbx
       	jmp 	cop07
cop09:
       	popq	%rdi
       	movq	$0,_rc_(%rip)
       	movq	prc_003(%rip),%rax
       	jmp 	*%rax
cop10:
       	movq	$1,_rc_(%rip)
       	movq	prc_003(%rip),%rax
       	jmp 	*%rax
cdgcg:
       	movq	24(%rdi),%rsi
       	movq	32(%rdi),%rdi
       	.data
r_0122:	.quad	opdvd
       	.text
       	cmpq	r_0122(%rip),%rsi
       	je  	cdgc2
       	call	cdgnm
cdgc1:
       	movq	%rsi,%rcx
       	call	cdwrd
       	ret
cdgc2:
       	call	cdgvl
       	jmp 	cdgc1
cdgex:
       	.data
r_0123:	.quad	b_vr_
       	.text
       	movq	r_0123(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jb  	cdgx1
       	movq	$16,%rcx
       	call	alloc
       	.data
r_0124:	.quad	b_sel
       	.text
       	movq	r_0124(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rsi,8(%rdi)
       	ret
cdgx1:
       	movq	%rsi,%rdi
       	pushq	%rdx
       	movq	cwcof(%rip),%rsi
       	orq 	%rcx,%rcx
       	jz  	cdgx2
       	movq	(%rdi),%rcx
       	.data
r_0125:	.quad	b_cmt
       	.text
       	cmpq	r_0125(%rip),%rcx
       	jne 	cdgx2
       	cmpq	$7,16(%rdi)
       	jae 	cdgx2
       	call	cdgnm
       	movq	r_0027(%rip),%rcx
       	jmp 	cdgx3
cdgx2:
       	call	cdgvl
       	.data
r_0126:	.quad	orvl_
       	.text
       	movq	r_0126(%rip),%rcx
cdgx3:
       	call	cdwrd
       	call	exbld
       	popq	%rdx
       	ret
cdgnm:
       	pushq	%rsi
       	pushq	%rbx
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	movq	(%rdi),%rcx
       	cmpq	r_0125(%rip),%rcx
       	je  	cgn04
       	cmpq	r_0123(%rip),%rcx
       	ja  	cgn02
cgn01:
       	movq	$212,_rc_(%rip)
       	jmp 	err_
cgn02:
       	.data
r_0127:	.quad	olvn_
       	.text
       	movq	r_0127(%rip),%rcx
       	call	cdwrd
       	movq	%rdi,%rcx
       	call	cdwrd
cgn03:
       	popq	%rbx
       	popq	%rsi
       	ret
cgn04:
       	movq	%rdi,%rsi
       	movq	16(%rdi),%rdi
       	cmpq	$7,%rdi
       	jae 	cgn01
       	.data
r_0128:	.quad	l_0384
       	.text
       	movq	r_0128(%rip),%rax
       	salq	$3,%rdi
       	addq	%rdi,%rax
       	jmp 	*(%rax)
       	.data
l_0384:
       	.quad	cgn05
       	.quad	cgn08
       	.quad	cgn09
       	.quad	cgn10
       	.quad	cgn11
       	.quad	cgn08
       	.quad	cgn08
       	.text
cgn05:
       	movq	$24,%rbx
cgn06:
       	call	cmgen
       	movq	8(%rsi),%rdx
       	cmpq	%rdx,%rbx
       	jb  	cgn06
       	.data
r_0129:	.quad	oaon_
       	.text
       	movq	r_0129(%rip),%rcx
       	cmpq	$40,%rdx
       	je  	cgn07
       	.data
r_0130:	.quad	oamn_
       	.text
       	movq	r_0130(%rip),%rcx
       	call	cdwrd
       	movq	%rdx,%rcx
       	shrq	$3,%rcx
       	subq	$4,%rcx
cgn07:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdx
       	call	cdwrd
       	jmp 	cgn03
cgn08:
       	movq	%rsi,%rdi
       	call	cdgvl
       	movq	r_0038(%rip),%rcx
       	jmp 	cgn07
cgn09:
       	movq	32(%rsi),%rdi
       	movq	r_0123(%rip),%rax
       	cmpq	%rax,(%rdi)
       	ja  	cgn02
       	movq	%rdi,%rsi
       	movq	$1,%rcx
       	call	cdgex
       	.data
r_0131:	.quad	olex_
       	.text
       	movq	r_0131(%rip),%rcx
       	call	cdwrd
       	movq	%rdi,%rcx
       	call	cdwrd
       	jmp 	cgn03
cgn10:
       	movq	32(%rsi),%rdi
       	call	cdgvl
       	.data
r_0132:	.quad	oinn_
       	.text
       	movq	r_0132(%rip),%rcx
       	jmp 	cgn12
cgn11:
       	movq	32(%rsi),%rdi
       	call	cdgnm
       	.data
r_0133:	.quad	okwn_
       	.text
       	movq	r_0133(%rip),%rcx
cgn12:
       	call	cdwrd
       	jmp 	cgn03
cdgvl:
       	movq	(%rdi),%rcx
       	cmpq	r_0125(%rip),%rcx
       	je  	cgv01
       	.data
r_0134:	.quad	b_vra
       	.text
       	cmpq	r_0134(%rip),%rcx
       	jb  	cgv00
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	cgvl0
       	pushq	%rdi
       	movq	64(%rdi),%rdi
       	movq	0(%rdi),%rcx
       	popq	%rdi
       	andq	btkwv(%rip),%rcx
       	cmpq	btkwv(%rip),%rcx
       	je  	cgv00
cgvl0:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdx
cgv00:
       	movq	%rdi,%rcx
       	call	cdwrd
       	ret
cgv01:
       	pushq	%rbx
       	pushq	%rsi
       	pushq	%rdx
       	pushq	cwcof(%rip)
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	movq	%rdi,%rsi
       	movq	16(%rdi),%rdi
       	movq	cswno(%rip),%rdx
       	cmpq	$13,%rdi
       	jbe 	cgv02
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdx
cgv02:
       	.data
r_0135:	.quad	l_0385
       	.text
       	movq	r_0135(%rip),%rax
       	salq	$3,%rdi
       	addq	%rdi,%rax
       	jmp 	*(%rax)
       	.data
l_0385:
       	.quad	cgv03
       	.quad	cgv05
       	.quad	cgv14
       	.quad	cgv31
       	.quad	cgv27
       	.quad	cgv29
       	.quad	cgv30
       	.quad	cgv18
       	.quad	cgv19
       	.quad	cgv18
       	.quad	cgv24
       	.quad	cgv24
       	.quad	cgv27
       	.quad	cgv26
       	.quad	cgv21
       	.quad	cgv31
       	.quad	cgv28
       	.quad	cgv15
       	.quad	cgv18
       	.text
cgv03:
       	movq	$24,%rbx
cgv04:
       	call	cmgen
       	movq	8(%rsi),%rdx
       	cmpq	%rdx,%rbx
       	jb  	cgv04
       	.data
r_0136:	.quad	oaov_
       	.text
       	movq	r_0136(%rip),%rcx
       	cmpq	$40,%rdx
       	je  	cgv32
       	.data
r_0137:	.quad	oamv_
       	.text
       	movq	r_0137(%rip),%rcx
       	call	cdwrd
       	movq	%rdx,%rcx
       	subq	$32,%rcx
       	shrq	$3,%rcx
       	jmp 	cgv32
cgv05:
       	movq	$32,%rbx
cgv06:
       	cmpq	8(%rsi),%rbx
       	je  	cgv07
       	call	cmgen
       	jmp 	cgv06
cgv07:
       	subq	$32,%rbx
       	shrq	$3,%rbx
       	movq	24(%rsi),%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	cgv12
       	movq	64(%rdi),%rsi
       	movq	0(%rsi),%rcx
       	andq	btffc(%rip),%rcx
       	orq 	%rcx,%rcx
       	jz  	cgv12
       	movq	0(%rsi),%rcx
       	andq	btpre(%rip),%rcx
       	orq 	%rcx,%rcx
       	jnz 	cgv08
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdx
cgv08:
       	movq	40(%rdi),%rsi
       	movq	8(%rsi),%rcx
       	cmpq	%rbx,%rcx
       	je  	cgv11
       	cmpq	%rbx,%rcx
       	ja  	cgv09
       	subq	%rcx,%rbx
       	.data
r_0138:	.quad	opop_
       	.text
       	movq	r_0138(%rip),%rcx
       	jmp 	cgv10
cgv09:
       	subq	%rbx,%rcx
       	movq	%rcx,%rbx
       	movq	r_0012(%rip),%rcx
cgv10:
       	call	cdwrd
       	decq	%rbx
       	jnz 	cgv10
cgv11:
       	movq	%rsi,%rcx
       	jmp 	cgv36
cgv12:
       	.data
r_0139:	.quad	ofns_
       	.text
       	movq	r_0139(%rip),%rcx
       	cmpq	$1,%rbx
       	je  	cgv13
       	.data
r_0140:	.quad	ofnc_
       	.text
       	movq	r_0140(%rip),%rcx
       	call	cdwrd
       	movq	%rbx,%rcx
cgv13:
       	call	cdwrd
       	movq	%rdi,%rcx
       	jmp 	cgv32
cgv14:
       	movq	32(%rsi),%rsi
       	xorq	%rcx,%rcx
       	call	cdgex
       	movq	%rdi,%rcx
       	call	cdwrd
       	jmp 	cgv34
cgv15:
       	xorq	%rax,%rax
       	pushq	%rax
       	xorq	%rax,%rax
       	pushq	%rax
       	movq	$32,%rbx
       	.data
r_0141:	.quad	osla_
       	.text
       	movq	r_0141(%rip),%rcx
cgv16:
       	call	cdwrd
       	movq	cwcof(%rip),%rax
       	movq	%rax,(%rsp)
       	call	cdwrd
       	call	cmgen
       	.data
r_0142:	.quad	oslb_
       	.text
       	movq	r_0142(%rip),%rcx
       	call	cdwrd
       	movq	8(%rsp),%rcx
       	movq	cwcof(%rip),%rax
       	movq	%rax,8(%rsp)
       	call	cdwrd
       	movq	(%rsp),%rdi
       	addq	r_ccb(%rip),%rdi
       	movq	cwcof(%rip),%rax
       	movq	%rax,(%rdi)
       	.data
r_0143:	.quad	oslc_
       	.text
       	movq	r_0143(%rip),%rcx
       	movq	%rbx,%rdi
       	addq	$8,%rdi
       	cmpq	8(%rsi),%rdi
       	jb  	cgv16
       	.data
r_0144:	.quad	osld_
       	.text
       	movq	r_0144(%rip),%rcx
       	call	cdwrd
       	call	cmgen
       	addq	$8,%rsp
       	popq	%rdi
cgv17:
       	addq	r_ccb(%rip),%rdi
       	movq	(%rdi),%rcx
       	movq	cwcof(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rcx,%rdi
       	orq 	%rcx,%rcx
       	jnz 	cgv17
       	jmp 	cgv33
cgv18:
       	movq	40(%rsi),%rdi
       	call	cdgvl
cgv19:
       	movq	32(%rsi),%rdi
       	call	cdgvl
cgv20:
       	movq	24(%rsi),%rcx
       	jmp 	cgv36
cgv21:
       	movq	40(%rsi),%rdi
       	movq	r_0123(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jb  	cgv22
       	movq	32(%rsi),%rdi
       	call	cdgvl
       	movq	40(%rsi),%rcx
       	addq	$8,%rcx
       	jmp 	cgv32
cgv22:
       	call	expap
       	decq	_rc_(%rip)
       	js  	call_214
       	decq	_rc_(%rip)
       	jns 	l_0386
       	jmp 	cgv23
l_0386:
call_214:
       	movq	32(%rdi),%rax
       	movq	%rax,40(%rsi)
       	movq	40(%rdi),%rdi
       	call	cdgnm
       	movq	40(%rsi),%rdi
       	call	cdgvl
       	.data
r_0145:	.quad	opmn_
       	.text
       	movq	r_0145(%rip),%rcx
       	call	cdwrd
       	movq	32(%rsi),%rdi
       	call	cdgvl
       	.data
r_0146:	.quad	orpl_
       	.text
       	movq	r_0146(%rip),%rcx
       	jmp 	cgv32
cgv23:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdx
       	call	cdgnm
       	jmp 	cgv31
cgv24:
       	movq	40(%rsi),%rdi
       	movq	r_0125(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	cgv18
       	movq	16(%rdi),%rbx
       	cmpq	$15,%rbx
       	je  	cgv25
       	cmpq	$16,%rbx
       	je  	cgv25
       	cmpq	$1,%rbx
       	jne 	cgv18
       	movq	24(%rdi),%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	cgv18
       	movq	64(%rdi),%rdi
       	movq	0(%rdi),%rcx
       	andq	btprd(%rip),%rcx
       	orq 	%rcx,%rcx
       	jz  	cgv18
cgv25:
       	movq	40(%rsi),%rdi
       	call	cdgvl
       	movq	r_0138(%rip),%rcx
       	call	cdwrd
       	movq	32(%rsi),%rdi
       	call	cdgvl
       	jmp 	cgv33
cgv26:
       	movq	40(%rsi),%rdi
       	call	cdgvl
cgv27:
       	movq	32(%rsi),%rdi
       	call	cdgnm
       	movq	24(%rsi),%rdi
       	.data
r_0147:	.quad	o_kwv
       	.text
       	movq	r_0147(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	cgv20
       	orq 	%rdx,%rdx
       	jnz 	cgv20
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdx
       	movq	32(%rsi),%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	cgv20
       	movq	64(%rdi),%rdi
       	movq	0(%rdi),%rcx
       	andq	btckw(%rip),%rcx
       	orq 	%rcx,%rcx
       	jz  	cgv20
       	xorq	%rdx,%rdx
       	jmp 	cgv20
cgv28:
       	.data
r_0148:	.quad	onta_
       	.text
       	movq	r_0148(%rip),%rcx
       	call	cdwrd
       	movq	cwcof(%rip),%rbx
       	call	cdwrd
       	movq	32(%rsi),%rdi
       	call	cdgvl
       	.data
r_0149:	.quad	ontb_
       	.text
       	movq	r_0149(%rip),%rcx
       	call	cdwrd
       	movq	%rbx,%rdi
       	addq	r_ccb(%rip),%rdi
       	movq	cwcof(%rip),%rax
       	movq	%rax,(%rdi)
       	.data
r_0150:	.quad	ontc_
       	.text
       	movq	r_0150(%rip),%rcx
       	jmp 	cgv32
cgv29:
       	movq	40(%rsi),%rdi
       	call	cdgvl
cgv30:
       	movq	$7,%rbx
       	subq	16(%rsi),%rbx
       	movq	32(%rsi),%rdi
       	call	cdgvl
       	movq	24(%rsi),%rdi
       	movq	0(%rdi),%rdi
       	salq	$3,%rdi
       	addq	r_0093(%rip),%rdi
       	subq	$40,%rdi
       	jmp 	cgv12
cgv31:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdx
       	jmp 	cgv19
cgv32:
       	call	cdwrd
cgv33:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdx
cgv34:
       	addq	$8,%rsp
       	popq	%rcx
       	popq	%rsi
       	popq	%rbx
       	orq 	%rdx,%rdx
       	jnz 	cgv35
       	movq	%rcx,%rdx
cgv35:
       	ret
cgv36:
       	call	cdwrd
       	orq 	%rdx,%rdx
       	jnz 	cgv34
       	movq	r_0126(%rip),%rcx
       	call	cdwrd
       	movq	(%rsp),%rsi
       	call	exbld
       	xorq	%rbx,%rbx
       	call	evalx
       	decq	_rc_(%rip)
       	js  	call_215
       	decq	_rc_(%rip)
       	jns 	l_0387
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0387:
call_215:
       	movq	(%rdi),%rcx
       	cmpq	r_0044(%rip),%rcx
       	jb  	cgv37
       	.data
r_0151:	.quad	olpt_
       	.text
       	movq	r_0151(%rip),%rcx
       	call	cdwrd
cgv37:
       	movq	%rdi,%rcx
       	call	cdwrd
       	xorq	%rdx,%rdx
       	jmp 	cgv34
cdwrd:
       	pushq	%rdi
       	pushq	%rcx
cdwd1:
       	movq	r_ccb(%rip),%rdi
       	orq 	%rdi,%rdi
       	jnz 	cdwd2
       	movq	$4000,%rcx
       	call	alloc
       	.data
r_0152:	.quad	b_cct
       	.text
       	movq	r_0152(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	$32,cwcof(%rip)
       	movq	%rcx,8(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,16(%rdi)
       	movq	%rdi,r_ccb(%rip)
cdwd2:
       	movq	cwcof(%rip),%rcx
       	addq	$40,%rcx
       	cmpq	8(%rdi),%rcx
       	jb  	cdwd4
       	cmpq	mxlen(%rip),%rcx
       	jae 	cdwd5
       	addq	$4000,%rcx
       	pushq	%rsi
       	movq	%rdi,%rsi
       	cmpq	mxlen(%rip),%rcx
       	jb  	cdwd3
       	movq	mxlen(%rip),%rcx
cdwd3:
       	call	alloc
       	movq	%rdi,r_ccb(%rip)
       	movq	r_0152(%rip),%rax
       	stosq
       	movq	%rcx,%rax
       	stosq
       	movq	16(%rsi),%rax
       	stosq
       	addq	$24,%rsi
       	movq	(%rsi),%rcx
       	shrq	$3,%rcx
       	rep 	movsq
       	popq	%rsi
       	jmp 	cdwd1
cdwd4:
       	movq	cwcof(%rip),%rcx
       	addq	$8,%rcx
       	movq	%rcx,cwcof(%rip)
       	movq	%rcx,24(%rdi)
       	subq	$8,%rcx
       	addq	%rcx,%rdi
       	popq	%rcx
       	movq	%rcx,(%rdi)
       	popq	%rdi
       	ret
cdwd5:
       	movq	$213,_rc_(%rip)
       	jmp 	err_
cmgen:
       	movq	%rsi,%rdi
       	addq	%rbx,%rdi
       	movq	(%rdi),%rdi
       	call	cdgvl
       	addq	$8,%rbx
       	ret
cmpil:
       	movq	$11,%rbx
cmp00:
       	xorq	%rax,%rax
       	pushq	%rax
       	decq	%rbx
       	jnz 	cmp00
       	movq	%rsp,cmpxs(%rip)
cmp01:
       	movq	scnpt(%rip),%rbx
       	movq	%rbx,scnse(%rip)
       	.data
r_0153:	.quad	ocer_
       	.text
       	movq	r_0153(%rip),%rcx
       	call	cdwrd
       	cmpq	scnil(%rip),%rbx
       	jb  	cmp04
cmpce:
       	xorq	%rdi,%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,cnind(%rip)
       	jnz 	cmpc2
       	cmpq	$0,stage(%rip)
       	jne 	cmp02
cmpc2:
       	call	readr
       	orq 	%rdi,%rdi
       	jz  	cmp09
       	call	nexts
       	movq	cmpsn(%rip),%rax
       	movq	%rax,lstsn(%rip)
       	movq	rdcln(%rip),%rax
       	movq	%rax,cmpln(%rip)
       	xorq	%rax,%rax
       	movq	%rax,scnpt(%rip)
       	jmp 	cmp04
cmp02:
       	movq	r_cim(%rip),%rdi
       	movq	scnpt(%rip),%rbx
       	leaq	16(%rdi,%rbx),%rdi
cmp03:
       	movq	scnil(%rip),%rax
       	cmpq	%rax,scnpt(%rip)
       	jae 	cmp09
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	incq	scnpt(%rip)
       	cmpq	$59,%rdx
       	jne 	cmp03
cmp04:
       	movq	r_cim(%rip),%rdi
       	movq	scnpt(%rip),%rbx
       	movq	%rbx,%rcx
       	leaq	16(%rdi,%rbx),%rdi
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	cmpq	$59,%rdx
       	je  	cmp12
       	cmpq	$42,%rdx
       	je  	cmpce
       	cmpq	$45,%rdx
       	je  	cmp32
       	movq	r_cim(%rip),%rax
       	movq	%rax,r_cmp(%rip)
       	.data
r_0154:	.quad	cmlab
       	.text
       	movq	r_0154(%rip),%rsi
       	movq	%rsi,r_cim(%rip)
       	addq	$16,%rsi
       	movb	%dl,(%rsi)
       	incq	%rsi
       	movq	$59,%rdx
       	movb	%dl,(%rsi)
       	xorq	%rsi,%rsi
       	xorq	%rax,%rax
       	movq	%rax,scnpt(%rip)
       	pushq	scnil(%rip)
       	movq	$2,scnil(%rip)
       	call	scane
       	popq	scnil(%rip)
       	movq	%rsi,%rdx
       	movq	r_cmp(%rip),%rsi
       	movq	%rsi,r_cim(%rip)
       	movq	%rbx,scnpt(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,scnbl(%rip)
       	jnz 	cmp12
       	movq	%rsi,%rdi
       	leaq	16(%rdi,%rbx),%rdi
       	cmpq	$15,%rdx
       	je  	cmp06
       	cmpq	$18,%rdx
       	je  	cmp06
cmple:
       	movq	r_cmp(%rip),%rax
       	movq	%rax,r_cim(%rip)
       	movq	$214,_rc_(%rip)
       	jmp 	err_
cmp05:
       	cmpq	$59,%rdx
       	je  	cmp07
       	incq	%rcx
       	cmpq	scnil(%rip),%rcx
       	je  	cmp07
cmp06:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	cmpq	$9,%rdx
       	je  	cmp07
       	cmpq	$32,%rdx
       	jne 	cmp05
cmp07:
       	movq	%rcx,scnpt(%rip)
       	subq	%rbx,%rcx
       	orq 	%rcx,%rcx
       	jz  	cmp12
       	xorq	%rdi,%rdi
       	call	sbstr
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_216
       	decq	_rc_(%rip)
       	jns 	l_0388
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0388:
call_216:
       	movq	%rdi,72(%rsp)
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	cmp11
       	.data
r_0155:	.quad	v_end
       	.text
       	movq	r_0155(%rip),%rax
       	cmpq	%rax,64(%rdi)
       	jne 	cmp11
       	addq	$4,stage(%rip)
       	call	scane
       	cmpq	$33,%rsi
       	je  	cmp10
       	cmpq	$15,%rsi
       	jne 	cmp08
       	movq	r_0040(%rip),%rax
       	cmpq	%rax,32(%rdi)
       	je  	cmp08
       	movq	32(%rdi),%rax
       	movq	%rax,80(%rsp)
       	call	scane
       	cmpq	$33,%rsi
       	je  	cmp10
cmp08:
       	movq	$215,_rc_(%rip)
       	jmp 	err_
cmp09:
       	xorq	%rdi,%rdi
       	addq	$4,stage(%rip)
       	cmpq	$5,stage(%rip)
       	je  	cmp10
       	movq	$216,_rc_(%rip)
       	jmp 	err_
cmp10:
       	.data
r_0156:	.quad	ostp_
       	.text
       	movq	r_0156(%rip),%rcx
       	call	cdwrd
       	jmp 	cmpse
cmp11:
       	cmpq	$0,stage(%rip)
       	jne 	cmp12
       	movq	r_0040(%rip),%rax
       	cmpq	%rax,32(%rdi)
       	je  	cmp12
       	xorq	%rax,%rax
       	movq	%rax,72(%rsp)
       	movq	$217,_rc_(%rip)
       	jmp 	err_
cmp12:
       	xorq	%rbx,%rbx
       	call	expan
       	movq	%rdi,0(%rsp)
       	xorq	%rax,%rax
       	movq	%rax,8(%rsp)
       	xorq	%rax,%rax
       	movq	%rax,16(%rsp)
       	xorq	%rax,%rax
       	movq	%rax,24(%rsp)
       	call	scane
       	cmpq	$30,%rsi
       	je  	cmp13
       	xorq	%rax,%rax
       	cmpq	%rax,cswno(%rip)
       	jnz 	cmp18
       	xorq	%rax,%rax
       	cmpq	%rax,72(%rsp)
       	jnz 	cmp18
       	movq	0(%rsp),%rdi
       	movq	(%rdi),%rcx
       	cmpq	r_0125(%rip),%rcx
       	je  	cmp18
       	cmpq	r_0134(%rip),%rcx
       	jae 	cmp18
       	movq	r_ccb(%rip),%rsi
       	movq	$32,24(%rsi)
       	movq	$32,cwcof(%rip)
       	incq	cmpsn(%rip)
       	jmp 	cmp01
cmp13:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scngo(%rip)
       	call	scane
       	cmpq	$33,%rsi
       	je  	cmp31
       	cmpq	$35,%rsi
       	je  	cmp14
       	cmpq	$34,%rsi
       	je  	cmp16
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scnrs(%rip)
       	call	scngf
       	xorq	%rax,%rax
       	cmpq	%rax,16(%rsp)
       	jnz 	cmp17
       	movq	%rdi,16(%rsp)
       	jmp 	cmp15
cmp14:
       	call	scngf
       	movq	$1,24(%rsp)
cmp15:
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rsp)
       	jnz 	cmp17
       	movq	%rdi,8(%rsp)
       	jmp 	cmp13
cmp16:
       	call	scngf
       	movq	$1,24(%rsp)
       	xorq	%rax,%rax
       	cmpq	%rax,16(%rsp)
       	jnz 	cmp17
       	movq	%rdi,16(%rsp)
       	jmp 	cmp13
cmp17:
       	movq	$218,_rc_(%rip)
       	jmp 	err_
cmp18:
       	xorq	%rax,%rax
       	movq	%rax,scnse(%rip)
       	movq	0(%rsp),%rdi
       	xorq	%rbx,%rbx
       	xorq	%rdx,%rdx
       	call	expap
       	decq	_rc_(%rip)
       	js  	call_217
       	decq	_rc_(%rip)
       	jns 	l_0389
       	jmp 	cmp19
l_0389:
call_217:
       	.data
r_0157:	.quad	opms_
       	.text
       	movq	r_0157(%rip),%rax
       	movq	%rax,24(%rdi)
       	movq	$18,16(%rdi)
cmp19:
       	call	cdgvl
       	movq	8(%rsp),%rdi
       	movq	%rdi,%rcx
       	orq 	%rdi,%rdi
       	jz  	cmp21
       	xorq	%rax,%rax
       	movq	%rax,64(%rsp)
       	cmpq	state(%rip),%rdi
       	ja  	cmp20
       	addq	$24,%rcx
       	call	cdwrd
       	jmp 	cmp22
cmp20:
       	cmpq	16(%rsp),%rdi
       	je  	cmp22
       	xorq	%rbx,%rbx
       	call	cdgcg
       	jmp 	cmp22
cmp21:
       	movq	cwcof(%rip),%rax
       	movq	%rax,64(%rsp)
       	movq	r_0153(%rip),%rcx
       	call	cdwrd
cmp22:
       	movq	16(%rsp),%rdi
       	movq	%rdi,%rcx
       	xorq	%rax,%rax
       	movq	%rax,48(%rsp)
       	orq 	%rdi,%rdi
       	jz  	cmp23
       	addq	$24,%rcx
       	cmpq	state(%rip),%rdi
       	jb  	cmpse
       	movq	cwcof(%rip),%rbx
       	.data
r_0158:	.quad	ogof_
       	.text
       	movq	r_0158(%rip),%rcx
       	call	cdwrd
       	.data
r_0159:	.quad	ofif_
       	.text
       	movq	r_0159(%rip),%rcx
       	call	cdwrd
       	call	cdgcg
       	movq	%rbx,%rcx
       	movq	r_0008(%rip),%rbx
       	jmp 	cmp25
cmp23:
       	.data
r_0160:	.quad	ounf_
       	.text
       	movq	r_0160(%rip),%rcx
       	movq	cswfl(%rip),%rdx
       	orq 	24(%rsp),%rdx
       	orq 	%rdx,%rdx
       	jz  	cmpse
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,48(%rsp)
       	movq	r_0153(%rip),%rcx
cmpse:
       	movq	r_0028(%rip),%rbx
cmp25:
       	movq	r_ccb(%rip),%rdi
       	movq	72(%rsp),%rsi
       	orq 	%rsi,%rsi
       	jz  	cmp26
       	xorq	%rax,%rax
       	movq	%rax,72(%rsp)
       	movq	%rdi,32(%rsi)
cmp26:
       	movq	%rbx,(%rdi)
       	movq	%rcx,32(%rdi)
       	movq	%rdi,%rsi
       	movq	24(%rdi),%rbx
       	movq	8(%rdi),%rdx
       	addq	%rbx,%rsi
       	subq	%rbx,%rdx
       	movq	r_0152(%rip),%rax
       	movq	%rax,(%rsi)
       	movq	$32,24(%rsi)
       	movq	$32,cwcof(%rip)
       	movq	%rdx,8(%rsi)
       	movq	%rsi,r_ccb(%rip)
       	xorq	%rax,%rax
       	movq	%rax,16(%rsi)
       	movq	cmpln(%rip),%rax
       	movq	%rax,16(%rdi)
       	movq	cmpsn(%rip),%rax
       	movq	%rax,8(%rdi)
       	incq	cmpsn(%rip)
       	movq	32(%rsp),%rsi
       	xorq	%rax,%rax
       	cmpq	%rax,40(%rsp)
       	jz  	cmp27
       	movq	%rdi,32(%rsi)
cmp27:
       	movq	56(%rsp),%rcx
       	orq 	%rcx,%rcx
       	jz  	cmp28
       	addq	%rcx,%rsi
       	movq	%rdi,(%rsi)
       	xorq	%rsi,%rsi
cmp28:
       	movq	48(%rsp),%rax
       	movq	%rax,40(%rsp)
       	movq	64(%rsp),%rax
       	movq	%rax,56(%rsp)
       	movq	%rdi,32(%rsp)
       	xorq	%rax,%rax
       	cmpq	%rax,80(%rsp)
       	jnz 	cmp29
       	movq	%rdi,80(%rsp)
cmp29:
       	cmpq	$4,stage(%rip)
       	jb  	cmp01
       	xorq	%rax,%rax
       	cmpq	%rax,cswls(%rip)
       	jz  	cmp30
       	call	listr
cmp30:
       	movq	80(%rsp),%rdi
       	addq	$88,%rsp
       	ret
cmp31:
       	movq	16(%rsp),%rbx
       	orq 	8(%rsp),%rbx
       	orq 	%rbx,%rbx
       	jnz 	cmp18
       	movq	$219,_rc_(%rip)
       	jmp 	err_
cmp32:
       	incq	%rbx
       	call	cncrd
       	xorq	%rax,%rax
       	movq	%rax,scnse(%rip)
       	jmp 	cmpce
cncrd:
       	movq	%rbx,scnpt(%rip)
       	movq	$4,%rcx
       	addq	$7,%rcx
       	shrq	$3,%rcx
       	movq	%rcx,cnswc(%rip)
cnc01:
       	movq	scnil(%rip),%rax
       	cmpq	%rax,scnpt(%rip)
       	jae 	cnc09
       	movq	r_cim(%rip),%rdi
       	addq	$16,%rdi
       	addq	scnpt(%rip),%rdi
       	xorq	%rcx,%rcx
       	movb	(%rdi),%cl
       	incq	%rdi
       	.data
r_0161:	.quad	65
       	.text
       	cmpq	r_0161(%rip),%rcx
       	jb  	l_0390
       	.data
r_0162:	.quad	90
       	.text
       	cmpq	r_0162(%rip),%rcx
       	ja  	l_0390
       	.data
r_0163:	.quad	32
       	.text
       	addq	r_0163(%rip),%rcx
l_0390:
       	cmpq	$105,%rcx
       	je  	cnc07
cnc0a:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scncc(%rip)
       	call	scane
       	xorq	%rax,%rax
       	movq	%rax,scncc(%rip)
       	orq 	%rsi,%rsi
       	jnz 	cnc06
       	movq	$4,%rcx
       	cmpq	%rcx,8(%rdi)
       	jb  	cnc08
       	movq	%rdi,%rsi
       	xorq	%rbx,%rbx
       	call	sbstr
       	movq	8(%rdi),%rcx
       	call	flstg
       	movq	%rdi,cnscc(%rip)
       	.data
r_0164:	.quad	ccnms
       	.text
       	movq	r_0164(%rip),%rdi
       	xorq	%rbx,%rbx
       	movq	$25,%rdx
cnc02:
       	movq	cnscc(%rip),%rsi
       	movq	cnswc(%rip),%rcx
       	jmp 	cnc04
cnc03:
       	addq	$8,%rdi
       	addq	$8,%rsi
cnc04:
       	movq	(%rdi),%rax
       	cmpq	%rax,16(%rsi)
       	jnz 	cnc05
       	decq	%rcx
       	jnz 	cnc03
       	movq	%rbx,%rsi
       	cmpq	$25,%rsi
       	jge 	cnc08
       	.data
r_0165:	.quad	l_0391
       	.text
       	movq	r_0165(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0391:
       	.quad	cnc37
       	.quad	cnc10
       	.quad	cnc08
       	.quad	cnc11
       	.quad	cnc41
       	.quad	cnc12
       	.quad	cnc13
       	.quad	cnc14
       	.quad	cnc15
       	.quad	cnc41
       	.quad	cnc44
       	.quad	cnc16
       	.quad	cnc17
       	.quad	cnc18
       	.quad	cnc19
       	.quad	cnc20
       	.quad	cnc21
       	.quad	cnc22
       	.quad	cnc24
       	.quad	cnc25
       	.quad	cnc27
       	.quad	cnc28
       	.quad	cnc31
       	.quad	cnc32
       	.quad	cnc36
       	.text
cnc05:
       	addq	$8,%rdi
       	decq	%rcx
       	jnz 	cnc05
       	incq	%rbx
       	decq	%rdx
       	jnz 	cnc02
       	jmp 	cnc08
cnc06:
       	movq	$247,_rc_(%rip)
       	jmp 	err_
cnc07:
       	xorq	%rcx,%rcx
       	movb	(%rdi),%cl
       	incq	%rdi
       	cmpq	r_0161(%rip),%rcx
       	jb  	l_0392
       	cmpq	r_0162(%rip),%rcx
       	ja  	l_0392
       	addq	r_0163(%rip),%rcx
l_0392:
       	cmpq	$110,%rcx
       	jne 	cnc0a
       	xorq	%rcx,%rcx
       	movb	(%rdi),%cl
       	cmpq	$48,%rcx
       	jb  	cnc0a
       	cmpq	$57,%rcx
       	ja  	cnc0a
       	addq	$2,scnpt(%rip)
       	call	scane
       	pushq	%rdi
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_218
       	decq	_rc_(%rip)
       	jns 	l_0393
       	jmp 	cnc06
l_0393:
       	decq	_rc_(%rip)
       	jns 	l_0394
       	jmp 	cnc06
l_0394:
call_218:
       	movq	%rdi,cswin(%rip)
cnc08:
       	movq	scnpt(%rip),%rcx
       	call	scane
       	cmpq	$9,%rsi
       	je  	cnc01
       	movq	%rcx,scnpt(%rip)
cnc09:
       	ret
cnc10:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,cswdb(%rip)
       	jmp 	cnc08
cnc11:
       	call	sysdm
       	jmp 	cnc09
cnc12:
       	xorq	%rax,%rax
       	cmpq	%rax,cswls(%rip)
       	jz  	cnc09
       	call	prtps
       	call	listt
       	jmp 	cnc09
cnc13:
       	xorq	%rax,%rax
       	movq	%rax,cswer(%rip)
       	jmp 	cnc08
cnc14:
       	xorq	%rax,%rax
       	movq	%rax,cswex(%rip)
       	jmp 	cnc08
cnc15:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,cswfl(%rip)
       	jmp 	cnc08
cnc16:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,cswls(%rip)
       	cmpq	$0,stage(%rip)
       	je  	cnc08
       	xorq	%rax,%rax
       	movq	%rax,lstpf(%rip)
       	call	listr
       	jmp 	cnc08
cnc17:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,cswer(%rip)
       	jmp 	cnc08
cnc18:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,cswex(%rip)
       	jmp 	cnc08
cnc19:
       	xorq	%rax,%rax
       	movq	%rax,cswfl(%rip)
       	jmp 	cnc08
cnc20:
       	xorq	%rax,%rax
       	movq	%rax,cswls(%rip)
       	jmp 	cnc08
cnc21:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,cswno(%rip)
       	jmp 	cnc08
cnc22:
       	xorq	%rax,%rax
       	movq	%rax,cswpr(%rip)
       	jmp 	cnc08
cnc24:
       	xorq	%rax,%rax
       	movq	%rax,cswno(%rip)
       	jmp 	cnc08
cnc25:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,cswpr(%rip)
       	jmp 	cnc08
cnc27:
       	xorq	%rax,%rax
       	movq	%rax,cswdb(%rip)
       	jmp 	cnc08
cnc28:
       	xorq	%rax,%rax
       	cmpq	%rax,cswls(%rip)
       	jz  	cnc09
       	call	scane
       	movq	$1,%rdx
       	cmpq	$33,%rdi
       	je  	cnc29
       	pushq	%rdi
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_219
       	decq	_rc_(%rip)
       	jns 	l_0395
       	jmp 	cnc06
l_0395:
       	decq	_rc_(%rip)
       	jns 	l_0396
       	jmp 	cnc06
l_0396:
call_219:
       	orq 	%rdx,%rdx
       	jnz 	cnc29
       	movq	$1,%rdx
cnc29:
       	addq	%rdx,lstlc(%rip)
       	movq	lstnp(%rip),%rax
       	cmpq	%rax,lstlc(%rip)
       	jb  	cnc30
       	call	prtps
       	call	listt
       	jmp 	cnc09
cnc30:
       	call	prtnl
       	decq	%rdx
       	jnz 	cnc30
       	jmp 	cnc09
cnc31:
       	.data
r_0166:	.quad	r_stl
       	.text
       	movq	r_0166(%rip),%rax
       	movq	%rax,cnr_t(%rip)
       	jmp 	cnc33
cnc32:
       	movq	r_0012(%rip),%rax
       	movq	%rax,r_stl(%rip)
       	.data
r_0167:	.quad	r_ttl
       	.text
       	movq	r_0167(%rip),%rax
       	movq	%rax,cnr_t(%rip)
cnc33:
       	movq	r_0012(%rip),%rdi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,cnttl(%rip)
       	movq	$7,%rbx
       	movq	scnil(%rip),%rcx
       	cmpq	%rbx,%rcx
       	jb  	cnc34
       	subq	%rbx,%rcx
       	movq	r_cim(%rip),%rsi
       	call	sbstr
cnc34:
       	movq	cnr_t(%rip),%rsi
       	movq	%rdi,(%rsi)
       	cmpq	r_0166(%rip),%rsi
       	je  	cnc09
       	xorq	%rax,%rax
       	cmpq	%rax,precl(%rip)
       	jnz 	cnc09
       	xorq	%rax,%rax
       	cmpq	%rax,prich(%rip)
       	jz  	cnc09
       	movq	8(%rdi),%rsi
       	movq	%rsi,%rcx
       	orq 	%rsi,%rsi
       	jz  	cnc35
       	addq	$10,%rsi
       	cmpq	prlen(%rip),%rsi
       	ja  	cnc09
       	addq	$4,%rcx
cnc35:
       	movq	%rcx,lstpo(%rip)
       	jmp 	cnc09
cnc36:
       	call	systt
       	jmp 	cnc08
cnc37:
       	call	scane
       	xorq	%rdx,%rdx
       	cmpq	$33,%rsi
       	je  	cnc38
       	pushq	%rdi
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_220
       	decq	_rc_(%rip)
       	jns 	l_0397
       	jmp 	cnc06
l_0397:
       	decq	_rc_(%rip)
       	jns 	l_0398
       	jmp 	cnc06
l_0398:
call_220:
cnc38:
       	movq	%rdx,kvcas(%rip)
       	jmp 	cnc09
cnc41:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scncc(%rip)
       	call	scane
       	xorq	%rax,%rax
       	movq	%rax,scncc(%rip)
       	cmpq	$18,%rsi
       	jne 	cnc06
       	movq	r_0025(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	cnc06
       	movq	%rdi,r_ifn(%rip)
       	movq	r_inc(%rip),%rsi
       	xorq	%rbx,%rbx
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_221
       	decq	_rc_(%rip)
       	jns 	l_0399
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0399:
call_221:
       	cmpq	r_0014(%rip),%rdi
       	je  	cnc09
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	movq	r_ifn(%rip),%rdi
       	call	trimr
       	movq	r_inc(%rip),%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_222
       	decq	_rc_(%rip)
       	jns 	l_0400
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0400:
call_222:
       	movq	r_0014(%rip),%rax
       	movq	%rax,16(%rsi)
       	incq	cnind(%rip)
       	movq	cnind(%rip),%rcx
       	cmpq	$9,%rcx
       	ja  	cnc42
       	movq	r_ifa(%rip),%rsi
       	addq	$2,%rcx
       	salq	$3,%rcx
       	addq	%rcx,%rsi
       	movq	r_sfc(%rip),%rax
       	movq	%rax,(%rsi)
       	movq	%rcx,%rsi
       	movq	rdnln(%rip),%r12
       	call	icbld
       	addq	r_ifl(%rip),%rsi
       	movq	%rdi,(%rsi)
       	movq	cswin(%rip),%rcx
       	movq	r_ifn(%rip),%rsi
       	call	alocs
       	call	sysif
       	decq	_rc_(%rip)
       	js  	call_223
       	decq	_rc_(%rip)
       	jns 	l_0401
       	jmp 	cnc43
l_0401:
call_223:
       	xorq	%rbx,%rbx
       	call	trimr
       	movq	%rdi,r_sfc(%rip)
       	movq	cmpsn(%rip),%r12
       	call	icbld
       	movq	r_sfn(%rip),%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_224
       	decq	_rc_(%rip)
       	jns 	l_0402
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0402:
call_224:
       	movq	r_sfc(%rip),%rax
       	movq	%rax,16(%rsi)
       	xorq	%rax,%rax
       	movq	%rax,rdnln(%rip)
       	cmpq	$0,stage(%rip)
       	je  	cnc09
       	cmpq	$1,cnind(%rip)
       	jne 	cnc09
       	movq	r_cim(%rip),%rax
       	movq	%rax,r_ici(%rip)
       	movq	scnpt(%rip),%rax
       	movq	%rax,cnspt(%rip)
       	movq	scnil(%rip),%rax
       	movq	%rax,cnsil(%rip)
       	jmp 	cnc09
cnc42:
       	movq	$284,_rc_(%rip)
       	jmp 	err_
cnc43:
       	movq	%rdi,dnamp(%rip)
       	movq	$285,_rc_(%rip)
       	jmp 	err_
cnc44:
       	call	scane
       	cmpq	$18,%rsi
       	jne 	cnc06
       	movq	r_0023(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	cnc06
       	movq	8(%rdi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jle 	cnc06
       	cmpq	$0,stage(%rip)
       	je  	cnc45
       	movq	%r12,cmpln(%rip)
       	jmp 	cnc46
cnc45:
       	subq	intv1(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,rdnln(%rip)
cnc46:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scncc(%rip)
       	call	scane
       	xorq	%rax,%rax
       	movq	%rax,scncc(%rip)
       	cmpq	$33,%rsi
       	je  	cnc47
       	cmpq	$18,%rsi
       	jne 	cnc06
       	movq	r_0025(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	cnc06
       	call	newfn
       	jmp 	cnc09
cnc47:
       	decq	scnpt(%rip)
       	jmp 	cnc09
dffnc:
       	movq	r_0087(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	dffn1
       	incq	24(%rsi)
dffn1:
       	movq	%rdi,%rcx
       	movq	40(%rdi),%rdi
       	movq	r_0087(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	dffn2
       	movq	24(%rdi),%rbx
       	decq	%rbx
       	movq	%rbx,24(%rdi)
       	orq 	%rbx,%rbx
       	jnz 	dffn2
       	call	sysul
dffn2:
       	movq	%rcx,%rdi
       	movq	%rsi,%rcx
       	cmpq	r_0010(%rip),%rdi
       	jb  	dffn3
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	dffn3
       	movq	64(%rdi),%rsi
       	movq	0(%rsi),%rbx
       	andq	btfnc(%rip),%rbx
       	orq 	%rbx,%rbx
       	jz  	dffn3
       	movq	$248,_rc_(%rip)
       	jmp 	err_
dffn3:
       	movq	%rcx,40(%rdi)
       	movq	%rcx,%rsi
       	ret
dtach:
       	movq	%rsi,dtcnb(%rip)
       	addq	%rcx,%rsi
       	movq	%rsi,dtcnm(%rip)
dtch1:
       	movq	%rsi,%rdi
dtch2:
       	movq	(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	dtch6
       	movq	8(%rsi),%rcx
       	cmpq	$0,%rcx
       	je  	dtch3
       	cmpq	$3,%rcx
       	je  	dtch3
       	addq	$16,%rsi
       	jmp 	dtch1
dtch3:
       	movq	16(%rsi),%rax
       	movq	%rax,(%rdi)
       	movq	%rsi,%rcx
       	movq	%rdi,%rbx
       	movq	24(%rsi),%rsi
       	orq 	%rsi,%rsi
       	jz  	dtch5
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	dtch5
dtch4:
       	movq	%rsi,%rdi
       	movq	24(%rsi),%rsi
       	orq 	%rsi,%rsi
       	jz  	dtch5
       	movq	16(%rsi),%rdx
       	addq	32(%rsi),%rdx
       	cmpq	dtcnm(%rip),%rdx
       	jne 	dtch4
       	movq	24(%rsi),%rax
       	movq	%rax,24(%rdi)
dtch5:
       	movq	%rcx,%rsi
       	movq	%rbx,%rdi
       	addq	$16,%rsi
       	jmp 	dtch2
dtch6:
       	movq	dtcnb(%rip),%rdi
       	call	setvr
       	ret
dtype:
       	movq	r_0036(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	dtyp1
       	movq	(%rdi),%rdi
       	movq	%rdi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rdi
       	salq	$3,%rdi
       	.data
r_0168:	.quad	scnmt
       	.text
       	movq	r_0168(%rip),%rax
       	addq	%rdi,%rax
       	movq	(%rax),%rdi
       	ret
dtyp1:
       	movq	16(%rdi),%rdi
       	movq	32(%rdi),%rdi
       	ret
dumpr:
       	orq 	%rdi,%rdi
       	jz  	dmp28
       	cmpq	$3,%rdi
       	ja  	dmp29
       	xorq	%rsi,%rsi
       	xorq	%rbx,%rbx
       	movq	%rdi,dmarg(%rip)
       	xorq	%rax,%rax
       	movq	%rax,dnams(%rip)
       	call	gbcol
       	call	prtpg
       	.data
r_0169:	.quad	dmhdv
       	.text
       	movq	r_0169(%rip),%rdi
       	call	prtst
       	call	prtnl
       	call	prtnl
       	xorq	%rax,%rax
       	movq	%rax,dmvch(%rip)
       	movq	hshtb(%rip),%rcx
dmp00:
       	movq	%rcx,%rdi
       	addq	$8,%rcx
       	subq	$48,%rdi
dmp01:
       	movq	48(%rdi),%rdi
       	orq 	%rdi,%rdi
       	jz  	dmp09
       	movq	%rdi,%rsi
dmp02:
       	movq	16(%rsi),%rsi
       	cmpq	$3,dmarg(%rip)
       	je  	dmp2a
       	cmpq	r_0012(%rip),%rsi
       	je  	dmp01
dmp2a:
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	dmp02
       	movq	%rdi,%rdx
       	addq	$48,%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rdi)
       	jnz 	dmp03
       	movq	16(%rdi),%rdi
dmp03:
       	movq	%rdi,%rbx
       	movq	%rcx,dmpsv(%rip)
       	.data
r_0170:	.quad	dmvch
       	.text
       	movq	r_0170(%rip),%rcx
dmp04:
       	movq	%rcx,dmpch(%rip)
       	movq	%rcx,%rsi
       	movq	(%rsi),%rdi
       	orq 	%rdi,%rdi
       	jz  	dmp08
       	addq	$48,%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rdi)
       	jnz 	dmp05
       	movq	16(%rdi),%rdi
dmp05:
       	movq	%rbx,%rsi
       	movq	8(%rsi),%rcx
       	addq	$16,%rsi
       	cmpq	8(%rdi),%rcx
       	ja  	dmp06
       	addq	$16,%rdi
       	repe	cmpsb
       	movq	$0,%rsi
       	movq	%rsi,%rdi
       	ja  	dmp07
       	jb  	dmp08
       	jmp 	dmp08
dmp06:
       	movq	8(%rdi),%rcx
       	addq	$16,%rdi
       	repe	cmpsb
       	movq	$0,%rsi
       	movq	%rsi,%rdi
       	ja  	dmp07
       	jb  	dmp08
dmp07:
       	movq	dmpch(%rip),%rsi
       	movq	(%rsi),%rcx
       	jmp 	dmp04
dmp08:
       	movq	dmpch(%rip),%rsi
       	movq	dmpsv(%rip),%rcx
       	movq	%rdx,%rdi
       	movq	(%rsi),%rax
       	movq	%rax,0(%rdi)
       	movq	%rdi,(%rsi)
       	jmp 	dmp01
dmp09:
       	cmpq	hshte(%rip),%rcx
       	jne 	dmp00
dmp10:
       	movq	dmvch(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	dmp11
       	movq	(%rdi),%rax
       	movq	%rax,dmvch(%rip)
       	call	setvr
       	movq	%rdi,%rsi
       	movq	$16,%rcx
       	call	prtnv
       	jmp 	dmp10
dmp11:
       	call	prtnl
       	call	prtnl
       	.data
r_0171:	.quad	dmhdk
       	.text
       	movq	r_0171(%rip),%rdi
       	call	prtst
       	call	prtnl
       	call	prtnl
       	.data
r_0172:	.quad	vdmkw
       	.text
       	movq	r_0172(%rip),%rsi
dmp12:
       	lodsq
       	movq	%rax,%rdi
       	orq 	%rdi,%rdi
       	jz  	dmp13
       	cmpq	$1,%rdi
       	je  	dmp12
       	movq	$38,%rcx
       	call	prtch
       	call	prtst
       	movq	8(%rdi),%rcx
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	addq	%rcx,%rdi
       	movq	(%rdi),%rax
       	movq	%rax,dmpkn(%rip)
       	.data
r_0173:	.quad	tmbeb
       	.text
       	movq	r_0173(%rip),%rdi
       	call	prtst
       	movq	%rsi,dmpsv(%rip)
       	.data
r_0174:	.quad	dmpkb
       	.text
       	movq	r_0174(%rip),%rsi
       	.data
r_0175:	.quad	b_kvt
       	.text
       	movq	r_0175(%rip),%rax
       	movq	%rax,(%rsi)
       	movq	r_0115(%rip),%rax
       	movq	%rax,8(%rsi)
       	movq	$8,%rcx
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_225
       	decq	_rc_(%rip)
       	jns 	l_0403
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0403:
call_225:
       	call	prtvl
       	call	prtnl
       	movq	dmpsv(%rip),%rsi
       	jmp 	dmp12
dmp13:
       	cmpq	$1,dmarg(%rip)
       	je  	dmp27
       	movq	dnamb(%rip),%rdi
dmp14:
       	cmpq	dnamp(%rip),%rdi
       	je  	dmp27
       	movq	(%rdi),%rcx
       	cmpq	r_0021(%rip),%rcx
       	je  	dmp16
       	cmpq	r_0065(%rip),%rcx
       	je  	dmp17
       	cmpq	r_0036(%rip),%rcx
       	je  	dmp18
       	cmpq	r_0022(%rip),%rcx
       	je  	dmp19
dmp15:
       	call	blkln
       	addq	%rcx,%rdi
       	jmp 	dmp14
dmp16:
       	movq	$24,%rbx
       	jmp 	dmp19
dmp17:
       	movq	24(%rdi),%rbx
       	addq	$8,%rbx
       	jmp 	dmp19
dmp18:
       	movq	$24,%rbx
dmp19:
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rdi)
       	jz  	dmp15
       	call	blkln
       	movq	%rdi,%rsi
       	movq	%rcx,dmpsv(%rip)
       	movq	%rbx,%rcx
       	call	prtnl
       	movq	%rcx,dmpsa(%rip)
       	call	prtvl
       	movq	dmpsa(%rip),%rcx
       	call	prtnl
       	movq	r_0022(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	dmp22
       	subq	$8,%rcx
dmp20:
       	movq	%rsi,%rdi
       	addq	$8,%rcx
       	addq	%rcx,%rdi
       	cmpq	dmpsv(%rip),%rcx
       	je  	dmp14
       	subq	$16,%rdi
dmp21:
       	movq	16(%rdi),%rdi
       	cmpq	$3,dmarg(%rip)
       	je  	dmp2b
       	cmpq	r_0012(%rip),%rdi
       	je  	dmp20
dmp2b:
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	dmp21
       	call	prtnv
       	jmp 	dmp20
dmp22:
       	movq	$32,%rdx
       	movq	$16,%rcx
dmp23:
       	pushq	%rsi
       	addq	%rdx,%rsi
       	addq	$8,%rdx
       	subq	$24,%rsi
dmp24:
       	movq	24(%rsi),%rsi
       	cmpq	(%rsp),%rsi
       	je  	dmp26
       	movq	%rsi,%rdi
dmp25:
       	movq	16(%rdi),%rdi
       	cmpq	r_0012(%rip),%rdi
       	je  	dmp24
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	dmp25
       	movq	%rdx,dmpsv(%rip)
       	call	prtnv
       	movq	dmpsv(%rip),%rdx
       	jmp 	dmp24
dmp26:
       	popq	%rsi
       	cmpq	16(%rsi),%rdx
       	jne 	dmp23
       	movq	%rsi,%rdi
       	addq	%rdx,%rdi
       	jmp 	dmp14
dmp27:
       	call	prtpg
dmp28:
       	ret
dmp29:
       	call	sysdm
       	jmp 	dmp28
ermsg:
       	movq	kvert(%rip),%rcx
       	.data
r_0176:	.quad	ermms
       	.text
       	movq	r_0176(%rip),%rdi
       	call	prtst
       	call	ertex
       	addq	$1000,%rcx
       	movq	%rcx,%r12
       	movq	profs(%rip),%rbx
       	call	prtin
       	movq	prbuf(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	movq	$32,%rcx
       	movb	%cl,(%rsi)
       	xorq	%rsi,%rsi
       	movq	%rdi,%rcx
       	.data
r_0177:	.quad	ermns
       	.text
       	movq	r_0177(%rip),%rdi
       	call	prtst
       	movq	%rcx,%rdi
       	call	prtst
       	call	prtis
       	call	prtis
       	ret
ertex:
       	movq	%rcx,ertwa(%rip)
       	movq	%rbx,ertwb(%rip)
       	call	sysem
       	movq	%rdi,%rsi
       	movq	8(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jz  	ert02
       	xorq	%rbx,%rbx
       	call	sbstr
       	movq	%rdi,r_etx(%rip)
ert01:
       	movq	ertwb(%rip),%rbx
       	movq	ertwa(%rip),%rcx
       	ret
ert02:
       	movq	r_etx(%rip),%rdi
       	jmp 	ert01
evali:
       	call	evalp
       	decq	_rc_(%rip)
       	js  	call_226
       	decq	_rc_(%rip)
       	jns 	l_0404
       	jmp 	evli1
l_0404:
call_226:
       	pushq	%rsi
       	movq	8(%rdi),%rsi
       	movq	%rdi,evlio(%rip)
       	movq	%rdx,evlif(%rip)
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_227
       	decq	_rc_(%rip)
       	jns 	l_0405
       	jmp 	evli2
l_0405:
       	decq	_rc_(%rip)
       	jns 	l_0406
       	jmp 	evli3
l_0406:
call_227:
       	movq	%rdi,evliv(%rip)
       	.data
r_0178:	.quad	evlin
       	.text
       	movq	r_0178(%rip),%rdi
       	movq	r_0081(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rsi,8(%rdi)
       	movq	$4,_rc_(%rip)
       	ret
evli1:
       	movq	$3,_rc_(%rip)
       	ret
evli2:
       	movq	$1,_rc_(%rip)
       	ret
evli3:
       	movq	$2,_rc_(%rip)
       	ret
evalp:
       	movq	16(%rdi),%rsi
       	.data
r_0179:	.quad	b_exl
       	.text
       	movq	r_0179(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	evlp1
       	movq	8(%rsi),%rsi
       	movq	16(%rsi),%rsi
       	movq	(%rsi),%rcx
       	.data
r_0180:	.quad	b_t__
       	.text
       	cmpq	r_0180(%rip),%rcx
       	ja  	evlp3
evlp1:
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	pushq	%rdi
       	pushq	%rbx
       	pushq	r_pms(%rip)
       	pushq	pmssl(%rip)
       	pushq	pmdfl(%rip)
       	pushq	pmhbs(%rip)
       	movq	16(%rdi),%rdi
evlp2:
       	xorq	%rbx,%rbx
       	call	evalx
       	decq	_rc_(%rip)
       	js  	call_228
       	decq	_rc_(%rip)
       	jns 	l_0407
       	jmp 	evlp4
l_0407:
call_228:
       	movq	(%rdi),%rcx
       	.data
r_0181:	.quad	b_e__
       	.text
       	cmpq	r_0181(%rip),%rcx
       	jb  	evlp2
       	movq	%rdi,%rsi
       	popq	pmhbs(%rip)
       	popq	pmdfl(%rip)
       	popq	pmssl(%rip)
       	popq	r_pms(%rip)
       	popq	%rbx
       	popq	%rdi
       	movq	%rdi,%rdx
       	movq	$0,_rc_(%rip)
       	ret
evlp3:
       	xorq	%rdx,%rdx
       	movq	$0,_rc_(%rip)
       	ret
evlp4:
       	popq	pmhbs(%rip)
       	popq	pmdfl(%rip)
       	popq	pmssl(%rip)
       	popq	r_pms(%rip)
       	addq	$16,%rsp
       	movq	$1,_rc_(%rip)
       	ret
evals:
       	call	evalp
       	decq	_rc_(%rip)
       	js  	call_229
       	decq	_rc_(%rip)
       	jns 	l_0408
       	jmp 	evls1
l_0408:
call_229:
       	pushq	8(%rdi)
       	pushq	%rbx
       	pushq	%rsi
       	xorq	%rbx,%rbx
       	xorq	%rdx,%rdx
       	movq	r_0067(%rip),%rsi
       	call	patst
       	decq	_rc_(%rip)
       	js  	call_230
       	decq	_rc_(%rip)
       	jns 	l_0409
       	jmp 	evls2
l_0409:
call_230:
       	popq	%rbx
       	popq	8(%rdi)
       	movq	$3,_rc_(%rip)
       	ret
evls1:
       	movq	$2,_rc_(%rip)
       	ret
evls2:
       	addq	$16,%rsp
       	movq	$1,_rc_(%rip)
       	ret
evalx:
       	movq	r_0179(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	evlx2
       	movq	8(%rdi),%rsi
       	movq	$16,%rcx
       	orq 	%rbx,%rbx
       	jnz 	evlx1
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_231
       	decq	_rc_(%rip)
       	jns 	l_0410
       	jmp 	evlx9
l_0410:
call_231:
evlx1:
       	movq	$0,_rc_(%rip)
       	ret
evlx2:
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rdx
       	movq	r_cod(%rip),%rcx
       	subq	%rcx,%rdx
       	pushq	%rcx
       	pushq	%rdx
       	pushq	flptr(%rip)
       	pushq	%rbx
       	pushq	$32
       	movq	flptr(%rip),%rax
       	movq	%rax,gtcef(%rip)
       	movq	r_cod(%rip),%rax
       	movq	%rax,r_gtc(%rip)
       	movq	%rsp,flptr(%rip)
       	movq	%rdi,r_cod(%rip)
       	movq	kvstn(%rip),%rax
       	movq	%rax,8(%rdi)
       	addq	$40,%rdi
       	movq	%rdi,%rax
       	movq	%rax,reg_cp(%rip)
       	cmpq	$3,stage(%rip)
       	jne 	evlx0
       	movq	$6,stage(%rip)
evlx0:
       	xorq	%rsi,%rsi
       	movq	reg_cp(%rip),%rax
       	movq	(%rax),%rax
       	movq	%rax,%rdi
       	addq	$8,reg_cp(%rip)
       	jmp 	*(%rdi)
evlx3:
       	popq	%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rsp)
       	jz  	evlx5
       	movq	$249,_rc_(%rip)
       	jmp 	err_
evlx4:
       	popq	%rcx
       	popq	%rsi
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rsp)
       	jnz 	evlx5
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_232
       	decq	_rc_(%rip)
       	jns 	l_0411
       	jmp 	evlx6
l_0411:
call_232:
evlx5:
       	xorq	%rbx,%rbx
       	jmp 	evlx7
evlx6:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
evlx7:
       	cmpq	$6,stage(%rip)
       	jne 	evlx8
       	movq	$3,stage(%rip)
evlx8:
       	addq	$16,%rsp
       	popq	flptr(%rip)
       	popq	%rdx
       	addq	(%rsp),%rdx
       	popq	r_cod(%rip)
       	movq	%rdx,%rax
       	movq	%rax,reg_cp(%rip)
       	orq 	%rbx,%rbx
       	jz  	evlx1
evlx9:
       	movq	$1,_rc_(%rip)
       	ret
exbld:
       	movq	%rsi,%rcx
       	subq	$40,%rcx
       	pushq	%rcx
       	movq	cwcof(%rip),%rcx
       	subq	%rsi,%rcx
       	addq	$40,%rcx
       	call	alloc
       	pushq	%rdi
       	movq	r_0179(%rip),%rax
       	movq	%rax,0(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,8(%rdi)
       	movq	cmpln(%rip),%rax
       	movq	%rax,16(%rdi)
       	movq	%rcx,24(%rdi)
       	.data
r_0182:	.quad	ofex_
       	.text
       	movq	r_0182(%rip),%rax
       	movq	%rax,32(%rdi)
       	addq	$40,%rdi
       	movq	%rsi,cwcof(%rip)
       	addq	r_ccb(%rip),%rsi
       	subq	$40,%rcx
       	pushq	%rcx
       	shrq	$3,%rcx
       	rep 	movsq
       	popq	%rcx
       	shrq	$3,%rcx
       	movq	(%rsp),%rsi
       	addq	$40,%rsi
       	movq	8(%rsp),%rbx
exbl1:
       	lodsq
       	movq	%rax,%rdi
       	cmpq	r_0141(%rip),%rdi
       	je  	exbl3
       	cmpq	r_0148(%rip),%rdi
       	je  	exbl3
       	decq	%rcx
       	jnz 	exbl1
exbl2:
       	popq	%rdi
       	popq	%rsi
       	ret
exbl3:
       	subq	%rbx,(%rsi)
       	addq	$8,%rsi
       	decq	%rcx
       	jnz 	exbl4
exbl4:
       	decq	%rcx
       	jnz 	exbl5
exbl5:
       	lodsq
       	movq	%rax,%rdi
       	cmpq	r_0141(%rip),%rdi
       	je  	exbl3
       	cmpq	r_0142(%rip),%rdi
       	je  	exbl3
       	cmpq	r_0143(%rip),%rdi
       	je  	exbl3
       	cmpq	r_0148(%rip),%rdi
       	je  	exbl3
       	decq	%rcx
       	jnz 	exbl5
       	jmp 	exbl2
expan:
       	xorq	%rax,%rax
       	pushq	%rax
       	xorq	%rcx,%rcx
       	xorq	%rdx,%rdx
exp01:
       	call	scane
       	addq	%rcx,%rsi
       	.data
r_0183:	.quad	l_0412
       	.text
       	movq	r_0183(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0412:
       	.quad	exp27
       	.quad	exp27
       	.quad	exp04
       	.quad	exp06
       	.quad	exp06
       	.quad	exp04
       	.quad	exp08
       	.quad	exp08
       	.quad	exp09
       	.quad	exp02
       	.quad	exp05
       	.quad	exp11
       	.quad	exp10
       	.quad	exp10
       	.quad	exp04
       	.quad	exp03
       	.quad	exp03
       	.quad	exp04
       	.quad	exp03
       	.quad	exp03
       	.quad	exp04
       	.quad	exp05
       	.quad	exp05
       	.quad	exp26
       	.quad	exp02
       	.quad	exp05
       	.quad	exp12
       	.quad	exp02
       	.quad	exp05
       	.quad	exp18
       	.quad	exp02
       	.quad	exp05
       	.quad	exp19
       	.quad	exp02
       	.quad	exp05
       	.quad	exp19
       	.text
exp02:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scnrs(%rip)
       	movq	r_0012(%rip),%rdi
exp03:
       	pushq	%rdi
       	movq	$2,%rcx
       	jmp 	exp01
exp04:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scnrs(%rip)
       	.data
r_0184:	.quad	opdvc
       	.text
       	movq	r_0184(%rip),%rdi
       	orq 	%rbx,%rbx
       	jz  	exp4a
       	.data
r_0185:	.quad	opdvp
       	.text
       	movq	r_0185(%rip),%rdi
exp4a:
       	xorq	%rax,%rax
       	cmpq	%rax,scnbl(%rip)
       	jnz 	exp26
       	movq	$220,_rc_(%rip)
       	jmp 	err_
exp05:
       	movq	$221,_rc_(%rip)
       	jmp 	err_
exp06:
       	movq	$4,%rsi
       	xorq	%rdi,%rdi
exp07:
       	pushq	%rdi
       	pushq	%rdx
       	pushq	%rbx
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	xorq	%rcx,%rcx
       	movq	%rsi,%rbx
       	movq	$1,%rdx
       	jmp 	exp01
exp08:
       	movq	$222,_rc_(%rip)
       	jmp 	err_
exp09:
       	popq	%rdi
       	movq	$3,%rsi
       	jmp 	exp07
exp10:
       	movq	$5,%rsi
       	jmp 	exp07
exp11:
       	incq	%rdx
       	call	expdm
       	xorq	%rax,%rax
       	pushq	%rax
       	xorq	%rcx,%rcx
       	cmpq	$2,%rbx
       	ja  	exp01
       	movq	$223,_rc_(%rip)
       	jmp 	err_
exp12:
       	cmpq	$1,%rbx
       	je  	exp20
       	cmpq	$5,%rbx
       	je  	exp13
       	cmpq	$4,%rbx
       	je  	exp14
       	movq	$224,_rc_(%rip)
       	jmp 	err_
exp13:
       	movq	$1,%rsi
       	jmp 	exp15
exp14:
       	cmpq	$1,%rdx
       	je  	exp17
       	movq	$17,%rsi
exp15:
       	call	expdm
       	movq	%rdx,%rcx
       	addq	$4,%rcx
       	salq	$3,%rcx
       	call	alloc
       	movq	r_0125(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rsi,16(%rdi)
       	movq	%rcx,8(%rdi)
       	addq	%rcx,%rdi
exp16:
       	subq	$8,%rdi
       	popq	(%rdi)
       	popq	%rbx
       	decq	%rdx
       	jnz 	exp16
       	subq	$32,%rdi
       	popq	%rdx
       	movq	(%rsp),%rax
       	movq	%rax,24(%rdi)
       	movq	%rdi,(%rsp)
       	movq	$2,%rcx
       	jmp 	exp01
exp17:
       	call	expdm
       	popq	%rdi
       	popq	%rbx
       	popq	%rdx
       	movq	%rdi,(%rsp)
       	movq	$2,%rcx
       	jmp 	exp01
exp18:
       	movq	$0,%rsi
       	cmpq	$3,%rbx
       	je  	exp15
       	cmpq	$2,%rbx
       	je  	exp20
       	movq	$225,_rc_(%rip)
       	jmp 	err_
exp19:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scnrs(%rip)
       	movq	%rbx,%rsi
       	.data
r_0186:	.quad	l_0413
       	.text
       	movq	r_0186(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0413:
       	.quad	exp20
       	.quad	exp22
       	.quad	exp23
       	.quad	exp24
       	.quad	exp21
       	.quad	exp21
       	.text
exp20:
       	call	expdm
       	popq	%rdi
       	addq	$8,%rsp
       	ret
exp21:
       	movq	$226,_rc_(%rip)
       	jmp 	err_
exp22:
       	movq	$227,_rc_(%rip)
       	jmp 	err_
exp23:
       	movq	$228,_rc_(%rip)
       	jmp 	err_
exp24:
       	movq	$229,_rc_(%rip)
       	jmp 	err_
exp25:
       	movq	%rdi,expsv(%rip)
       	call	expop
       	movq	expsv(%rip),%rdi
exp26:
       	movq	8(%rsp),%rsi
       	cmpq	$5,%rsi
       	jbe 	exp27
       	movq	16(%rsi),%rax
       	cmpq	%rax,24(%rdi)
       	jb  	exp25
exp27:
       	pushq	%rdi
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	movq	$1,%rcx
       	.data
r_0187:	.quad	opdvs
       	.text
       	cmpq	r_0187(%rip),%rdi
       	jne 	exp01
       	xorq	%rcx,%rcx
       	jmp 	exp01
expap:
       	pushq	%rsi
       	movq	r_0125(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	expp2
       	movq	16(%rdi),%rcx
       	cmpq	$10,%rcx
       	je  	expp1
       	cmpq	$18,%rcx
       	je  	expp1
       	cmpq	$9,%rcx
       	jne 	expp2
       	movq	40(%rdi),%rsi
       	movq	r_0125(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	expp2
       	cmpq	$10,16(%rsi)
       	jne 	expp2
       	movq	32(%rsi),%rax
       	movq	%rax,40(%rdi)
       	movq	%rdi,32(%rsi)
       	movq	%rsi,%rdi
expp1:
       	popq	%rsi
       	movq	$0,_rc_(%rip)
       	ret
expp2:
       	popq	%rsi
       	movq	$1,_rc_(%rip)
       	ret
expdm:
       	popq	prc_004(%rip)
       	movq	%rsi,r_exs(%rip)
exdm1:
       	cmpq	$5,8(%rsp)
       	jbe 	exdm2
       	call	expop
       	jmp 	exdm1
exdm2:
       	movq	r_exs(%rip),%rsi
       	xorq	%rax,%rax
       	movq	%rax,r_exs(%rip)
       	movq	$0,_rc_(%rip)
       	movq	prc_004(%rip),%rax
       	jmp 	*%rax
expop:
       	popq	prc_005(%rip)
       	movq	8(%rsp),%rdi
       	cmpq	$999,16(%rdi)
       	je  	expo2
       	movq	$48,%rcx
       	call	alloc
       	popq	32(%rdi)
       	popq	%rsi
       	movq	(%rsp),%rax
       	movq	%rax,40(%rdi)
expo1:
       	movq	r_0125(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	8(%rsi),%rax
       	movq	%rax,16(%rdi)
       	movq	%rsi,24(%rdi)
       	movq	%rcx,8(%rdi)
       	movq	%rdi,(%rsp)
       	movq	$0,_rc_(%rip)
       	movq	prc_005(%rip),%rax
       	jmp 	*%rax
expo2:
       	movq	$40,%rcx
       	call	alloc
       	popq	32(%rdi)
       	movq	(%rsp),%rsi
       	jmp 	expo1
filnm:
       	pushq	%rbx
       	orq 	%rdx,%rdx
       	jz  	filn3
       	movq	r_sfn(%rip),%rsi
       	orq 	%rsi,%rsi
       	jz  	filn3
       	movq	32(%rsi),%rbx
       	cmpq	r_sfn(%rip),%rbx
       	je  	filn3
       	pushq	%rdi
       	movq	%rbx,%rdi
       	pushq	%rdx
filn1:
       	movq	%rdi,%rsi
       	movq	8(%rsi),%rdi
       	movq	8(%rdi),%r12
       	movq	%r12,%rdx
       	cmpq	%rdx,(%rsp)
       	jb  	filn2
       	movq	%rsi,%rbx
       	movq	24(%rsi),%rdi
       	cmpq	r_sfn(%rip),%rdi
       	jne 	filn1
filn2:
       	movq	%rbx,%rsi
       	movq	16(%rsi),%rsi
       	popq	%rdx
       	popq	%rdi
       	popq	%rbx
       	ret
filn3:
       	popq	%rbx
       	movq	r_0012(%rip),%rsi
       	ret
flstg:
       	xorq	%rax,%rax
       	cmpq	%rax,kvcas(%rip)
       	jz  	fst99
       	pushq	%rsi
       	pushq	%rdi
       	call	alocs
       	movq	(%rsp),%rsi
       	pushq	%rdi
       	addq	$16,%rsi
       	addq	$16,%rdi
       	xorq	%rax,%rax
       	pushq	%rax
fst01:
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	incq	%rsi
       	cmpq	$65,%rcx
       	jb  	fst02
       	cmpq	$90,%rcx
       	ja  	fst02
       	cmpq	r_0161(%rip),%rcx
       	jb  	l_0414
       	cmpq	r_0162(%rip),%rcx
       	ja  	l_0414
       	addq	r_0163(%rip),%rcx
l_0414:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,(%rsp)
fst02:
       	movb	%cl,(%rdi)
       	incq	%rdi
       	decq	%rdx
       	jnz 	fst01
       	popq	%rdi
       	orq 	%rdi,%rdi
       	jnz 	fst10
       	popq	dnamp(%rip)
       	popq	%rdi
       	jmp 	fst20
fst10:
       	popq	%rdi
       	addq	$8,%rsp
fst20:
       	movq	8(%rdi),%rcx
       	popq	%rsi
fst99:
       	ret
gbcol:
       	xorq	%rax,%rax
       	cmpq	%rax,dmvch(%rip)
       	jnz 	gbc14
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,gbcfl(%rip)
       	movq	%rcx,gbsva(%rip)
       	movq	%rbx,gbsvb(%rip)
       	movq	%rdx,gbsvc(%rip)
       	pushq	%rsi
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rcx
       	subq	r_cod(%rip),%rcx
       	movq	%rcx,%rax
       	movq	%rax,reg_cp(%rip)
       	orq 	%rbx,%rbx
       	jz  	gbc0a
       	xorq	%rax,%rax
       	movq	%rax,dnams(%rip)
gbc0a:
       	movq	dnamb(%rip),%rcx
       	addq	dnams(%rip),%rcx
       	movq	%rcx,gbcsd(%rip)
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rdi
       	movq	dnamb(%rip),%rcx
       	movq	dnamp(%rip),%rbx
       	movq	dname(%rip),%rdx
       	call	sysgc
       	movq	%rsp,%rdi
       	movq	stbas(%rip),%rsi
       	cmpq	%rdi,%rsi
       	jae 	gbc00
       	movq	%rsi,%rdi
       	movq	%rsp,%rsi
gbc00:
       	call	gbcpf
       	.data
r_0188:	.quad	r_aaa
       	.text
       	movq	r_0188(%rip),%rdi
       	movq	r_0010(%rip),%rsi
       	call	gbcpf
       	movq	hshtb(%rip),%rcx
gbc01:
       	movq	%rcx,%rsi
       	addq	$8,%rcx
       	movq	%rcx,gbcnm(%rip)
gbc02:
       	movq	(%rsi),%rdi
       	orq 	%rdi,%rdi
       	jz  	gbc03
       	movq	%rdi,%rsi
       	addq	$16,%rdi
       	addq	$48,%rsi
       	call	gbcpf
       	jmp 	gbc02
gbc03:
       	movq	gbcnm(%rip),%rcx
       	cmpq	hshte(%rip),%rcx
       	jne 	gbc01
       	movq	dnamb(%rip),%rdi
       	xorq	%rbx,%rbx
gbc04:
       	cmpq	gbcsd(%rip),%rdi
       	je  	gbc4c
       	movq	(%rdi),%rcx
       	testb	$1,%cl
       	jne 	gbc4b
       	decq	%rcx
       	movq	%rcx,(%rdi)
       	call	blkln
       	addq	%rcx,%rdi
       	jmp 	gbc04
gbc4b:
       	call	blkln
       	addq	%rcx,%rdi
       	addq	%rcx,%rbx
       	jmp 	gbc04
gbc4c:
       	movq	%rbx,gbcsf(%rip)
       	movq	%rdi,%rdx
       	addq	gbsvb(%rip),%rdx
       	xorq	%rax,%rax
       	movq	%rax,gbcnm(%rip)
       	.data
r_0189:	.quad	gbcnm
       	.text
       	movq	r_0189(%rip),%rax
       	movq	%rax,gbclm(%rip)
       	movq	%rdi,gbcns(%rip)
gbc05:
       	cmpq	dnamp(%rip),%rdi
       	je  	gbc07
       	movq	(%rdi),%rcx
       	testb	$1,%cl
       	jne 	gbc07
gbc06:
       	movq	%rcx,%rsi
       	movq	(%rsi),%rcx
       	movq	%rdx,(%rsi)
       	testb	$1,%cl
       	je  	gbc06
       	movq	%rcx,(%rdi)
       	call	blkln
       	addq	%rcx,%rdi
       	addq	%rcx,%rdx
       	jmp 	gbc05
gbc07:
       	movq	%rdi,%rcx
       	movq	gbclm(%rip),%rsi
       	subq	8(%rsi),%rcx
       	movq	%rcx,8(%rsi)
gbc08:
       	cmpq	dnamp(%rip),%rdi
       	je  	gbc10
       	movq	(%rdi),%rcx
       	testb	$1,%cl
       	je  	gbc09
       	call	blkln
       	addq	%rcx,%rdi
       	jmp 	gbc08
gbc09:
       	subq	$16,%rdi
       	movq	gbclm(%rip),%rsi
       	movq	%rdi,(%rsi)
       	xorq	%rax,%rax
       	movq	%rax,(%rdi)
       	movq	%rdi,gbclm(%rip)
       	movq	%rdi,%rsi
       	addq	$16,%rdi
       	movq	%rdi,8(%rsi)
       	jmp 	gbc06
gbc10:
       	movq	gbcsd(%rip),%rdi
       	addq	gbcns(%rip),%rdi
gbc11:
       	movq	gbcnm(%rip),%rsi
       	orq 	%rsi,%rsi
       	jz  	gbc12
       	lodsq
       	movq	%rax,gbcnm(%rip)
       	lodsq
       	movq	%rax,%rcx
       	shrq	$3,%rcx
       	rep 	movsq
       	jmp 	gbc11
gbc12:
       	movq	%rdi,dnamp(%rip)
       	movq	gbsvb(%rip),%rbx
       	orq 	%rbx,%rbx
       	jz  	gbc13
       	movq	%rdi,%rsi
       	addq	%rbx,%rdi
       	movq	%rdi,dnamp(%rip)
       	movq	%rsi,%rcx
       	subq	dnamb(%rip),%rcx
       	addq	%rbx,dnamb(%rip)
       	shrq	$3,%rcx
       	std
       	leaq	-8(%rsi),%rsi
       	leaq	-8(%rdi),%rdi
l_0415:
       	orq 	%rcx,%rcx
       	jz  	l_0416
       	movsq
       	decq	%rcx
       	jmp 	l_0415
l_0416:
       	cld
gbc13:
       	xorq	%rdi,%rdi
       	movq	%rdi,gbcfl(%rip)
       	movq	dnamb(%rip),%rcx
       	movq	dnamp(%rip),%rbx
       	movq	dname(%rip),%rdx
       	call	sysgc
       	movq	%r12,gbcia(%rip)
       	xorq	%rdi,%rdi
       	movq	gbcsf(%rip),%rbx
       	shrq	$3,%rbx
       	movq	%rbx,%r12
       	imulq	gbsed(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	gb13a
       	movq	dnamp(%rip),%rbx
       	subq	dnamb(%rip),%rbx
       	shrq	$3,%rbx
       	movq	%rbx,gbcsf(%rip)
       	subq	gbcsf(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jg  	gb13a
       	movq	dnamp(%rip),%rdi
       	subq	dnamb(%rip),%rdi
gb13a:
       	movq	gbcia(%rip),%r12
       	movq	gbsva(%rip),%rcx
       	movq	gbsvb(%rip),%rbx
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rdx
       	addq	r_cod(%rip),%rdx
       	movq	%rdx,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	gbsvc(%rip),%rdx
       	popq	%rsi
       	incq	gbcnt(%rip)
       	ret
gbc14:
       	incq	errft(%rip)
       	movq	$250,_rc_(%rip)
       	jmp 	err_
gbcpf:
       	xorq	%rax,%rax
       	pushq	%rax
       	pushq	%rsi
gpf01:
       	movq	(%rdi),%rsi
       	movq	%rdi,%rdx
       	cmpq	dnamb(%rip),%rsi
       	jb  	gpf2a
       	cmpq	dnamp(%rip),%rsi
       	jae 	gpf2a
       	movq	(%rsi),%rcx
       	cmpq	gbcsd(%rip),%rsi
       	jb  	gpf1a
       	movq	%rdi,(%rsi)
       	movq	%rcx,(%rdi)
gpf1a:
       	testb	$1,%cl
       	jne 	gpf03
gpf02:
       	movq	%rdx,%rdi
gpf2a:
       	addq	$8,%rdi
       	cmpq	(%rsp),%rdi
       	jne 	gpf01
       	popq	%rsi
       	popq	%rdi
       	orq 	%rdi,%rdi
       	jnz 	gpf2a
       	ret
gpf03:
       	cmpq	gbcsd(%rip),%rsi
       	jae 	gpf3a
       	incq	(%rsi)
gpf3a:
       	movq	%rsi,%rdi
       	movq	%rcx,%rsi
       	movq	%rsi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rsi
       	.data
r_0190:	.quad	l_0417
       	.text
       	movq	r_0190(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0417:
       	.quad	gpf06
       	.quad	gpf19
       	.quad	gpf17
       	.quad	gpf02
       	.quad	gpf10
       	.quad	gpf10
       	.quad	gpf12
       	.quad	gpf12
       	.quad	gpf02
       	.quad	gpf02
       	.quad	gpf02
       	.quad	gpf08
       	.quad	gpf08
       	.quad	gpf02
       	.quad	gpf09
       	.quad	gpf02
       	.quad	gpf13
       	.quad	gpf16
       	.quad	gpf02
       	.quad	gpf07
       	.quad	gpf04
       	.quad	gpf02
       	.quad	gpf02
       	.quad	gpf02
       	.quad	gpf10
       	.quad	gpf11
       	.quad	gpf02
       	.quad	gpf14
       	.quad	gpf15
       	.text
gpf04:
       	movq	8(%rdi),%rcx
       	movq	$16,%rbx
gpf05:
       	addq	%rdi,%rcx
       	addq	%rbx,%rdi
       	pushq	%rdx
       	pushq	%rcx
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	jmp 	gpf01
gpf06:
       	movq	16(%rdi),%rcx
       	movq	24(%rdi),%rbx
       	jmp 	gpf05
gpf07:
       	movq	24(%rdi),%rcx
       	movq	$24,%rbx
       	jmp 	gpf05
gpf19:
       	movq	24(%rdi),%rcx
       	movq	$32,%rbx
       	jmp 	gpf05
gpf08:
       	movq	16(%rdi),%rcx
       	movq	$24,%rbx
       	jmp 	gpf05
gpf09:
       	movq	8(%rdi),%rcx
       	movq	$16,%rbx
       	jmp 	gpf05
gpf10:
       	movq	$16,%rcx
       	movq	$8,%rbx
       	jmp 	gpf05
gpf11:
       	movq	$32,%rcx
       	movq	$24,%rbx
       	jmp 	gpf05
gpf12:
       	movq	$24,%rcx
       	movq	$8,%rbx
       	jmp 	gpf05
gpf13:
       	movq	16(%rdi),%rsi
       	movq	24(%rsi),%rcx
       	movq	$24,%rbx
       	jmp 	gpf05
gpf14:
       	movq	$64,%rcx
       	movq	$40,%rbx
       	jmp 	gpf05
gpf15:
       	movq	$32,%rcx
       	movq	$8,%rbx
       	jmp 	gpf05
gpf16:
       	movq	$40,%rcx
       	movq	$16,%rbx
       	jmp 	gpf05
gpf17:
       	movq	24(%rdi),%rcx
       	movq	$32,%rbx
       	jmp 	gpf05
gtarr:
       	movq	%rcx,gtawa(%rip)
       	movq	(%rdi),%rcx
       	cmpq	r_0065(%rip),%rcx
       	je  	gtar8
       	cmpq	r_0021(%rip),%rcx
       	je  	gtar8
       	cmpq	r_0022(%rip),%rcx
       	jne 	gta9a
       	pushq	%rdi
       	xorq	%rdi,%rdi
       	xorq	%rbx,%rbx
gtar1:
       	movq	(%rsp),%rsi
       	addq	16(%rsi),%rsi
       	subq	$32,%rsi
       	movq	%rsi,%rcx
gtar2:
       	movq	%rcx,%rsi
       	subq	$8,%rcx
gtar3:
       	movq	24(%rsi),%rsi
       	cmpq	(%rsp),%rsi
       	je  	gtar6
       	movq	%rsi,cnvtp(%rip)
gtar4:
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	gtar4
       	movq	%rsi,%rdx
       	movq	cnvtp(%rip),%rsi
       	cmpq	r_0012(%rip),%rdx
       	je  	gtar3
       	orq 	%rdi,%rdi
       	jnz 	gtar5
       	incq	%rbx
       	jmp 	gtar3
gtar5:
       	xorq	%rax,%rax
       	cmpq	%rax,gtawa(%rip)
       	jz  	gta5a
       	movq	8(%rsi),%rax
       	stosq
       	movq	%rdx,%rax
       	stosq
       	jmp 	gtar3
gta5a:
       	movq	%rsi,%rax
       	stosq
       	movq	%rsi,%rax
       	stosq
       	jmp 	gtar3
gtar6:
       	cmpq	(%rsp),%rcx
       	jne 	gtar2
       	orq 	%rdi,%rdi
       	jnz 	gtar7
       	orq 	%rbx,%rbx
       	jz  	gtar9
       	movq	%rbx,%rcx
       	addq	%rbx,%rcx
       	addq	$10,%rcx
       	salq	$3,%rcx
       	cmpq	mxlen(%rip),%rcx
       	ja  	gta9b
       	call	alloc
       	movq	r_0065(%rip),%rax
       	movq	%rax,(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,8(%rdi)
       	movq	%rcx,16(%rdi)
       	movq	$2,32(%rdi)
       	movq	intv1(%rip),%r12
       	movq	%r12,40(%rdi)
       	movq	%r12,56(%rdi)
       	movq	intv2(%rip),%r12
       	movq	%r12,64(%rdi)
       	movq	%rbx,%r12
       	movq	%r12,48(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,72(%rdi)
       	movq	$72,24(%rdi)
       	movq	%rdi,%rbx
       	addq	$80,%rdi
       	jmp 	gtar1
gtar7:
       	movq	%rbx,%rdi
       	movq	%rbx,(%rsp)
       	movq	48(%rdi),%r12
       	imulq	intvh(%rip),%r12
       	seto	reg_fl(%rip)
       	addq	intv2(%rip),%r12
       	seto	reg_fl(%rip)
       	call	icbld
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_233
       	decq	_rc_(%rip)
       	jns 	l_0418
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0418:
call_233:
       	movq	%rdi,%rsi
       	popq	%rdi
       	movq	%rsi,72(%rdi)
       	subq	$2,%rcx
       	leaq	16(%rsi,%rcx),%rsi
       	movq	$44,%rbx
       	movb	%bl,(%rsi)
gtar8:
       	movq	$0,_rc_(%rip)
       	ret
gtar9:
       	popq	%rdi
       	movq	$1,_rc_(%rip)
       	ret
gta9a:
       	movq	$2,_rc_(%rip)
       	ret
gta9b:
       	movq	$260,_rc_(%rip)
       	jmp 	err_
gtcod:
       	movq	r_0028(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	gtcd1
       	movq	r_0008(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	gtcd1
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_234
       	decq	_rc_(%rip)
       	jns 	l_0419
       	jmp 	gtcd2
l_0419:
call_234:
       	movq	flptr(%rip),%rax
       	movq	%rax,gtcef(%rip)
       	movq	r_cod(%rip),%rax
       	movq	%rax,r_gtc(%rip)
       	movq	%rdi,r_cim(%rip)
       	movq	%rcx,scnil(%rip)
       	xorq	%rax,%rax
       	movq	%rax,scnpt(%rip)
       	movq	$1,stage(%rip)
       	movq	cmpsn(%rip),%rax
       	movq	%rax,lstsn(%rip)
       	incq	cmpln(%rip)
       	call	cmpil
       	movq	$3,stage(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_cim(%rip)
gtcd1:
       	movq	$0,_rc_(%rip)
       	ret
gtcd2:
       	movq	$1,_rc_(%rip)
       	ret
gtexp:
       	movq	r_0181(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jb  	gtex1
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_235
       	decq	_rc_(%rip)
       	jns 	l_0420
       	jmp 	gtex2
l_0420:
call_235:
       	movq	%rdi,%rsi
       	leaq	16(%rsi,%rcx),%rsi
       	xorq	%rax,%rax
       	decq	%rsi
       	movb	(%rsi),%al
       	movq	%rax,%rsi
       	cmpq	$58,%rsi
       	je  	gtex2
       	cmpq	$59,%rsi
       	je  	gtex2
       	movq	%rdi,r_cim(%rip)
       	xorq	%rax,%rax
       	movq	%rax,scnpt(%rip)
       	movq	%rcx,scnil(%rip)
       	pushq	%rbx
       	xorq	%rbx,%rbx
       	movq	flptr(%rip),%rax
       	movq	%rax,gtcef(%rip)
       	movq	r_cod(%rip),%rax
       	movq	%rax,r_gtc(%rip)
       	movq	$2,stage(%rip)
       	movq	$12,scntp(%rip)
       	call	expan
       	xorq	%rax,%rax
       	movq	%rax,scnrs(%rip)
       	popq	%rcx
       	movq	scnil(%rip),%rax
       	cmpq	%rax,scnpt(%rip)
       	jne 	gtex2
       	xorq	%rbx,%rbx
       	movq	%rdi,%rsi
       	call	cdgex
       	xorq	%rax,%rax
       	movq	%rax,r_cim(%rip)
       	movq	$3,stage(%rip)
gtex1:
       	movq	$0,_rc_(%rip)
       	ret
gtex2:
       	movq	$1,_rc_(%rip)
       	ret
gtint:
       	movq	r_0023(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	gtin2
       	movq	%rcx,gtina(%rip)
       	movq	%rbx,gtinb(%rip)
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_236
       	decq	_rc_(%rip)
       	jns 	l_0421
       	jmp 	gtin3
l_0421:
call_236:
       	cmpq	r_0023(%rip),%rcx
       	je  	gtin1
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	%r12,reg_ia(%rip)
       	call	M_rti
       	movq	reg_ia(%rip),%r12
       	jc  	gtin3
       	call	icbld
gtin1:
       	movq	gtina(%rip),%rcx
       	movq	gtinb(%rip),%rbx
gtin2:
       	movq	$0,_rc_(%rip)
       	ret
gtin3:
       	movq	$1,_rc_(%rip)
       	ret
gtnum:
       	movq	(%rdi),%rcx
       	cmpq	r_0023(%rip),%rcx
       	je  	gtn34
       	cmpq	r_0026(%rip),%rcx
       	je  	gtn34
       	pushq	%rdi
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_237
       	decq	_rc_(%rip)
       	jns 	l_0422
       	jmp 	gtn36
l_0422:
call_237:
       	movq	intv0(%rip),%r12
       	orq 	%rcx,%rcx
       	jz  	gtn32
       	xorq	%rax,%rax
       	movq	%rax,gtnnf(%rip)
       	movq	%r12,gtnex(%rip)
       	xorq	%rax,%rax
       	movq	%rax,gtnsc(%rip)
       	xorq	%rax,%rax
       	movq	%rax,gtndf(%rip)
       	xorq	%rax,%rax
       	movq	%rax,gtnrd(%rip)
       	movq	reav0(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	addq	$16,%rdi
gtn01:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	cmpq	$48,%rbx
       	jb  	gtn02
       	cmpq	$57,%rbx
       	jbe 	gtn06
gtn02:
       	cmpq	$32,%rbx
       	jne 	gtn03
gtna2:
       	decq	%rcx
       	jnz 	gtn01
       	jmp 	gtn07
gtn03:
       	cmpq	$43,%rbx
       	je  	gtn04
       	cmpq	$9,%rbx
       	je  	gtna2
       	cmpq	$45,%rbx
       	jne 	gtn12
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,gtnnf(%rip)
gtn04:
       	decq	%rcx
       	jnz 	gtn05
       	jmp 	gtn36
gtn05:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	cmpq	$48,%rbx
       	jb  	gtn08
       	cmpq	$57,%rbx
       	ja  	gtn08
gtn06:
       	movq	%r12,gtnsi(%rip)
       	movq	%r12,%rax
       	imulq	ten(%rip),%rax
       	jo  	gtn35
       	subq	$48,%rbx
       	subq	%rbx,%rax
       	movq	%rax,%r12
       	jo  	gtn35
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,gtnrd(%rip)
       	decq	%rcx
       	jnz 	gtn05
gtn07:
       	xorq	%rax,%rax
       	cmpq	%rax,gtnnf(%rip)
       	jnz 	gtn32
       	negq	%r12
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jno 	gtn32
       	jmp 	gtn36
gtn08:
       	cmpq	$32,%rbx
       	je  	gtna9
       	cmpq	$9,%rbx
       	je  	gtna9
       	movq	%r12,reg_ia(%rip)
       	call	M_itr
       	call	M_ngr
       	jmp 	gtn12
gtn09:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	cmpq	$9,%rbx
       	je  	gtna9
       	cmpq	$32,%rbx
       	jne 	gtn36
gtna9:
       	decq	%rcx
       	jnz 	gtn09
       	jmp 	gtn07
gtn10:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	cmpq	$48,%rbx
       	jb  	gtn12
       	cmpq	$57,%rbx
       	ja  	gtn12
gtn11:
       	subq	$48,%rbx
       	movq	reavt(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	gtn36
       	movq	reg_ra(%rip),%rax
       	movq	%rax,gtnsr(%rip)
       	movq	%rbx,%r12
       	movq	%r12,reg_ia(%rip)
       	call	M_itr
       	movq	gtnsr(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_adr
       	movq	gtndf(%rip),%rax
       	addq	%rax,gtnsc(%rip)
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,gtnrd(%rip)
       	decq	%rcx
       	jnz 	gtn10
       	jmp 	gtn22
gtn12:
       	cmpq	$46,%rbx
       	jne 	gtn13
       	xorq	%rax,%rax
       	cmpq	%rax,gtndf(%rip)
       	jnz 	gtn36
       	movq	$1,gtndf(%rip)
       	decq	%rcx
       	jnz 	gtn10
       	jmp 	gtn22
gtn13:
       	cmpq	$101,%rbx
       	je  	gtn15
       	cmpq	$100,%rbx
       	je  	gtn15
       	cmpq	$69,%rbx
       	je  	gtn15
       	cmpq	$68,%rbx
       	je  	gtn15
gtn14:
       	cmpq	$32,%rbx
       	je  	gtnb4
       	cmpq	$9,%rbx
       	je  	gtnb4
       	jmp 	gtn36
gtnb4:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	decq	%rcx
       	jnz 	gtn14
       	jmp 	gtn22
gtn15:
       	xorq	%rax,%rax
       	movq	%rax,gtnes(%rip)
       	movq	intv0(%rip),%r12
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,gtndf(%rip)
       	decq	%rcx
       	jnz 	gtn16
       	jmp 	gtn36
gtn16:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	cmpq	$43,%rbx
       	je  	gtn17
       	cmpq	$45,%rbx
       	jne 	gtn19
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,gtnes(%rip)
gtn17:
       	decq	%rcx
       	jnz 	gtn18
       	jmp 	gtn36
gtn18:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
gtn19:
       	cmpq	$48,%rbx
       	jb  	gtn20
       	cmpq	$57,%rbx
       	ja  	gtn20
       	movq	%r12,%rax
       	imulq	ten(%rip),%rax
       	jo  	gtn36
       	subq	$48,%rbx
       	subq	%rbx,%rax
       	movq	%rax,%r12
       	jo  	gtn36
       	decq	%rcx
       	jnz 	gtn18
       	jmp 	gtn21
gtn20:
       	cmpq	$32,%rbx
       	je  	gtnc0
       	cmpq	$9,%rbx
       	je  	gtnc0
       	jmp 	gtn36
gtnc0:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	decq	%rcx
       	jnz 	gtn20
gtn21:
       	movq	%r12,gtnex(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,gtnes(%rip)
       	jnz 	gtn22
       	negq	%r12
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	gtn36
       	movq	%r12,gtnex(%rip)
gtn22:
       	xorq	%rax,%rax
       	cmpq	%rax,gtnrd(%rip)
       	jz  	gtn36
       	xorq	%rax,%rax
       	cmpq	%rax,gtndf(%rip)
       	jz  	gtn36
       	movq	gtnsc(%rip),%r12
       	subq	gtnex(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	gtn36
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	gtn26
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	gtn36
       	movq	%r12,%rcx
gtn23:
       	cmpq	$10,%rcx
       	jbe 	gtn24
       	movq	reatt(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_dvr
       	subq	$10,%rcx
       	jmp 	gtn23
gtn24:
       	orq 	%rcx,%rcx
       	jz  	gtn30
       	movq	$1,%rbx
       	.data
r_0191:	.quad	reav1
       	.text
       	movq	r_0191(%rip),%rdi
       	salq	$3,%rcx
gtn25:
       	addq	%rcx,%rdi
       	decq	%rbx
       	jnz 	gtn25
       	movq	(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_dvr
       	jmp 	gtn30
gtn26:
       	negq	%r12
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	gtn36
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	gtn36
       	movq	%r12,%rcx
gtn27:
       	cmpq	$10,%rcx
       	jbe 	gtn28
       	movq	reatt(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	gtn36
       	subq	$10,%rcx
       	jmp 	gtn27
gtn28:
       	orq 	%rcx,%rcx
       	jz  	gtn30
       	movq	$1,%rbx
       	movq	r_0191(%rip),%rdi
       	salq	$3,%rcx
gtn29:
       	addq	%rcx,%rdi
       	decq	%rbx
       	jnz 	gtn29
       	movq	(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	gtn36
gtn30:
       	xorq	%rax,%rax
       	cmpq	%rax,gtnnf(%rip)
       	jz  	gtn31
       	call	M_ngr
gtn31:
       	call	rcbld
       	jmp 	gtn33
gtn32:
       	call	icbld
gtn33:
       	movq	(%rdi),%rcx
       	addq	$8,%rsp
gtn34:
       	movq	$0,_rc_(%rip)
       	ret
gtn35:
       	xorq	%rbx,%rbx
       	decq	%rdi
       	movb	(%rdi),%bl
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	movq	gtnsi(%rip),%r12
       	movq	%r12,reg_ia(%rip)
       	call	M_itr
       	call	M_ngr
       	jmp 	gtn11
gtn36:
       	popq	%rdi
       	movq	$1,_rc_(%rip)
       	ret
gtnvr:
       	movq	r_0033(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	gnv02
       	movq	8(%rdi),%rdi
       	cmpq	state(%rip),%rdi
       	jb  	gnv07
gnv01:
       	movq	$1,_rc_(%rip)
       	ret
gnv02:
       	movq	%rcx,gnvsa(%rip)
       	movq	%rbx,gnvsb(%rip)
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_238
       	decq	_rc_(%rip)
       	jns 	l_0423
       	jmp 	gnv01
l_0423:
call_238:
       	orq 	%rcx,%rcx
       	jz  	gnv01
       	call	flstg
       	pushq	%rsi
       	pushq	%rdi
       	movq	%rdi,%rbx
       	addq	$16,%rbx
       	movq	%rbx,gnvst(%rip)
       	movq	%rcx,%rbx
       	addq	$7,%rbx
       	shrq	$3,%rbx
       	movq	%rbx,gnvnw(%rip)
       	call	hashs
       	movq	hshnb(%rip),%rax
       	call	M_rmi
       	movq	%r12,%rdx
       	salq	$3,%rdx
       	addq	hshtb(%rip),%rdx
       	subq	$48,%rdx
gnv03:
       	movq	%rdx,%rsi
       	movq	48(%rsi),%rsi
       	orq 	%rsi,%rsi
       	jz  	gnv08
       	movq	%rsi,%rdx
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rsi)
       	jnz 	gnv04
       	movq	64(%rsi),%rsi
       	subq	$48,%rsi
gnv04:
       	cmpq	56(%rsi),%rcx
       	jne 	gnv03
       	addq	$64,%rsi
       	movq	gnvnw(%rip),%rbx
       	movq	gnvst(%rip),%rdi
gnv05:
       	movq	(%rsi),%rax
       	cmpq	%rax,(%rdi)
       	jnz 	gnv03
       	addq	$8,%rdi
       	addq	$8,%rsi
       	decq	%rbx
       	jnz 	gnv05
       	movq	%rdx,%rdi
gnv06:
       	movq	gnvsa(%rip),%rcx
       	movq	gnvsb(%rip),%rbx
       	addq	$8,%rsp
       	popq	%rsi
gnv07:
       	movq	$0,_rc_(%rip)
       	ret
gnv08:
       	xorq	%rdi,%rdi
       	movq	%rdx,gnvhe(%rip)
       	cmpq	$9,%rcx
       	ja  	gnv14
       	movq	%rcx,%rsi
       	salq	$3,%rsi
       	.data
r_0192:	.quad	vsrch
       	.text
       	movq	r_0192(%rip),%rax
       	addq	%rsi,%rax
       	movq	(%rax),%rsi
gnv09:
       	movq	%rsi,gnvsp(%rip)
       	lodsq
       	movq	%rax,%rdx
       	lodsq
       	movq	%rax,%rbx
       	cmpq	%rbx,%rcx
       	jne 	gnv14
       	movq	gnvnw(%rip),%rbx
       	movq	gnvst(%rip),%rdi
gnv10:
       	movq	(%rsi),%rax
       	cmpq	%rax,(%rdi)
       	jnz 	gnv11
       	addq	$8,%rdi
       	addq	$8,%rsi
       	decq	%rbx
       	jnz 	gnv10
       	xorq	%rdx,%rdx
       	movq	$72,%rcx
       	jmp 	gnv15
gnv11:
       	addq	$8,%rsi
       	decq	%rbx
       	jnz 	gnv11
       	shrq	$4,%rdx
gnv12:
       	movq	bits1(%rip),%rbx
       	andq	%rdx,%rbx
       	orq 	%rbx,%rbx
       	jz  	gnv13
       	addq	$8,%rsi
gnv13:
       	shrq	$1,%rdx
       	orq 	%rdx,%rdx
       	jnz 	gnv12
       	jmp 	gnv09
gnv14:
       	movq	%rcx,%rdx
       	movq	$8,%rcx
       	addq	gnvnw(%rip),%rcx
       	salq	$3,%rcx
gnv15:
       	call	alost
       	movq	%rdi,%rbx
       	.data
r_0193:	.quad	stnvr
       	.text
       	movq	r_0193(%rip),%rsi
       	movq	$56,%rcx
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	gnvhe(%rip),%rsi
       	movq	%rbx,48(%rsi)
       	movq	%rdx,%rax
       	stosq
       	movq	gnvnw(%rip),%rcx
       	salq	$3,%rcx
       	orq 	%rdx,%rdx
       	jz  	gnv16
       	movq	(%rsp),%rsi
       	addq	$16,%rsi
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	%rbx,%rdi
       	jmp 	gnv06
gnv16:
       	movq	gnvsp(%rip),%rsi
       	movq	%rsi,(%rdi)
       	movq	%rbx,%rdi
       	movq	0(%rsi),%rbx
       	addq	$16,%rsi
       	addq	%rcx,%rsi
       	movq	btknm(%rip),%rdx
       	andq	%rbx,%rdx
       	orq 	%rdx,%rdx
       	jz  	gnv17
       	addq	$8,%rsi
gnv17:
       	movq	btfnc(%rip),%rdx
       	andq	%rbx,%rdx
       	orq 	%rdx,%rdx
       	jz  	gnv18
       	movq	%rsi,40(%rdi)
       	addq	$16,%rsi
gnv18:
       	movq	btlbl(%rip),%rdx
       	andq	%rbx,%rdx
       	orq 	%rdx,%rdx
       	jz  	gnv19
       	movq	%rsi,32(%rdi)
       	addq	$8,%rsi
gnv19:
       	movq	btval(%rip),%rdx
       	andq	%rbx,%rdx
       	orq 	%rdx,%rdx
       	jz  	gnv06
       	movq	(%rsi),%rax
       	movq	%rax,16(%rdi)
       	movq	r_0071(%rip),%rax
       	movq	%rax,8(%rdi)
       	jmp 	gnv06
gtpat:
       	movq	r_0044(%rip),%rax
       	cmpq	%rax,(%rdi)
       	ja  	gtpt5
       	movq	%rbx,gtpsb(%rip)
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_239
       	decq	_rc_(%rip)
       	jns 	l_0424
       	jmp 	gtpt2
l_0424:
call_239:
       	orq 	%rcx,%rcx
       	jnz 	gtpt1
       	movq	r_0076(%rip),%rdi
       	jmp 	gtpt4
gtpt1:
       	.data
r_0194:	.quad	p_str
       	.text
       	movq	r_0194(%rip),%rbx
       	cmpq	$1,%rcx
       	jne 	gtpt3
       	addq	$16,%rdi
       	xorq	%rcx,%rcx
       	movb	(%rdi),%cl
       	movq	%rcx,%rdi
       	movq	r_0059(%rip),%rbx
       	jmp 	gtpt3
gtpt2:
       	.data
r_0195:	.quad	p_exa
       	.text
       	movq	r_0195(%rip),%rbx
       	movq	r_0181(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jb  	gtpt3
       	movq	$1,_rc_(%rip)
       	ret
gtpt3:
       	call	pbild
gtpt4:
       	movq	gtpsb(%rip),%rbx
gtpt5:
       	movq	$0,_rc_(%rip)
       	ret
gtrea:
       	movq	(%rdi),%rcx
       	cmpq	r_0026(%rip),%rcx
       	je  	gtre2
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_240
       	decq	_rc_(%rip)
       	jns 	l_0425
       	jmp 	gtre3
l_0425:
call_240:
       	cmpq	r_0026(%rip),%rcx
       	je  	gtre2
gtre1:
       	movq	8(%rdi),%r12
       	movq	%r12,reg_ia(%rip)
       	call	M_itr
       	call	rcbld
gtre2:
       	movq	$0,_rc_(%rip)
       	ret
gtre3:
       	movq	$1,_rc_(%rip)
       	ret
gtsmi:
       	popq	prc_006(%rip)
       	popq	%rdi
       	movq	r_0023(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	gtsm1
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_241
       	decq	_rc_(%rip)
       	jns 	l_0426
       	jmp 	gtsm2
l_0426:
call_241:
gtsm1:
       	movq	8(%rdi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	gtsm3
       	movq	%r12,%rdx
       	cmpq	mxlen(%rip),%rdx
       	ja  	gtsm3
       	movq	%rdx,%rdi
       	movq	$0,_rc_(%rip)
       	movq	prc_006(%rip),%rax
       	jmp 	*%rax
gtsm2:
       	movq	$1,_rc_(%rip)
       	movq	prc_006(%rip),%rax
       	jmp 	*%rax
gtsm3:
       	movq	$2,_rc_(%rip)
       	movq	prc_006(%rip),%rax
       	jmp 	*%rax
gtstg:
       	popq	prc_007(%rip)
       	popq	%rdi
       	movq	r_0025(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	gts30
gts01:
       	pushq	%rdi
       	pushq	%rsi
       	movq	%rbx,gtsvb(%rip)
       	movq	%rdx,gtsvc(%rip)
       	movq	(%rdi),%rcx
       	cmpq	r_0023(%rip),%rcx
       	je  	gts05
       	cmpq	r_0026(%rip),%rcx
       	je  	gts10
       	cmpq	r_0033(%rip),%rcx
       	je  	gts03
gts02:
       	popq	%rsi
       	popq	%rdi
       	movq	$1,_rc_(%rip)
       	movq	prc_007(%rip),%rax
       	jmp 	*%rax
gts03:
       	movq	8(%rdi),%rsi
       	cmpq	state(%rip),%rsi
       	ja  	gts02
       	addq	$48,%rsi
       	movq	8(%rsi),%rcx
       	orq 	%rcx,%rcx
       	jnz 	gts04
       	movq	16(%rsi),%rsi
       	movq	8(%rsi),%rcx
gts04:
       	xorq	%rbx,%rbx
       	call	sbstr
       	jmp 	gts29
gts05:
       	movq	8(%rdi),%r12
       	movq	$1,gtssf(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	gts06
       	negq	%r12
       	xorq	%rax,%rax
       	movq	%rax,gtssf(%rip)
gts06:
       	movq	gtswk(%rip),%rdi
       	movq	$17,%rbx
       	leaq	16(%rdi,%rbx),%rdi
gts07:
       	call	M_cvd
       	decq	%rdi
       	movb	%cl,(%rdi)
       	decq	%rbx
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jne 	gts07
gts08:
       	movq	$17,%rcx
       	subq	%rbx,%rcx
       	movq	%rcx,%rsi
       	addq	gtssf(%rip),%rcx
       	call	alocs
       	movq	%rdi,%rdx
       	addq	$16,%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,gtssf(%rip)
       	jz  	gts09
       	movq	$45,%rcx
       	movb	%cl,(%rdi)
       	incq	%rdi
gts09:
       	movq	%rsi,%rcx
       	movq	gtswk(%rip),%rsi
       	leaq	16(%rsi,%rbx),%rsi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	%rdx,%rdi
       	jmp 	gts29
gts10:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	xorq	%rax,%rax
       	movq	%rax,gtssf(%rip)
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	je  	gts31
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jge 	gts11
       	movq	$1,gtssf(%rip)
       	call	M_ngr
gts11:
       	movq	intv0(%rip),%r12
gts12:
       	movq	reg_ra(%rip),%rax
       	movq	%rax,gtsrs(%rip)
       	movq	reap1(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jge 	gts13
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	reatt(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	subq	intvt(%rip),%r12
       	seto	reg_fl(%rip)
       	jmp 	gts12
gts13:
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	reav1(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jl  	gts17
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
gts14:
       	movq	reatt(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jl  	gts15
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	reatt(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_dvr
       	movq	reg_ra(%rip),%rax
       	movq	%rax,gtsrs(%rip)
       	addq	intvt(%rip),%r12
       	seto	reg_fl(%rip)
       	jmp 	gts14
gts15:
       	movq	r_0191(%rip),%rdi
gts16:
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	addq	intv1(%rip),%r12
       	seto	reg_fl(%rip)
       	addq	$8,%rdi
       	movq	(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jge 	gts16
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_dvr
       	movq	reg_ra(%rip),%rax
       	movq	%rax,gtsrs(%rip)
gts17:
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	gtsrn(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_adr
       	movq	reg_ra(%rip),%rax
       	movq	%rax,gtsrs(%rip)
       	movq	reav1(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jl  	gts18
       	addq	intv1(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	reavt(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_dvr
       	jmp 	gts19
gts18:
       	movq	gtsrs(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
gts19:
       	movq	$9,%rsi
       	movq	$45,gtses(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	gts21
       	movq	%r12,%rcx
       	cmpq	$9,%rcx
       	jbe 	gts20
       	movq	%rcx,%r12
       	negq	%r12
       	movq	$43,gtses(%rip)
       	jmp 	gts21
gts20:
       	subq	%rcx,%rsi
       	movq	intv0(%rip),%r12
gts21:
       	movq	gtswk(%rip),%rdi
       	movq	$17,%rbx
       	leaq	16(%rdi,%rbx),%rdi
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	je  	gts23
gts22:
       	call	M_cvd
       	decq	%rdi
       	movb	%cl,(%rdi)
       	decq	%rbx
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jne 	gts22
       	movq	gtses(%rip),%rcx
       	decq	%rdi
       	movb	%cl,(%rdi)
       	movq	$101,%rcx
       	decq	%rdi
       	movb	%cl,(%rdi)
       	subq	$2,%rbx
gts23:
       	movq	gtssc(%rip),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_mlr
       	movq	%r12,reg_ia(%rip)
       	call	M_rti
       	movq	reg_ia(%rip),%r12
       	negq	%r12
gts24:
       	orq 	%rsi,%rsi
       	jz  	gts27
       	call	M_cvd
       	cmpq	$48,%rcx
       	jne 	gts26
       	decq	%rsi
       	jmp 	gts24
gts25:
       	call	M_cvd
gts26:
       	decq	%rdi
       	movb	%cl,(%rdi)
       	decq	%rbx
       	decq	%rsi
       	orq 	%rsi,%rsi
       	jnz 	gts25
gts27:
       	movq	$46,%rcx
       	decq	%rdi
       	movb	%cl,(%rdi)
       	decq	%rbx
gts28:
       	call	M_cvd
       	decq	%rdi
       	movb	%cl,(%rdi)
       	decq	%rbx
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jne 	gts28
       	jmp 	gts08
gts29:
       	popq	%rsi
       	addq	$8,%rsp
       	movq	gtsvb(%rip),%rbx
       	movq	gtsvc(%rip),%rdx
gts30:
       	movq	8(%rdi),%rcx
       	movq	$0,_rc_(%rip)
       	movq	prc_007(%rip),%rax
       	jmp 	*%rax
gts31:
       	.data
r_0196:	.quad	scre0
       	.text
       	movq	r_0196(%rip),%rsi
       	movq	$2,%rcx
       	xorq	%rbx,%rbx
       	call	sbstr
       	jmp 	gts29
gtvar:
       	movq	r_0033(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	gtvr2
       	movq	16(%rdi),%rcx
       	movq	8(%rdi),%rsi
       	movq	r_0031(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	gtvr1
       	movq	r_0175(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	gtvr3
gtvr1:
       	movq	$1,_rc_(%rip)
       	ret
gtvr2:
       	movq	%rdx,gtvrc(%rip)
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_242
       	decq	_rc_(%rip)
       	jns 	l_0427
       	jmp 	gtvr1
l_0427:
call_242:
       	movq	%rdi,%rsi
       	movq	$16,%rcx
       	movq	gtvrc(%rip),%rdx
gtvr3:
       	cmpq	state(%rip),%rsi
       	ja  	gtvr4
       	movq	r_0071(%rip),%rax
       	cmpq	%rax,8(%rsi)
       	je  	gtvr1
gtvr4:
       	movq	$0,_rc_(%rip)
       	ret
hashs:
       	movq	$3,%rdx
       	orq 	%rdx,%rdx
       	jz  	hshsa
       	movq	8(%rdi),%rdx
       	movq	%rdx,%rbx
       	orq 	%rdx,%rdx
       	jz  	hshs3
       	nop
       	addq	$7,%rdx
       	shrq	$3,%rdx
       	addq	$16,%rdi
       	cmpq	$3,%rdx
       	jb  	hshs1
       	movq	$3,%rdx
hshs1:
hshs2:
       	xorq	(%rdi),%rbx
       	addq	$8,%rdi
       	decq	%rdx
       	jnz 	hshs2
hshs3:
       	nop
       	andq	bitsm(%rip),%rbx
       	movq	%rbx,%r12
       	xorq	%rdi,%rdi
       	ret
hshsa:
       	movq	8(%rdi),%rdx
       	movq	%rdx,%rbx
       	orq 	%rdx,%rdx
       	jz  	hshs3
       	nop
       	addq	$7,%rdx
       	shrq	$3,%rdx
       	addq	$16,%rdi
       	pushq	%rsi
       	movq	%rdx,%rsi
       	cmpq	$25,%rsi
       	jae 	hsh24
       	.data
r_0197:	.quad	l_0428
       	.text
       	movq	r_0197(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0428:
       	.quad	hsh00
       	.quad	hsh01
       	.quad	hsh02
       	.quad	hsh03
       	.quad	hsh04
       	.quad	hsh05
       	.quad	hsh06
       	.quad	hsh07
       	.quad	hsh08
       	.quad	hsh09
       	.quad	hsh10
       	.quad	hsh11
       	.quad	hsh12
       	.quad	hsh13
       	.quad	hsh14
       	.quad	hsh15
       	.quad	hsh16
       	.quad	hsh17
       	.quad	hsh18
       	.quad	hsh19
       	.quad	hsh20
       	.quad	hsh21
       	.quad	hsh22
       	.quad	hsh23
       	.quad	hsh24
       	.text
hsh24:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$24,%rdx
       	xorq	%rdx,%rbx
hsh23:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$16,%rdx
       	xorq	%rdx,%rbx
hsh22:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$8,%rdx
       	xorq	%rdx,%rbx
hsh21:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	xorq	%rdx,%rbx
hsh20:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$24,%rdx
       	xorq	%rdx,%rbx
hsh19:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$16,%rdx
       	xorq	%rdx,%rbx
hsh18:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$8,%rdx
       	xorq	%rdx,%rbx
hsh17:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	xorq	%rdx,%rbx
hsh16:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$24,%rdx
       	xorq	%rdx,%rbx
hsh15:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$16,%rdx
       	xorq	%rdx,%rbx
hsh14:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$8,%rdx
       	xorq	%rdx,%rbx
hsh13:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	xorq	%rdx,%rbx
hsh12:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$24,%rdx
       	xorq	%rdx,%rbx
hsh11:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$16,%rdx
       	xorq	%rdx,%rbx
hsh10:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$8,%rdx
       	xorq	%rdx,%rbx
hsh09:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	xorq	%rdx,%rbx
hsh08:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$24,%rdx
       	xorq	%rdx,%rbx
hsh07:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$16,%rdx
       	xorq	%rdx,%rbx
hsh06:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$8,%rdx
       	xorq	%rdx,%rbx
hsh05:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	xorq	%rdx,%rbx
hsh04:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$24,%rdx
       	xorq	%rdx,%rbx
hsh03:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$16,%rdx
       	xorq	%rdx,%rbx
hsh02:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	shlq	$8,%rdx
       	xorq	%rdx,%rbx
hsh01:
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	incq	%rdi
       	xorq	%rdx,%rbx
hsh00:
       	popq	%rsi
       	jmp 	hshs3
icbld:
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	js  	icbl1
       	movq	%r12,%rdi
       	cmpq	$2,%rdi
       	jbe 	icbl3
icbl1:
       	movq	dnamp(%rip),%rdi
       	addq	$16,%rdi
       	cmpq	dname(%rip),%rdi
       	jb  	icbl2
       	movq	$16,%rcx
       	call	alloc
       	addq	%rcx,%rdi
icbl2:
       	movq	%rdi,dnamp(%rip)
       	subq	$16,%rdi
       	movq	r_0023(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%r12,8(%rdi)
       	ret
icbl3:
       	salq	$3,%rdi
       	.data
r_0198:	.quad	intab
       	.text
       	movq	r_0198(%rip),%rax
       	addq	%rdi,%rax
       	movq	(%rax),%rdi
       	ret
ident:
       	cmpq	%rsi,%rdi
       	je  	iden7
       	movq	(%rdi),%rdx
       	cmpq	(%rsi),%rdx
       	jne 	iden1
       	cmpq	r_0025(%rip),%rdx
       	je  	iden2
       	cmpq	r_0023(%rip),%rdx
       	je  	iden4
       	cmpq	r_0026(%rip),%rdx
       	je  	iden5
       	cmpq	r_0033(%rip),%rdx
       	je  	iden6
iden1:
       	movq	$0,_rc_(%rip)
       	ret
iden2:
       	movq	8(%rdi),%rdx
       	cmpq	8(%rsi),%rdx
       	jne 	iden1
idn2a:
       	addq	$16,%rdi
       	addq	$16,%rsi
       	addq	$7,%rdx
       	shrq	$3,%rdx
iden3:
       	movq	(%rsi),%rax
       	cmpq	%rax,(%rdi)
       	jnz 	iden8
       	addq	$8,%rdi
       	addq	$8,%rsi
       	decq	%rdx
       	jnz 	iden3
       	xorq	%rsi,%rsi
       	xorq	%rdi,%rdi
       	movq	$1,_rc_(%rip)
       	ret
iden4:
       	movq	8(%rdi),%r12
       	subq	8(%rsi),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	iden1
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jne 	iden1
       	movq	$1,_rc_(%rip)
       	ret
iden5:
       	movq	8(%rdi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_ldr
       	movq	8(%rsi),%rax
       	movq	%rax,reg_rb(%rip)
       	call	M_sbr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	iden1
       	call	M_cpr
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jne 	iden1
       	movq	$1,_rc_(%rip)
       	ret
iden6:
       	movq	16(%rsi),%rax
       	cmpq	%rax,16(%rdi)
       	jne 	iden1
       	movq	8(%rsi),%rax
       	cmpq	%rax,8(%rdi)
       	jne 	iden1
iden7:
       	movq	$1,_rc_(%rip)
       	ret
iden8:
       	xorq	%rdi,%rdi
       	xorq	%rsi,%rsi
       	movq	$0,_rc_(%rip)
       	ret
inout:
       	pushq	%rbx
       	movq	8(%rsi),%rcx
       	xorq	%rbx,%rbx
       	call	sbstr
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_243
       	decq	_rc_(%rip)
       	jns 	l_0429
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0429:
call_243:
       	movq	%rdi,%rdx
       	popq	%rbx
       	xorq	%rsi,%rsi
       	call	trbld
       	movq	%rdx,%rsi
       	movq	64(%rsi),%rax
       	movq	%rax,24(%rdi)
       	movq	%rdi,16(%rsi)
       	movq	r_0134(%rip),%rax
       	movq	%rax,0(%rsi)
       	.data
r_0199:	.quad	b_vrv
       	.text
       	movq	r_0199(%rip),%rax
       	movq	%rax,8(%rsi)
       	ret
insta:
       	movq	prlen(%rip),%rdx
       	movq	%rdi,prbuf(%rip)
       	movq	r_0025(%rip),%rax
       	stosq
       	movq	%rdx,%rax
       	stosq
       	addq	$7,%rdx
       	shrq	$3,%rdx
       	movq	%rdx,prlnw(%rip)
inst1:
       	movq	nullw(%rip),%rax
       	stosq
       	decq	%rdx
       	jnz 	inst1
       	movq	$17,%rcx
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	movq	%rdi,gtswk(%rip)
       	addq	%rcx,%rdi
       	movq	%rdi,kvalp(%rip)
       	movq	r_0025(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	$256,%rdx
       	movq	%rdx,8(%rdi)
       	movq	%rdx,%rbx
       	addq	$23,%rbx
       	andq	$-8,%rbx
       	addq	%rdi,%rbx
       	movq	%rbx,%rcx
       	addq	$16,%rdi
       	xorq	%rbx,%rbx
inst2:
       	movb	%bl,(%rdi)
       	incq	%rdi
       	incq	%rbx
       	decq	%rdx
       	jnz 	inst2
       	movq	%rcx,%rdi
       	ret
iofcb:
       	popq	prc_008(%rip)
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_244
       	decq	_rc_(%rip)
       	jns 	l_0430
       	jmp 	iofc2
l_0430:
call_244:
       	movq	%rdi,%rsi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_245
       	decq	_rc_(%rip)
       	jns 	l_0431
       	jmp 	iofc3
l_0431:
call_245:
       	movq	%rsi,%rbx
       	movq	%rdi,%rsi
       	xorq	%rcx,%rcx
iofc1:
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	iofc4
       	cmpq	$4,8(%rdi)
       	jne 	iofc1
       	movq	32(%rdi),%rcx
       	movq	%rbx,%rdi
       	movq	$0,_rc_(%rip)
       	movq	prc_008(%rip),%rax
       	jmp 	*%rax
iofc2:
       	movq	$1,_rc_(%rip)
       	movq	prc_008(%rip),%rax
       	jmp 	*%rax
iofc3:
       	movq	$2,_rc_(%rip)
       	movq	prc_008(%rip),%rax
       	jmp 	*%rax
iofc4:
       	movq	$3,_rc_(%rip)
       	movq	prc_008(%rip),%rax
       	jmp 	*%rax
ioppf:
       	popq	prc_009(%rip)
       	xorq	%rbx,%rbx
iopp1:
       	movq	$32,%rsi
       	movq	%rsi,%rdx
       	xorq	%rcx,%rcx
       	call	xscan
       	pushq	%rdi
       	incq	%rbx
       	orq 	%rcx,%rcx
       	jnz 	iopp1
       	movq	%rbx,%rdx
       	movq	ioptt(%rip),%rbx
       	movq	r_iof(%rip),%rcx
       	movq	r_io2(%rip),%rdi
       	movq	r_io1(%rip),%rsi
       	movq	$0,_rc_(%rip)
       	movq	prc_009(%rip),%rax
       	jmp 	*%rax
ioput:
       	popq	prc_010(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_iot(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_iof(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_iop(%rip)
       	movq	%rbx,ioptt(%rip)
       	call	xscni
       	decq	_rc_(%rip)
       	js  	call_246
       	decq	_rc_(%rip)
       	jns 	l_0432
       	jmp 	iop13
l_0432:
       	decq	_rc_(%rip)
       	jns 	l_0433
       	jmp 	iopa0
l_0433:
call_246:
iopa0:
       	movq	%rdi,r_io2(%rip)
       	movq	%rcx,%rsi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_247
       	decq	_rc_(%rip)
       	jns 	l_0434
       	jmp 	iop14
l_0434:
call_247:
       	movq	%rdi,r_io1(%rip)
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_248
       	decq	_rc_(%rip)
       	jns 	l_0435
       	jmp 	iop00
l_0435:
call_248:
       	jmp 	iop04
iop00:
       	orq 	%rsi,%rsi
       	jz  	iop01
       	call	ioppf
       	call	sysfc
       	decq	_rc_(%rip)
       	js  	call_249
       	decq	_rc_(%rip)
       	jns 	l_0436
       	jmp 	iop16
l_0436:
       	decq	_rc_(%rip)
       	jns 	l_0437
       	jmp 	iop26
l_0437:
call_249:
       	jmp 	iop11
iop01:
       	movq	ioptt(%rip),%rbx
       	movq	r_iot(%rip),%rdi
       	call	trbld
       	movq	%rdi,%rdx
       	popq	%rdi
       	pushq	%rdx
       	call	gtvar
       	decq	_rc_(%rip)
       	js  	call_250
       	decq	_rc_(%rip)
       	jns 	l_0438
       	jmp 	iop15
l_0438:
call_250:
       	popq	%rdx
       	movq	%rsi,r_ion(%rip)
       	movq	%rsi,%rdi
       	addq	%rcx,%rdi
       	subq	$16,%rdi
iop02:
       	movq	%rdi,%rsi
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	iop03
       	movq	ioptt(%rip),%rax
       	cmpq	%rax,8(%rdi)
       	jne 	iop02
       	movq	16(%rdi),%rdi
iop03:
       	movq	%rdx,16(%rsi)
       	movq	%rdx,%rsi
       	movq	%rdi,16(%rsi)
       	movq	r_ion(%rip),%rdi
       	movq	%rcx,%rbx
       	call	setvr
       	movq	r_iot(%rip),%rdi
       	orq 	%rdi,%rdi
       	jnz 	iop19
       	movq	$0,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
iop04:
       	xorq	%rcx,%rcx
iop05:
       	movq	%rdi,%rbx
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	iop06
       	cmpq	$4,8(%rdi)
       	jne 	iop05
       	movq	%rdi,r_iot(%rip)
       	movq	32(%rdi),%rcx
iop06:
       	movq	%rcx,r_iof(%rip)
       	movq	%rbx,r_iop(%rip)
       	call	ioppf
       	call	sysfc
       	decq	_rc_(%rip)
       	js  	call_251
       	decq	_rc_(%rip)
       	jns 	l_0439
       	jmp 	iop16
l_0439:
       	decq	_rc_(%rip)
       	jns 	l_0440
       	jmp 	iop26
l_0440:
call_251:
       	orq 	%rcx,%rcx
       	jz  	iop12
       	cmpq	$2,%rdx
       	jb  	iop6a
       	call	alost
       	jmp 	iop6b
iop6a:
       	call	alloc
iop6b:
       	movq	%rdi,%rsi
       	movq	%rcx,%rbx
       	shrq	$3,%rbx
iop07:
       	xorq	%rax,%rax
       	stosq
       	decq	%rbx
       	jnz 	iop07
       	cmpq	$2,%rdx
       	je  	iop09
       	.data
r_0200:	.quad	b_xnt
       	.text
       	movq	r_0200(%rip),%rax
       	movq	%rax,(%rsi)
       	movq	%rcx,8(%rsi)
       	orq 	%rdx,%rdx
       	jnz 	iop09
       	.data
r_0201:	.quad	b_xrt
       	.text
       	movq	r_0201(%rip),%rax
       	movq	%rax,(%rsi)
iop09:
       	movq	r_iot(%rip),%rdi
       	movq	%rsi,r_iof(%rip)
       	orq 	%rdi,%rdi
       	jnz 	iop10
       	movq	$4,%rbx
       	call	trbld
       	movq	%rdi,r_iot(%rip)
       	movq	r_iop(%rip),%rsi
       	movq	16(%rsi),%rax
       	movq	%rax,16(%rdi)
       	movq	%rdi,16(%rsi)
       	movq	%rsi,%rdi
       	call	setvr
       	movq	16(%rdi),%rdi
       	jmp 	iop1a
iop10:
       	xorq	%rax,%rax
       	movq	%rax,r_iop(%rip)
iop1a:
       	movq	r_iof(%rip),%rax
       	movq	%rax,32(%rdi)
iop11:
       	movq	r_iof(%rip),%rcx
       	movq	ioptt(%rip),%rbx
       	movq	r_io2(%rip),%rdi
       	movq	r_io1(%rip),%rsi
       	call	sysio
       	decq	_rc_(%rip)
       	js  	call_252
       	decq	_rc_(%rip)
       	jns 	l_0441
       	jmp 	iop17
l_0441:
       	decq	_rc_(%rip)
       	jns 	l_0442
       	jmp 	iop18
l_0442:
call_252:
       	xorq	%rax,%rax
       	cmpq	%rax,r_iot(%rip)
       	jnz 	iop01
       	xorq	%rax,%rax
       	cmpq	%rax,ioptt(%rip)
       	jnz 	iop01
       	orq 	%rdx,%rdx
       	jz  	iop01
       	movq	%rdx,cswin(%rip)
       	jmp 	iop01
iop12:
       	orq 	%rsi,%rsi
       	jnz 	iop09
       	jmp 	iop11
iop13:
       	movq	$1,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
iop14:
       	movq	$2,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
iop15:
       	addq	$8,%rsp
       	movq	$3,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
iop16:
       	movq	$4,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
iop26:
       	movq	$7,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
iop17:
       	movq	r_iop(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	iopa7
       	movq	16(%rdi),%rsi
       	movq	16(%rsi),%rax
       	movq	%rax,16(%rdi)
       	call	setvr
iopa7:
       	movq	$5,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
iop18:
       	movq	r_iop(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	iopa7
       	movq	16(%rdi),%rsi
       	movq	16(%rsi),%rax
       	movq	%rax,16(%rdi)
       	call	setvr
iopa8:
       	movq	$6,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
iop19:
       	movq	r_ion(%rip),%rdx
iop20:
       	movq	24(%rdi),%rdi
       	orq 	%rdi,%rdi
       	jz  	iop21
       	cmpq	16(%rdi),%rdx
       	jne 	iop20
       	cmpq	32(%rdi),%rbx
       	je  	iop22
       	jmp 	iop20
iop21:
       	movq	$40,%rcx
       	call	alloc
       	movq	r_0201(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rcx,8(%rdi)
       	movq	%rdx,16(%rdi)
       	movq	%rbx,32(%rdi)
       	movq	r_iot(%rip),%rsi
       	movq	24(%rsi),%rcx
       	movq	%rdi,24(%rsi)
       	movq	%rcx,24(%rdi)
iop22:
       	xorq	%rax,%rax
       	cmpq	%rax,r_iof(%rip)
       	jz  	iop25
       	movq	r_fcb(%rip),%rsi
iop23:
       	orq 	%rsi,%rsi
       	jz  	iop24
       	movq	r_iof(%rip),%rax
       	cmpq	%rax,24(%rsi)
       	je  	iop25
       	movq	16(%rsi),%rsi
       	jmp 	iop23
iop24:
       	movq	$32,%rcx
       	call	alloc
       	movq	r_0201(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rcx,8(%rdi)
       	movq	r_fcb(%rip),%rax
       	movq	%rax,16(%rdi)
       	movq	r_iof(%rip),%rax
       	movq	%rax,24(%rdi)
       	movq	%rdi,r_fcb(%rip)
iop25:
       	movq	$0,_rc_(%rip)
       	movq	prc_010(%rip),%rax
       	jmp 	*%rax
ktrex:
       	orq 	%rsi,%rsi
       	jz  	ktrx3
       	xorq	%rax,%rax
       	cmpq	%rax,kvtra(%rip)
       	jz  	ktrx3
       	decq	kvtra(%rip)
       	pushq	%rdi
       	movq	%rsi,%rdi
       	movq	16(%rdi),%rsi
       	movq	$16,%rcx
       	xorq	%rax,%rax
       	cmpq	%rax,32(%rdi)
       	jz  	ktrx1
       	call	trxeq
       	jmp 	ktrx2
ktrx1:
       	pushq	%rsi
       	pushq	%rcx
       	call	prtsn
       	movq	$38,%rcx
       	call	prtch
       	call	prtnm
       	movq	r_0173(%rip),%rdi
       	call	prtst
       	call	kwnam
       	movq	%rdi,dnamp(%rip)
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_253
       	decq	_rc_(%rip)
       	jns 	l_0443
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0443:
call_253:
       	call	prtvl
       	call	prtnl
ktrx2:
       	popq	%rdi
ktrx3:
       	ret
kwnam:
       	popq	prc_011(%rip)
       	addq	$8,%rsp
       	popq	%rdi
       	cmpq	state(%rip),%rdi
       	jae 	kwnm1
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	kwnm1
       	movq	64(%rdi),%rdi
       	movq	0(%rdi),%rcx
       	andq	btknm(%rip),%rcx
       	orq 	%rcx,%rcx
       	jz  	kwnm1
       	movq	8(%rdi),%rcx
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	addq	%rcx,%rdi
       	movq	(%rdi),%rbx
       	movq	$24,%rcx
       	call	alloc
       	movq	r_0175(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rbx,16(%rdi)
       	movq	r_0115(%rip),%rax
       	movq	%rax,8(%rdi)
       	movq	%rdi,%rsi
       	movq	$8,%rcx
       	movq	$0,_rc_(%rip)
       	movq	prc_011(%rip),%rax
       	jmp 	*%rax
kwnm1:
       	movq	$251,_rc_(%rip)
       	jmp 	err_
lcomp:
       	popq	prc_012(%rip)
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_254
       	decq	_rc_(%rip)
       	jns 	l_0444
       	jmp 	lcmp6
l_0444:
call_254:
       	movq	%rdi,%rsi
       	movq	%rcx,%rdx
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_255
       	decq	_rc_(%rip)
       	jns 	l_0445
       	jmp 	lcmp5
l_0445:
call_255:
       	movq	%rcx,%rbx
       	addq	$16,%rdi
       	addq	$16,%rsi
       	cmpq	%rdx,%rcx
       	jb  	lcmp1
       	movq	%rdx,%rcx
lcmp1:
       	orq 	%rcx,%rcx
       	jz  	lcmp7
       	repe	cmpsb
       	movq	$0,%rsi
       	movq	%rsi,%rdi
       	ja  	lcmp3
       	jb  	lcmp4
lcmp7:
       	cmpq	%rdx,%rbx
       	jne 	lcmp2
       	movq	$4,_rc_(%rip)
       	movq	prc_012(%rip),%rax
       	jmp 	*%rax
lcmp2:
       	cmpq	%rdx,%rbx
       	ja  	lcmp4
lcmp3:
       	movq	$3,_rc_(%rip)
       	movq	prc_012(%rip),%rax
       	jmp 	*%rax
lcmp4:
       	movq	$5,_rc_(%rip)
       	movq	prc_012(%rip),%rax
       	jmp 	*%rax
lcmp5:
       	movq	$1,_rc_(%rip)
       	movq	prc_012(%rip),%rax
       	jmp 	*%rax
lcmp6:
       	movq	$2,_rc_(%rip)
       	movq	prc_012(%rip),%rax
       	jmp 	*%rax
listr:
       	xorq	%rax,%rax
       	cmpq	%rax,cnttl(%rip)
       	jnz 	list5
       	xorq	%rax,%rax
       	cmpq	%rax,lstpf(%rip)
       	jnz 	list4
       	movq	lstnp(%rip),%rax
       	cmpq	%rax,lstlc(%rip)
       	jae 	list6
list0:
       	movq	r_cim(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	list4
       	addq	$16,%rdi
       	xorq	%rcx,%rcx
       	movb	(%rdi),%cl
       	movq	lstsn(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	list2
       	movq	%rdi,%r12
       	cmpq	$0,stage(%rip)
       	jne 	list1
       	cmpq	$42,%rcx
       	je  	list2
       	cmpq	$45,%rcx
       	je  	list2
list1:
       	call	prtin
       	xorq	%rax,%rax
       	movq	%rax,lstsn(%rip)
list2:
       	movq	lstid(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	list8
       	movq	$8,%rcx
       	subq	$3,%rcx
       	movq	%rcx,profs(%rip)
       	movq	%rdi,%r12
       	call	prtin
list8:
       	movq	$8,profs(%rip)
       	movq	r_cim(%rip),%rdi
       	call	prtst
       	incq	lstlc(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,erlst(%rip)
       	jnz 	list3
       	call	prtnl
       	xorq	%rax,%rax
       	cmpq	%rax,cswdb(%rip)
       	jz  	list3
       	call	prtnl
       	incq	lstlc(%rip)
list3:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,lstpf(%rip)
list4:
       	ret
list5:
       	xorq	%rax,%rax
       	movq	%rax,cnttl(%rip)
list6:
       	call	prtps
       	xorq	%rax,%rax
       	cmpq	%rax,prich(%rip)
       	jz  	list7
       	movq	r_0012(%rip),%rax
       	cmpq	%rax,r_ttl(%rip)
       	je  	list0
list7:
       	call	listt
       	jmp 	list0
listt:
       	movq	r_ttl(%rip),%rdi
       	call	prtst
       	movq	lstpo(%rip),%rax
       	movq	%rax,profs(%rip)
       	.data
r_0202:	.quad	lstms
       	.text
       	movq	r_0202(%rip),%rdi
       	call	prtst
       	incq	lstpg(%rip)
       	movq	lstpg(%rip),%r12
       	call	prtin
       	call	prtnl
       	addq	$2,lstlc(%rip)
       	movq	r_stl(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	lstt1
       	call	prtst
       	call	prtnl
       	incq	lstlc(%rip)
lstt1:
       	call	prtnl
       	ret
newfn:
       	pushq	%rdi
       	movq	r_sfc(%rip),%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_256
       	decq	_rc_(%rip)
       	jns 	l_0446
       	jmp 	nwfn1
l_0446:
call_256:
       	popq	%rdi
       	movq	%rdi,r_sfc(%rip)
       	movq	cmpsn(%rip),%rbx
       	movq	%rbx,%r12
       	call	icbld
       	movq	r_sfn(%rip),%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_257
       	decq	_rc_(%rip)
       	jns 	l_0447
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0447:
call_257:
       	movq	r_sfc(%rip),%rax
       	movq	%rax,16(%rsi)
       	ret
nwfn1:
       	addq	$8,%rsp
       	ret
nexts:
       	xorq	%rax,%rax
       	cmpq	%rax,cswls(%rip)
       	jz  	nxts2
       	movq	r_cim(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	nxts2
       	addq	$16,%rdi
       	xorq	%rcx,%rcx
       	movb	(%rdi),%cl
       	cmpq	$45,%rcx
       	jne 	nxts1
       	xorq	%rax,%rax
       	cmpq	%rax,cswpr(%rip)
       	jz  	nxts2
nxts1:
       	call	listr
nxts2:
       	movq	r_cni(%rip),%rdi
       	movq	%rdi,r_cim(%rip)
       	movq	rdnln(%rip),%rax
       	movq	%rax,rdcln(%rip)
       	movq	cnind(%rip),%rax
       	movq	%rax,lstid(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_cni(%rip)
       	movq	8(%rdi),%rcx
       	movq	cswin(%rip),%rbx
       	cmpq	%rbx,%rcx
       	jb  	nxts3
       	movq	%rbx,%rcx
nxts3:
       	movq	%rcx,scnil(%rip)
       	xorq	%rax,%rax
       	movq	%rax,scnse(%rip)
       	xorq	%rax,%rax
       	movq	%rax,lstpf(%rip)
       	ret
patin:
       	popq	prc_013(%rip)
       	movq	%rcx,%rsi
       	call	gtsmi
       	decq	_rc_(%rip)
       	js  	call_258
       	decq	_rc_(%rip)
       	jns 	l_0448
       	jmp 	ptin2
l_0448:
       	decq	_rc_(%rip)
       	jns 	l_0449
       	jmp 	ptin3
l_0449:
call_258:
ptin1:
       	call	pbild
       	movq	$0,_rc_(%rip)
       	movq	prc_013(%rip),%rax
       	jmp 	*%rax
ptin2:
       	movq	%rsi,%rbx
       	movq	r_0181(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jb  	ptin1
       	movq	$1,_rc_(%rip)
       	movq	prc_013(%rip),%rax
       	jmp 	*%rax
ptin3:
       	movq	$2,_rc_(%rip)
       	movq	prc_013(%rip),%rax
       	jmp 	*%rax
patst:
       	popq	prc_014(%rip)
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_259
       	decq	_rc_(%rip)
       	jns 	l_0450
       	jmp 	pats7
l_0450:
call_259:
       	orq 	%rcx,%rcx
       	jz  	pats7
       	cmpq	$1,%rcx
       	jne 	pats2
       	orq 	%rbx,%rbx
       	jz  	pats2
       	addq	$16,%rdi
       	xorq	%rax,%rax
       	movb	(%rdi),%al
       	movq	%rax,%rdi
pats1:
       	call	pbild
       	movq	$0,_rc_(%rip)
       	movq	prc_014(%rip),%rax
       	jmp 	*%rax
pats2:
       	pushq	%rsi
       	movq	ctmsk(%rip),%rdx
       	cmpq	r_cts(%rip),%rdi
       	je  	pats6
       	pushq	%rdi
       	shlq	$1,%rdx
       	orq 	%rdx,%rdx
       	jnz 	pats4
       	movq	$2056,%rcx
       	call	alloc
       	movq	%rdi,r_ctp(%rip)
       	.data
r_0203:	.quad	b_ctt
       	.text
       	movq	r_0203(%rip),%rax
       	stosq
       	movq	$256,%rbx
       	movq	bits0(%rip),%rdx
pats3:
       	movq	%rdx,%rax
       	stosq
       	decq	%rbx
       	jnz 	pats3
       	movq	bits1(%rip),%rdx
pats4:
       	movq	%rdx,ctmsk(%rip)
       	popq	%rsi
       	movq	%rsi,r_cts(%rip)
       	movq	8(%rsi),%rbx
       	orq 	%rbx,%rbx
       	jz  	pats6
       	addq	$16,%rsi
pats5:
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	incq	%rsi
       	salq	$3,%rcx
       	movq	r_ctp(%rip),%rdi
       	addq	%rcx,%rdi
       	movq	%rdx,%rcx
       	orq 	8(%rdi),%rcx
       	movq	%rcx,8(%rdi)
       	decq	%rbx
       	jnz 	pats5
pats6:
       	movq	r_ctp(%rip),%rdi
       	xorq	%rsi,%rsi
       	popq	%rbx
       	jmp 	pats1
pats7:
       	movq	%rdx,%rbx
       	movq	r_0181(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jb  	pats1
       	movq	$1,_rc_(%rip)
       	movq	prc_014(%rip),%rax
       	jmp 	*%rax
pbild:
       	pushq	%rdi
       	movq	%rbx,%rdi
       	movq	%rdi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rdi
       	cmpq	$6,%rdi
       	je  	pbld1
       	cmpq	$5,%rdi
       	je  	pbld3
       	movq	$32,%rcx
       	call	alloc
       	movq	%rdx,24(%rdi)
       	jmp 	pbld2
pbld1:
       	movq	$24,%rcx
       	call	alloc
pbld2:
       	movq	(%rsp),%rax
       	movq	%rax,16(%rdi)
       	jmp 	pbld4
pbld3:
       	movq	$16,%rcx
       	call	alloc
pbld4:
       	movq	%rbx,(%rdi)
       	addq	$8,%rsp
       	movq	r_0076(%rip),%rax
       	movq	%rax,8(%rdi)
       	ret
pconc:
       	xorq	%rax,%rax
       	pushq	%rax
       	movq	%rsp,%rdx
       	pushq	r_0076(%rip)
       	pushq	%rsi
       	movq	%rsp,%rsi
       	call	pcopy
       	movq	%rcx,16(%rsi)
pcnc1:
       	cmpq	%rsp,%rsi
       	je  	pcnc2
       	subq	$8,%rsi
       	movq	(%rsi),%rdi
       	movq	8(%rdi),%rdi
       	call	pcopy
       	subq	$8,%rsi
       	movq	(%rsi),%rdi
       	movq	%rcx,8(%rdi)
       	movq	r_0020(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	pcnc1
       	movq	16(%rdi),%rdi
       	call	pcopy
       	movq	(%rsi),%rdi
       	movq	%rcx,16(%rdi)
       	jmp 	pcnc1
pcnc2:
       	movq	%rdx,%rsp
       	popq	%rdi
       	ret
pcopy:
       	popq	prc_015(%rip)
       	movq	%rsi,%rbx
       	movq	%rdx,%rsi
pcop1:
       	subq	$8,%rsi
       	cmpq	(%rsi),%rdi
       	je  	pcop2
       	subq	$8,%rsi
       	cmpq	%rsp,%rsi
       	jne 	pcop1
       	movq	(%rdi),%rcx
       	call	blkln
       	movq	%rdi,%rsi
       	call	alloc
       	pushq	%rsi
       	pushq	%rdi
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	(%rsp),%rcx
       	jmp 	pcop3
pcop2:
       	subq	$8,%rsi
       	movq	(%rsi),%rcx
pcop3:
       	movq	%rbx,%rsi
       	movq	$0,_rc_(%rip)
       	movq	prc_015(%rip),%rax
       	jmp 	*%rax
prflr:
       	xorq	%rax,%rax
       	cmpq	%rax,pfdmp(%rip)
       	jz  	prfl4
       	pushq	%rdi
       	movq	%rbx,pfsvw(%rip)
       	call	prtpg
       	.data
r_0204:	.quad	pfms1
       	.text
       	movq	r_0204(%rip),%rdi
       	call	prtst
       	call	prtnl
       	call	prtnl
       	.data
r_0205:	.quad	pfms2
       	.text
       	movq	r_0205(%rip),%rdi
       	call	prtst
       	call	prtnl
       	.data
r_0206:	.quad	pfms3
       	.text
       	movq	r_0206(%rip),%rdi
       	call	prtst
       	call	prtnl
       	call	prtnl
       	xorq	%rbx,%rbx
       	movq	pftbl(%rip),%rdi
       	addq	$16,%rdi
prfl1:
       	incq	%rbx
       	movq	(%rdi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	je  	prfl3
       	movq	$8,profs(%rip)
       	call	prtin
       	xorq	%rax,%rax
       	movq	%rax,profs(%rip)
       	movq	%rbx,%r12
       	call	prtin
       	movq	$20,profs(%rip)
       	movq	8(%rdi),%r12
       	call	prtin
       	movq	8(%rdi),%r12
       	imulq	intth(%rip),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	prfl2
       	movq	(%rdi),%rax
       	call	M_dvi
       	movq	$32,profs(%rip)
       	call	prtin
prfl2:
       	call	prtnl
prfl3:
       	addq	$16,%rdi
       	cmpq	pfnte(%rip),%rbx
       	jb  	prfl1
       	popq	%rdi
       	movq	pfsvw(%rip),%rbx
prfl4:
       	ret
prflu:
       	xorq	%rax,%rax
       	cmpq	%rax,pffnc(%rip)
       	jnz 	pflu4
       	pushq	%rdi
       	movq	%rcx,pfsvw(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,pftbl(%rip)
       	jnz 	pflu2
       	subq	$1,pfnte(%rip)
       	movq	pfi2a(%rip),%r12
       	movq	%r12,pfste(%rip)
       	movq	pfnte(%rip),%r12
       	imulq	pfste(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rcx
       	addq	$2,%rcx
       	salq	$3,%rcx
       	call	alost
       	movq	%rdi,pftbl(%rip)
       	movq	r_0200(%rip),%rax
       	stosq
       	movq	%rcx,%rax
       	stosq
       	movq	%r12,%rcx
pflu1:
       	xorq	%rax,%rax
       	stosq
       	decq	%rcx
       	jnz 	pflu1
pflu2:
       	movq	kvstn(%rip),%r12
       	subq	intv1(%rip),%r12
       	seto	reg_fl(%rip)
       	imulq	pfste(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rcx
       	salq	$3,%rcx
       	addq	$16,%rcx
       	movq	pftbl(%rip),%rdi
       	cmpq	8(%rdi),%rcx
       	jae 	pflu3
       	addq	%rcx,%rdi
       	movq	(%rdi),%r12
       	addq	intv1(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,(%rdi)
       	call	systm
       	movq	%r12,pfetm(%rip)
       	subq	pfstm(%rip),%r12
       	seto	reg_fl(%rip)
       	addq	8(%rdi),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,8(%rdi)
       	movq	pfetm(%rip),%r12
       	movq	%r12,pfstm(%rip)
pflu3:
       	popq	%rdi
       	movq	pfsvw(%rip),%rcx
       	ret
pflu4:
       	xorq	%rax,%rax
       	movq	%rax,pffnc(%rip)
       	ret
prpar:
       	orq 	%rdx,%rdx
       	jnz 	prpa8
       	call	syspp
       	orq 	%rbx,%rbx
       	jnz 	prpa1
       	movq	mxint(%rip),%rbx
       	shrq	$1,%rbx
prpa1:
       	movq	%rbx,lstnp(%rip)
       	movq	%rbx,lstlc(%rip)
       	xorq	%rax,%rax
       	movq	%rax,lstpg(%rip)
       	movq	prlen(%rip),%rbx
       	orq 	%rbx,%rbx
       	jz  	prpa2
       	cmpq	%rbx,%rcx
       	ja  	prpa3
prpa2:
       	movq	%rcx,prlen(%rip)
prpa3:
       	movq	bits3(%rip),%rbx
       	andq	%rdx,%rbx
       	orq 	%rbx,%rbx
       	jz  	prpa4
       	xorq	%rax,%rax
       	movq	%rax,cswls(%rip)
prpa4:
       	movq	bits1(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,erich(%rip)
       	movq	bits2(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,prich(%rip)
       	movq	bits4(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,cpsts(%rip)
       	movq	bits5(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,exsts(%rip)
       	movq	bits6(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,precl(%rip)
       	subq	$8,%rcx
       	orq 	%rbx,%rbx
       	jz  	prpa5
       	movq	%rcx,lstpo(%rip)
prpa5:
       	movq	bits7(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,cswex(%rip)
       	movq	bit10(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,headp(%rip)
       	movq	bits9(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,prsto(%rip)
       	movq	%rdx,%rbx
       	shrq	$12,%rbx
       	andq	bits1(%rip),%rbx
       	movq	%rbx,kvcas(%rip)
       	movq	bit12(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,cswer(%rip)
       	orq 	%rbx,%rbx
       	jz  	prpa6
       	movq	prlen(%rip),%rcx
       	subq	$8,%rcx
       	movq	%rcx,lstpo(%rip)
prpa6:
       	movq	bit11(%rip),%rbx
       	andq	%rdx,%rbx
       	movq	%rbx,cswpr(%rip)
       	andq	bits8(%rip),%rdx
       	orq 	%rdx,%rdx
       	jnz 	prpa8
       	xorq	%rax,%rax
       	cmpq	%rax,initr(%rip)
       	jz  	prpa9
       	movq	r_0116(%rip),%rsi
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_260
       	decq	_rc_(%rip)
       	jns 	l_0451
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0451:
call_260:
       	movq	r_0012(%rip),%rax
       	movq	%rax,16(%rdi)
       	call	setvr
       	jmp 	prpa9
prpa8:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,initr(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,dnamb(%rip)
       	jz  	prpa9
       	movq	r_0116(%rip),%rsi
       	movq	$3,%rbx
       	call	inout
       	pushq	%rdi
       	movq	r_0116(%rip),%rsi
       	movq	$0,%rbx
       	call	inout
       	popq	16(%rdi)
prpa9:
       	ret
prtch:
       	pushq	%rdi
       	movq	prlen(%rip),%rax
       	cmpq	%rax,profs(%rip)
       	jne 	prch1
       	call	prtnl
prch1:
       	movq	prbuf(%rip),%rdi
       	addq	$16,%rdi
       	addq	profs(%rip),%rdi
       	movb	%cl,(%rdi)
       	incq	profs(%rip)
       	popq	%rdi
       	ret
prtic:
       	pushq	%rdi
       	movq	prbuf(%rip),%rdi
       	movq	profs(%rip),%rcx
       	call	syspi
       	decq	_rc_(%rip)
       	js  	call_261
       	decq	_rc_(%rip)
       	jns 	l_0452
       	jmp 	prtc2
l_0452:
call_261:
prtc1:
       	popq	%rdi
       	ret
prtc2:
       	xorq	%rax,%rax
       	movq	%rax,erich(%rip)
       	movq	$252,_rc_(%rip)
       	jmp 	err_
       	jmp 	prtc1
prtis:
       	xorq	%rax,%rax
       	cmpq	%rax,prich(%rip)
       	jnz 	prts1
       	xorq	%rax,%rax
       	cmpq	%rax,erich(%rip)
       	jz  	prts1
       	call	prtic
prts1:
       	call	prtnl
       	ret
prtin:
       	pushq	%rdi
       	call	icbld
       	cmpq	dnamb(%rip),%rdi
       	jb  	prti1
       	cmpq	dnamp(%rip),%rdi
       	ja  	prti1
       	movq	%rdi,dnamp(%rip)
prti1:
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_262
       	decq	_rc_(%rip)
       	jns 	l_0453
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0453:
call_262:
       	movq	%rdi,dnamp(%rip)
       	call	prtst
       	popq	%rdi
       	ret
prtmi:
       	call	prtst
       	movq	$21,profs(%rip)
       	call	prtin
       	call	prtnl
       	ret
prtmm:
       	movq	dnamp(%rip),%rcx
       	subq	statb(%rip),%rcx
       	movq	%rcx,%r12
       	.data
r_0207:	.quad	encm1
       	.text
       	movq	r_0207(%rip),%rdi
       	call	prtmi
       	movq	dname(%rip),%rcx
       	subq	dnamp(%rip),%rcx
       	movq	%rcx,%r12
       	.data
r_0208:	.quad	encm2
       	.text
       	movq	r_0208(%rip),%rdi
       	call	prtmi
       	ret
prtmx:
       	call	prtst
       	movq	$21,profs(%rip)
       	call	prtin
       	call	prtis
       	ret
prtnl:
       	xorq	%rax,%rax
       	cmpq	%rax,headp(%rip)
       	jnz 	prnl0
       	call	prtps
prnl0:
       	pushq	%rdi
       	movq	%rcx,prtsa(%rip)
       	movq	%rbx,prtsb(%rip)
       	movq	prbuf(%rip),%rdi
       	movq	profs(%rip),%rcx
       	call	syspr
       	decq	_rc_(%rip)
       	js  	call_263
       	decq	_rc_(%rip)
       	jns 	l_0454
       	jmp 	prnl2
l_0454:
call_263:
       	movq	prlnw(%rip),%rcx
       	addq	$16,%rdi
       	movq	nullw(%rip),%rbx
prnl1:
       	movq	%rbx,%rax
       	stosq
       	decq	%rcx
       	jnz 	prnl1
       	movq	prtsb(%rip),%rbx
       	movq	prtsa(%rip),%rcx
       	popq	%rdi
       	xorq	%rax,%rax
       	movq	%rax,profs(%rip)
       	ret
prnl2:
       	xorq	%rax,%rax
       	cmpq	%rax,prtef(%rip)
       	jnz 	prnl3
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,prtef(%rip)
       	movq	$253,_rc_(%rip)
       	jmp 	err_
prnl3:
       	movq	$998,%rbx
       	movq	kvstn(%rip),%rcx
       	movq	r_fcb(%rip),%rsi
       	call	sysej
prtnm:
       	pushq	%rcx
       	pushq	%rdi
       	pushq	%rsi
       	cmpq	state(%rip),%rsi
       	ja  	prn02
       	movq	%rsi,%rdi
       	call	prtvn
prn01:
       	popq	%rsi
       	popq	%rdi
       	popq	%rcx
       	ret
prn02:
       	movq	%rcx,%rbx
       	movq	r_0036(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	prn03
       	movq	16(%rsi),%rdi
       	addq	%rcx,%rdi
       	movq	16(%rdi),%rdi
       	call	prtvn
       	movq	$40,%rcx
       	call	prtch
prn03:
       	.data
r_0209:	.quad	b_tet
       	.text
       	movq	r_0209(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	prn04
       	movq	24(%rsi),%rsi
       	jmp 	prn03
prn04:
       	movq	prnmv(%rip),%rdi
       	movq	hshtb(%rip),%rcx
       	jmp 	prn07
prn05:
       	movq	%rcx,%rdi
       	addq	$8,%rcx
       	subq	$48,%rdi
prn06:
       	movq	48(%rdi),%rdi
prn07:
       	movq	%rdi,%rdx
       	orq 	%rdx,%rdx
       	jz  	prn09
prn08:
       	movq	16(%rdi),%rdi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	prn08
       	cmpq	%rsi,%rdi
       	je  	prn10
       	movq	%rdx,%rdi
       	jmp 	prn06
prn09:
       	cmpq	hshte(%rip),%rcx
       	jb  	prn05
       	movq	%rsi,%rdi
       	call	prtvl
       	jmp 	prn11
prn10:
       	movq	%rdx,%rdi
       	movq	%rdi,prnmv(%rip)
       	call	prtvn
prn11:
       	movq	(%rsi),%rdx
       	cmpq	r_0036(%rip),%rdx
       	jne 	prn13
       	movq	$41,%rcx
prn12:
       	call	prtch
       	movq	%rbx,%rcx
       	jmp 	prn01
prn13:
       	movq	$60,%rcx
       	call	prtch
       	movq	(%rsp),%rsi
       	movq	(%rsi),%rdx
       	cmpq	r_0209(%rip),%rdx
       	jne 	prn15
       	movq	8(%rsi),%rdi
       	movq	%rbx,%rsi
       	call	prtvl
       	movq	%rsi,%rbx
prn14:
       	movq	$62,%rcx
       	jmp 	prn12
prn15:
       	movq	%rbx,%rcx
       	shrq	$3,%rcx
       	cmpq	r_0065(%rip),%rdx
       	je  	prn16
       	subq	$2,%rcx
       	movq	%rcx,%r12
       	call	prtin
       	jmp 	prn14
prn16:
       	movq	24(%rsi),%rdx
       	addq	$8,%rdx
       	shrq	$3,%rdx
       	subq	%rdx,%rcx
       	movq	%rcx,%r12
       	movq	32(%rsi),%rcx
       	addq	24(%rsi),%rsi
       	subq	$40,%rsi
prn17:
       	subq	$16,%rsi
       	movq	%r12,prnsi(%rip)
       	movq	48(%rsi),%rax
       	call	M_rmi
       	movq	%r12,%rax
       	pushq	%rax
       	movq	prnsi(%rip),%r12
       	movq	48(%rsi),%rax
       	call	M_dvi
       	decq	%rcx
       	jnz 	prn17
       	xorq	%rdi,%rdi
       	movq	32(%rsi),%rbx
       	jmp 	prn19
prn18:
       	movq	$44,%rcx
       	call	prtch
prn19:
       	popq	%rax
       	movq	%rax,%r12
       	addq	%rdi,%rsi
       	addq	40(%rsi),%r12
       	seto	reg_fl(%rip)
       	subq	%rdi,%rsi
       	call	prtin
       	addq	$16,%rdi
       	decq	%rbx
       	jnz 	prn18
       	jmp 	prn14
prtnv:
       	call	prtnm
       	pushq	%rdi
       	pushq	%rcx
       	movq	r_0173(%rip),%rdi
       	call	prtst
       	movq	%rsi,%rdi
       	addq	%rcx,%rdi
       	movq	(%rdi),%rdi
       	call	prtvl
       	call	prtnl
       	popq	%rcx
       	popq	%rdi
       	ret
prtpg:
       	cmpq	$3,stage(%rip)
       	je  	prp01
       	xorq	%rax,%rax
       	cmpq	%rax,lstlc(%rip)
       	jz  	prp06
       	xorq	%rax,%rax
       	movq	%rax,lstlc(%rip)
prp01:
       	pushq	%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,prstd(%rip)
       	jnz 	prp02
       	xorq	%rax,%rax
       	cmpq	%rax,prich(%rip)
       	jnz 	prp03
       	xorq	%rax,%rax
       	cmpq	%rax,precl(%rip)
       	jz  	prp03
prp02:
       	call	sysep
       	jmp 	prp04
prp03:
       	movq	headp(%rip),%rdi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,headp(%rip)
       	call	prtnl
       	call	prtnl
       	call	prtnl
       	movq	$3,lstlc(%rip)
       	movq	%rdi,headp(%rip)
prp04:
       	xorq	%rax,%rax
       	cmpq	%rax,headp(%rip)
       	jnz 	prp05
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,headp(%rip)
       	pushq	%rsi
       	.data
r_0210:	.quad	headr
       	.text
       	movq	r_0210(%rip),%rdi
       	call	prtst
       	call	sysid
       	call	prtst
       	call	prtnl
       	movq	%rsi,%rdi
       	call	prtst
       	call	prtnl
       	call	prtnl
       	call	prtnl
       	addq	$4,lstlc(%rip)
       	popq	%rsi
prp05:
       	popq	%rdi
prp06:
       	ret
prtps:
       	movq	prsto(%rip),%rax
       	movq	%rax,prstd(%rip)
       	call	prtpg
       	xorq	%rax,%rax
       	movq	%rax,prstd(%rip)
       	ret
prtsn:
       	pushq	%rdi
       	movq	%rcx,prsna(%rip)
       	.data
r_0211:	.quad	tmasb
       	.text
       	movq	r_0211(%rip),%rdi
       	call	prtst
       	movq	$4,profs(%rip)
       	movq	kvstn(%rip),%r12
       	call	prtin
       	movq	$13,profs(%rip)
       	movq	kvfnc(%rip),%rdi
       	movq	$105,%rcx
prsn1:
       	orq 	%rdi,%rdi
       	jz  	prsn2
       	call	prtch
       	decq	%rdi
       	jmp 	prsn1
prsn2:
       	movq	$32,%rcx
       	call	prtch
       	movq	prsna(%rip),%rcx
       	popq	%rdi
       	ret
prtst:
       	xorq	%rax,%rax
       	cmpq	%rax,headp(%rip)
       	jnz 	prst0
       	call	prtps
prst0:
       	movq	%rcx,prsva(%rip)
       	movq	%rbx,prsvb(%rip)
       	xorq	%rbx,%rbx
prst1:
       	movq	8(%rdi),%rcx
       	subq	%rbx,%rcx
       	orq 	%rcx,%rcx
       	jz  	prst4
       	pushq	%rsi
       	pushq	%rdi
       	movq	%rdi,%rsi
       	movq	prlen(%rip),%rdi
       	subq	profs(%rip),%rdi
       	orq 	%rdi,%rdi
       	jnz 	prst2
       	call	prtnl
       	movq	prlen(%rip),%rdi
prst2:
       	cmpq	%rdi,%rcx
       	jb  	prst3
       	movq	%rdi,%rcx
prst3:
       	movq	prbuf(%rip),%rdi
       	leaq	16(%rsi,%rbx),%rsi
       	addq	$16,%rdi
       	addq	profs(%rip),%rdi
       	addq	%rcx,%rbx
       	addq	%rcx,profs(%rip)
       	movq	%rbx,prsvc(%rip)
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	prsvc(%rip),%rbx
       	popq	%rdi
       	popq	%rsi
       	jmp 	prst1
prst4:
       	movq	prsvb(%rip),%rbx
       	movq	prsva(%rip),%rcx
       	ret
prttr:
       	pushq	%rdi
       	call	prtic
       	movq	prbuf(%rip),%rdi
       	movq	prlnw(%rip),%rcx
       	addq	$16,%rdi
       	movq	nullw(%rip),%rbx
prtt1:
       	movq	%rbx,%rax
       	stosq
       	decq	%rcx
       	jnz 	prtt1
       	xorq	%rax,%rax
       	movq	%rax,profs(%rip)
       	popq	%rdi
       	ret
prtvl:
       	pushq	%rsi
       	pushq	%rdi
       	call	chk_
       	orq 	%rax,%rax
       	jne 	sec06
prv01:
       	movq	8(%rdi),%rax
       	movq	%rax,prvsi(%rip)
       	movq	(%rdi),%rsi
       	movq	%rsi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rsi
       	cmpq	$18,%rsi
       	jge 	prv02
       	.data
r_0212:	.quad	l_0455
       	.text
       	movq	r_0212(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0455:
       	.quad	prv05
       	.quad	prv02
       	.quad	prv02
       	.quad	prv08
       	.quad	prv09
       	.quad	prv02
       	.quad	prv02
       	.quad	prv02
       	.quad	prv08
       	.quad	prv11
       	.quad	prv12
       	.quad	prv13
       	.quad	prv13
       	.quad	prv02
       	.quad	prv02
       	.quad	prv02
       	.quad	prv10
       	.quad	prv04
       	.text
prv02:
       	call	dtype
       	call	prtst
prv03:
       	popq	%rdi
       	popq	%rsi
       	ret
prv04:
       	movq	16(%rdi),%rdi
       	jmp 	prv01
prv05:
       	movq	%rdi,%rsi
       	.data
r_0213:	.quad	scarr
       	.text
       	movq	r_0213(%rip),%rdi
       	call	prtst
       	movq	$40,%rcx
       	call	prtch
       	addq	24(%rsi),%rsi
       	movq	(%rsi),%rdi
       	call	prtst
prv06:
       	movq	$41,%rcx
       	call	prtch
prv07:
       	movq	$32,%rcx
       	call	prtch
       	movq	$35,%rcx
       	call	prtch
       	movq	prvsi(%rip),%r12
       	call	prtin
       	jmp 	prv03
prv08:
       	pushq	%rdi
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_264
       	decq	_rc_(%rip)
       	jns 	l_0456
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0456:
call_264:
       	call	prtst
       	movq	%rdi,dnamp(%rip)
       	jmp 	prv03
prv09:
       	movq	8(%rdi),%rsi
       	movq	(%rsi),%rcx
       	cmpq	r_0175(%rip),%rcx
       	je  	prv02
       	cmpq	r_0031(%rip),%rcx
       	je  	prv02
       	movq	$46,%rcx
       	call	prtch
       	movq	16(%rdi),%rcx
       	call	prtnm
       	jmp 	prv03
prv10:
       	call	dtype
       	call	prtst
       	jmp 	prv07
prv11:
       	movq	$39,%rcx
       	call	prtch
       	call	prtst
       	call	prtch
       	jmp 	prv03
prv12:
       	movq	$42,%rcx
       	call	prtch
       	movq	8(%rdi),%rdi
       	call	prtvn
       	jmp 	prv03
prv13:
       	movq	%rdi,%rsi
       	call	dtype
       	call	prtst
       	movq	$40,%rcx
       	call	prtch
       	movq	16(%rsi),%rcx
       	shrq	$3,%rcx
       	subq	$4,%rcx
       	movq	r_0022(%rip),%rax
       	cmpq	%rax,(%rsi)
       	je  	prv14
       	addq	$1,%rcx
prv14:
       	movq	%rcx,%r12
       	call	prtin
       	jmp 	prv06
prtvn:
       	pushq	%rdi
       	addq	$48,%rdi
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rdi)
       	jnz 	prvn1
       	movq	16(%rdi),%rdi
prvn1:
       	call	prtst
       	popq	%rdi
       	ret
rcbld:
       	movq	dnamp(%rip),%rdi
       	addq	$16,%rdi
       	cmpq	dname(%rip),%rdi
       	jb  	rcbl1
       	movq	$16,%rcx
       	call	alloc
       	addq	%rcx,%rdi
rcbl1:
       	movq	%rdi,dnamp(%rip)
       	subq	$16,%rdi
       	movq	r_0026(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	reg_ra(%rip),%rax
       	movq	%rax,8(%rdi)
       	ret
readr:
       	movq	r_cni(%rip),%rdi
       	orq 	%rdi,%rdi
       	jnz 	read3
       	xorq	%rax,%rax
       	cmpq	%rax,cnind(%rip)
       	jnz 	reada
       	cmpq	$0,stage(%rip)
       	jne 	read3
reada:
       	movq	cswin(%rip),%rcx
       	xorq	%rsi,%rsi
       	call	alocs
       	call	sysrd
       	decq	_rc_(%rip)
       	js  	call_265
       	decq	_rc_(%rip)
       	jns 	l_0457
       	jmp 	read4
l_0457:
call_265:
       	incq	rdnln(%rip)
       	decq	polct(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,polct(%rip)
       	jnz 	read0
       	xorq	%rcx,%rcx
       	movq	rdnln(%rip),%rbx
       	call	syspl
       	decq	_rc_(%rip)
       	js  	call_266
       	decq	_rc_(%rip)
       	jns 	l_0458
       	movq	$320,_rc_(%rip)
       	jmp 	err_
l_0458:
       	decq	_rc_(%rip)
       	jns 	l_0459
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0459:
       	decq	_rc_(%rip)
       	jns 	l_0460
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0460:
call_266:
       	movq	%rcx,polcs(%rip)
       	movq	%rcx,polct(%rip)
read0:
       	movq	cswin(%rip),%rax
       	cmpq	%rax,8(%rdi)
       	jbe 	read1
       	movq	cswin(%rip),%rax
       	movq	%rax,8(%rdi)
read1:
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	call	trimr
read2:
       	movq	%rdi,r_cni(%rip)
read3:
       	ret
read4:
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rdi)
       	jz  	read5
       	xorq	%rbx,%rbx
       	movq	%rbx,rdnln(%rip)
       	call	trimr
       	call	newfn
       	jmp 	reada
read5:
       	movq	%rdi,dnamp(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,cnind(%rip)
       	jz  	read6
       	xorq	%rsi,%rsi
       	call	sysif
       	decq	_rc_(%rip)
       	js  	call_267
       	decq	_rc_(%rip)
       	jns 	l_0461
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0461:
call_267:
       	movq	cnind(%rip),%rcx
       	addq	$2,%rcx
       	salq	$3,%rcx
       	movq	r_ifa(%rip),%rdi
       	addq	%rcx,%rdi
       	movq	(%rdi),%rax
       	movq	%rax,r_sfc(%rip)
       	movq	r_0012(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	r_ifl(%rip),%rdi
       	addq	%rcx,%rdi
       	movq	(%rdi),%rsi
       	movq	8(%rsi),%r12
       	movq	%r12,rdnln(%rip)
       	movq	r_0014(%rip),%rax
       	movq	%rax,(%rdi)
       	decq	cnind(%rip)
       	movq	cmpsn(%rip),%rbx
       	incq	%rbx
       	movq	%rbx,%r12
       	call	icbld
       	movq	r_sfn(%rip),%rsi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rbx
       	call	tfind
       	decq	_rc_(%rip)
       	js  	call_268
       	decq	_rc_(%rip)
       	jns 	l_0462
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0462:
call_268:
       	movq	r_sfc(%rip),%rax
       	movq	%rax,16(%rsi)
       	cmpq	$0,stage(%rip)
       	je  	reada
       	xorq	%rax,%rax
       	cmpq	%rax,cnind(%rip)
       	jnz 	reada
       	movq	r_ici(%rip),%rsi
       	xorq	%rax,%rax
       	movq	%rax,r_ici(%rip)
       	movq	cnsil(%rip),%rcx
       	movq	cnspt(%rip),%rbx
       	subq	%rbx,%rcx
       	movq	%rcx,scnil(%rip)
       	xorq	%rax,%rax
       	movq	%rax,scnpt(%rip)
       	call	sbstr
       	movq	%rdi,r_cim(%rip)
       	jmp 	read2
read6:
       	xorq	%rdi,%rdi
       	jmp 	read2
sbstr:
       	orq 	%rcx,%rcx
       	jz  	sbst2
       	call	alocs
       	movq	%rdx,%rcx
       	movq	%rdi,%rdx
       	leaq	16(%rsi,%rbx),%rsi
       	addq	$16,%rdi
       	rep
       	movsb
       	shrq	$3,%rcx
       	rep 	movsq
       	movq	%rdx,%rdi
sbst1:
       	xorq	%rsi,%rsi
       	ret
sbst2:
       	movq	r_0012(%rip),%rdi
       	jmp 	sbst1
stgcc:
       	movq	polcs(%rip),%rcx
       	movq	$1,%rbx
       	movq	kvstl(%rip),%r12
       	xorq	%rax,%rax
       	cmpq	%rax,kvpfl(%rip)
       	jnz 	stgc1
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	stgc3
       	xorq	%rax,%rax
       	cmpq	%rax,r_stc(%rip)
       	jz  	stgc2
stgc1:
       	movq	%rcx,%rbx
       	movq	$1,%rcx
       	jmp 	stgc3
stgc2:
       	movq	%rcx,%r12
       	subq	kvstl(%rip),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jle 	stgc3
       	movq	kvstl(%rip),%r12
       	movq	%r12,%rcx
stgc3:
       	movq	%rcx,stmcs(%rip)
       	movq	%rcx,stmct(%rip)
       	movq	%rbx,polct(%rip)
       	ret
tfind:
       	pushq	%rbx
       	pushq	%rdi
       	pushq	%rsi
       	movq	16(%rsi),%rcx
       	shrq	$3,%rcx
       	subq	$4,%rcx
       	movq	%rcx,%r12
       	movq	%r12,tfnsi(%rip)
       	movq	(%rdi),%rsi
       	movq	%rsi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rsi
       	cmpq	$17,%rsi
       	jge 	tfn00
       	.data
r_0214:	.quad	l_0463
       	.text
       	movq	r_0214(%rip),%rax
       	salq	$3,%rsi
       	addq	%rsi,%rax
       	jmp 	*(%rax)
       	.data
l_0463:
       	.quad	tfn00
       	.quad	tfn00
       	.quad	tfn00
       	.quad	tfn02
       	.quad	tfn04
       	.quad	tfn03
       	.quad	tfn03
       	.quad	tfn03
       	.quad	tfn02
       	.quad	tfn05
       	.quad	tfn00
       	.quad	tfn00
       	.quad	tfn00
       	.quad	tfn00
       	.quad	tfn00
       	.quad	tfn00
       	.quad	tfn00
       	.text
tfn00:
       	movq	8(%rdi),%rcx
tfn01:
       	movq	%rcx,%r12
       	jmp 	tfn06
tfn02:
       	movq	8(%rdi),%r12
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jge 	tfn06
       	negq	%r12
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	tfn06
       	jmp 	tfn06
tfn03:
       	movq	(%rdi),%rcx
       	jmp 	tfn01
tfn04:
       	movq	16(%rdi),%rcx
       	jmp 	tfn01
tfn05:
       	call	hashs
tfn06:
       	movq	tfnsi(%rip),%rax
       	call	M_rmi
       	movq	%r12,%rdx
       	salq	$3,%rdx
       	movq	(%rsp),%rsi
       	addq	%rdx,%rsi
       	movq	32(%rsi),%rdi
       	cmpq	(%rsp),%rdi
       	je  	tfn10
tfn07:
       	movq	%rdi,%rbx
       	movq	8(%rdi),%rdi
       	movq	8(%rsp),%rsi
       	call	ident
       	decq	_rc_(%rip)
       	js  	call_269
       	decq	_rc_(%rip)
       	jns 	l_0464
       	jmp 	tfn08
l_0464:
call_269:
       	movq	%rbx,%rsi
       	movq	24(%rsi),%rdi
       	cmpq	(%rsp),%rdi
       	jne 	tfn07
       	movq	$24,%rdx
       	jmp 	tfn11
tfn08:
       	movq	%rbx,%rsi
       	movq	$16,%rcx
       	movq	16(%rsp),%rbx
       	orq 	%rbx,%rbx
       	jnz 	tfn09
       	call	acess
       	decq	_rc_(%rip)
       	js  	call_270
       	decq	_rc_(%rip)
       	jns 	l_0465
       	jmp 	tfn12
l_0465:
call_270:
       	xorq	%rbx,%rbx
tfn09:
       	addq	$24,%rsp
       	movq	$0,_rc_(%rip)
       	ret
tfn10:
       	addq	$32,%rdx
       	movq	(%rsp),%rsi
tfn11:
       	movq	(%rsp),%rdi
       	movq	24(%rdi),%rdi
       	movq	16(%rsp),%rbx
       	orq 	%rbx,%rbx
       	jz  	tfn09
       	movq	%rdi,%rbx
       	movq	$32,%rcx
       	call	alloc
       	addq	%rdx,%rsi
       	movq	%rdi,(%rsi)
       	movq	r_0209(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rbx,16(%rdi)
       	popq	24(%rdi)
       	popq	8(%rdi)
       	popq	%rbx
       	movq	%rdi,%rsi
       	movq	$16,%rcx
       	movq	$0,_rc_(%rip)
       	ret
tfn12:
       	movq	$1,_rc_(%rip)
       	ret
tmake:
       	movq	%rdx,%rcx
       	addq	$4,%rcx
       	salq	$3,%rcx
       	call	alloc
       	movq	%rdi,%rbx
       	movq	r_0022(%rip),%rax
       	stosq
       	xorq	%rax,%rax
       	stosq
       	movq	%rcx,%rax
       	stosq
       	movq	%rsi,%rax
       	stosq
tma01:
       	movq	%rbx,%rax
       	stosq
       	decq	%rdx
       	jnz 	tma01
       	movq	%rbx,%rdi
       	ret
vmake:
       	movq	%rcx,%rbx
       	addq	$3,%rcx
       	salq	$3,%rcx
       	cmpq	mxlen(%rip),%rcx
       	ja  	vmak2
       	call	alloc
       	movq	r_0021(%rip),%rax
       	movq	%rax,(%rdi)
       	xorq	%rax,%rax
       	movq	%rax,8(%rdi)
       	movq	%rcx,16(%rdi)
       	movq	%rsi,%rdx
       	movq	%rdi,%rsi
       	addq	$24,%rsi
vmak1:
       	movq	%rdx,(%rsi)
       	addq	$8,%rsi
       	decq	%rbx
       	jnz 	vmak1
       	movq	$0,_rc_(%rip)
       	ret
vmak2:
       	movq	$1,_rc_(%rip)
       	ret
scane:
       	xorq	%rax,%rax
       	movq	%rax,scnbl(%rip)
       	movq	%rcx,scnsa(%rip)
       	movq	%rbx,scnsb(%rip)
       	movq	%rdx,scnsc(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,scnrs(%rip)
       	jz  	scn03
       	movq	scntp(%rip),%rsi
       	movq	r_scp(%rip),%rdi
       	xorq	%rax,%rax
       	movq	%rax,scnrs(%rip)
       	jmp 	scn13
scn01:
       	call	readr
       	movq	$56,%rbx
       	orq 	%rdi,%rdi
       	jz  	scn30
       	addq	$16,%rdi
       	xorq	%rdx,%rdx
       	movb	(%rdi),%dl
       	cmpq	$46,%rdx
       	je  	scn02
       	cmpq	$43,%rdx
       	jne 	scn30
scn02:
       	call	nexts
       	movq	$1,scnpt(%rip)
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scnbl(%rip)
scn03:
       	movq	scnpt(%rip),%rcx
       	cmpq	scnil(%rip),%rcx
       	je  	scn01
       	movq	r_cim(%rip),%rsi
       	leaq	16(%rsi,%rcx),%rsi
       	movq	%rcx,scnse(%rip)
       	movq	r_0187(%rip),%rdx
       	movq	$56,%rbx
       	jmp 	scn06
scn05:
       	orq 	%rbx,%rbx
       	jz  	scn10
       	incq	scnse(%rip)
       	cmpq	scnil(%rip),%rcx
       	je  	scn01
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,scnbl(%rip)
scn06:
       	xorq	%rax,%rax
       	movb	(%rsi),%al
       	incq	%rsi
       	movq	%rax,%rdi
       	incq	%rcx
       	movq	%rcx,scnpt(%rip)
       	cmpq	$128,%rdi
       	jge 	scn07
       	.data
r_0215:	.quad	l_0466
       	.text
       	movq	r_0215(%rip),%rax
       	salq	$3,%rdi
       	addq	%rdi,%rax
       	jmp 	*(%rax)
       	.data
l_0466:
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn05
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn07
       	.quad	scn05
       	.quad	scn37
       	.quad	scn17
       	.quad	scn41
       	.quad	scn36
       	.quad	scn38
       	.quad	scn44
       	.quad	scn16
       	.quad	scn25
       	.quad	scn26
       	.quad	scn49
       	.quad	scn33
       	.quad	scn31
       	.quad	scn34
       	.quad	scn32
       	.quad	scn40
       	.quad	scn08
       	.quad	scn08
       	.quad	scn08
       	.quad	scn08
       	.quad	scn08
       	.quad	scn08
       	.quad	scn08
       	.quad	scn08
       	.quad	scn08
       	.quad	scn08
       	.quad	scn29
       	.quad	scn30
       	.quad	scn28
       	.quad	scn46
       	.quad	scn27
       	.quad	scn45
       	.quad	scn42
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn20
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn21
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn28
       	.quad	scn07
       	.quad	scn27
       	.quad	scn37
       	.quad	scn24
       	.quad	scn07
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn20
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn21
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn09
       	.quad	scn07
       	.quad	scn43
       	.quad	scn07
       	.quad	scn35
       	.quad	scn07
       	.text
scn07:
       	orq 	%rbx,%rbx
       	jz  	scn10
       	movq	$230,_rc_(%rip)
       	jmp 	err_
scn08:
       	orq 	%rbx,%rbx
       	jz  	scn09
       	xorq	%rdx,%rdx
scn09:
       	cmpq	scnil(%rip),%rcx
       	je  	scn11
       	xorq	%rbx,%rbx
       	jmp 	scn06
scn10:
       	decq	%rcx
scn11:
       	movq	%rcx,scnpt(%rip)
       	movq	scnse(%rip),%rbx
       	subq	%rbx,%rcx
       	movq	r_cim(%rip),%rsi
       	orq 	%rdx,%rdx
       	jnz 	scn15
       	call	sbstr
       	movq	%rdi,dnamp(%rip)
       	call	gtnum
       	decq	_rc_(%rip)
       	js  	call_271
       	decq	_rc_(%rip)
       	jns 	l_0467
       	jmp 	scn14
l_0467:
call_271:
scn12:
       	movq	$18,%rsi
scn13:
       	movq	scnsa(%rip),%rcx
       	movq	scnsb(%rip),%rbx
       	movq	scnsc(%rip),%rdx
       	movq	%rdi,r_scp(%rip)
       	movq	%rsi,scntp(%rip)
       	xorq	%rax,%rax
       	movq	%rax,scngo(%rip)
       	ret
scn14:
       	movq	$231,_rc_(%rip)
       	jmp 	err_
scn15:
       	call	sbstr
       	xorq	%rax,%rax
       	cmpq	%rax,scncc(%rip)
       	jnz 	scn13
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_272
       	decq	_rc_(%rip)
       	jns 	l_0468
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0468:
call_272:
       	movq	$15,%rsi
       	jmp 	scn13
scn16:
       	orq 	%rbx,%rbx
       	jz  	scn10
       	movq	$39,%rbx
       	jmp 	scn18
scn17:
       	orq 	%rbx,%rbx
       	jz  	scn10
       	movq	$34,%rbx
scn18:
       	cmpq	scnil(%rip),%rcx
       	je  	scn19
       	xorq	%rdx,%rdx
       	movb	(%rsi),%dl
       	incq	%rsi
       	incq	%rcx
       	cmpq	%rbx,%rdx
       	jne 	scn18
       	movq	scnpt(%rip),%rbx
       	movq	%rcx,scnpt(%rip)
       	decq	%rcx
       	subq	%rbx,%rcx
       	movq	r_cim(%rip),%rsi
       	call	sbstr
       	jmp 	scn12
scn19:
       	movq	%rcx,scnpt(%rip)
       	movq	$232,_rc_(%rip)
       	jmp 	err_
scn20:
       	movq	$34,%rdi
       	jmp 	scn22
scn21:
       	movq	$35,%rdi
scn22:
       	xorq	%rax,%rax
       	cmpq	%rax,scngo(%rip)
       	jz  	scn09
scn23:
       	orq 	%rbx,%rbx
       	jz  	scn10
       	movq	%rdi,%rsi
       	jmp 	scn13
scn24:
       	orq 	%rbx,%rbx
       	jz  	scn09
       	jmp 	scn07
scn25:
       	movq	$3,%rdi
       	orq 	%rbx,%rbx
       	jnz 	scn23
       	orq 	%rdx,%rdx
       	jz  	scn10
       	movq	scnse(%rip),%rbx
       	movq	%rcx,scnpt(%rip)
       	decq	%rcx
       	subq	%rbx,%rcx
       	movq	r_cim(%rip),%rsi
       	call	sbstr
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_273
       	decq	_rc_(%rip)
       	jns 	l_0469
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0469:
call_273:
       	movq	$12,%rsi
       	jmp 	scn13
scn26:
       	movq	$24,%rdi
       	jmp 	scn23
scn27:
       	movq	$27,%rdi
       	jmp 	scn23
scn28:
       	movq	$6,%rdi
       	jmp 	scn23
scn29:
       	movq	$30,%rdi
       	jmp 	scn23
scn30:
       	movq	$33,%rdi
       	jmp 	scn23
scn31:
       	movq	$9,%rdi
       	jmp 	scn23
scn32:
       	orq 	%rbx,%rbx
       	jz  	scn09
       	addq	%rbx,%rdx
scn33:
       	orq 	%rdx,%rdx
       	jz  	scn09
       	orq 	%rbx,%rbx
       	jz  	scn48
       	addq	%rbx,%rdx
scn34:
       	orq 	%rdx,%rdx
       	jz  	scn09
       	orq 	%rbx,%rbx
       	jz  	scn48
       	addq	%rbx,%rdx
scn35:
       	addq	%rbx,%rdx
scn36:
       	addq	%rbx,%rdx
scn37:
       	addq	%rbx,%rdx
scn38:
       	addq	%rbx,%rdx
scn39:
       	addq	%rbx,%rdx
scn40:
       	addq	%rbx,%rdx
scn41:
       	addq	%rbx,%rdx
scn42:
       	addq	%rbx,%rdx
scn43:
       	addq	%rbx,%rdx
scn44:
       	addq	%rbx,%rdx
scn45:
       	addq	%rbx,%rdx
scn46:
       	orq 	%rbx,%rbx
       	jz  	scn10
       	movq	%rdx,%rdi
       	xorq	%rdx,%rdx
       	movb	(%rsi),%dl
       	movq	$21,%rsi
       	cmpq	scnil(%rip),%rcx
       	je  	scn47
       	cmpq	$32,%rdx
       	je  	scn47
       	cmpq	$9,%rdx
       	je  	scn47
       	cmpq	$59,%rdx
       	je  	scn47
       	cmpq	$58,%rdx
       	je  	scn47
       	cmpq	$41,%rdx
       	je  	scn47
       	cmpq	$62,%rdx
       	je  	scn47
       	cmpq	$93,%rdx
       	je  	scn47
       	addq	$32,%rdi
       	movq	$0,%rsi
       	cmpq	$12,scntp(%rip)
       	jbe 	scn13
scn47:
       	xorq	%rax,%rax
       	cmpq	%rax,scnbl(%rip)
       	jnz 	scn13
scn48:
       	movq	$233,_rc_(%rip)
       	jmp 	err_
scn49:
       	orq 	%rbx,%rbx
       	jz  	scn10
       	cmpq	scnil(%rip),%rcx
       	je  	scn39
       	movq	%rcx,%rdi
       	movq	%rcx,scnof(%rip)
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	incq	%rsi
       	cmpq	$42,%rcx
       	jne 	scn50
       	incq	%rdi
       	cmpq	scnil(%rip),%rdi
       	je  	scn51
       	xorq	%rcx,%rcx
       	movb	(%rsi),%cl
       	cmpq	$32,%rcx
       	je  	scn51
       	cmpq	$9,%rcx
       	je  	scn51
scn50:
       	movq	scnof(%rip),%rcx
       	movq	r_cim(%rip),%rsi
       	leaq	16(%rsi,%rcx),%rsi
       	jmp 	scn39
scn51:
       	movq	%rdi,scnpt(%rip)
       	movq	%rdi,%rcx
       	jmp 	scn37
scngf:
       	call	scane
       	cmpq	$3,%rsi
       	je  	scng1
       	cmpq	$6,%rsi
       	je  	scng2
       	movq	$234,_rc_(%rip)
       	jmp 	err_
scng1:
       	movq	$1,%rbx
       	call	expan
       	.data
r_0216:	.quad	opdvn
       	.text
       	movq	r_0216(%rip),%rcx
       	cmpq	statb(%rip),%rdi
       	jbe 	scng3
       	cmpq	state(%rip),%rdi
       	jb  	scng4
       	jmp 	scng3
scng2:
       	movq	$2,%rbx
       	call	expan
       	movq	r_0122(%rip),%rcx
scng3:
       	pushq	%rcx
       	pushq	%rdi
       	call	expop
       	popq	%rdi
scng4:
       	ret
setvr:
       	cmpq	state(%rip),%rdi
       	ja  	setv1
       	movq	%rdi,%rsi
       	.data
r_0217:	.quad	b_vrl
       	.text
       	movq	r_0217(%rip),%rax
       	movq	%rax,0(%rdi)
       	movq	r_0071(%rip),%rax
       	cmpq	%rax,8(%rdi)
       	je  	setv1
       	.data
r_0218:	.quad	b_vrs
       	.text
       	movq	r_0218(%rip),%rax
       	movq	%rax,8(%rdi)
       	movq	16(%rsi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	setv1
       	movq	r_0134(%rip),%rax
       	movq	%rax,0(%rdi)
       	movq	r_0199(%rip),%rax
       	movq	%rax,8(%rdi)
setv1:
       	ret
sorta:
       	popq	prc_016(%rip)
       	movq	%rcx,srtsr(%rip)
       	movq	$8,srtst(%rip)
       	xorq	%rax,%rax
       	movq	%rax,srtof(%rip)
       	movq	r_0012(%rip),%rax
       	movq	%rax,srtdf(%rip)
       	popq	r_sxr(%rip)
       	popq	%rdi
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,%rcx
       	call	gtarr
       	decq	_rc_(%rip)
       	js  	call_274
       	decq	_rc_(%rip)
       	jns 	l_0470
       	jmp 	srt18
l_0470:
       	decq	_rc_(%rip)
       	jns 	l_0471
       	jmp 	srt16
l_0471:
call_274:
       	pushq	%rdi
       	pushq	%rdi
       	call	copyb
       	decq	_rc_(%rip)
       	js  	call_275
       	decq	_rc_(%rip)
       	jns 	l_0472
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0472:
call_275:
       	pushq	%rdi
       	movq	r_sxr(%rip),%rdi
       	movq	8(%rsp),%rsi
       	movq	r_0021(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	srt02
       	cmpq	r_0012(%rip),%rdi
       	je  	srt01
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_276
       	decq	_rc_(%rip)
       	jns 	l_0473
       	movq	$257,_rc_(%rip)
       	jmp 	err_
l_0473:
call_276:
       	movq	%rdi,srtdf(%rip)
srt01:
       	movq	$16,%rdx
       	movq	$24,%rbx
       	movq	16(%rsi),%rcx
       	subq	$24,%rcx
       	jmp 	srt04
srt02:
       	movq	48(%rsi),%r12
       	movq	%r12,%rcx
       	salq	$3,%rcx
       	movq	$64,%rbx
       	movq	$56,%rdx
       	cmpq	$1,32(%rsi)
       	je  	srt04
       	cmpq	$2,32(%rsi)
       	jne 	srt16
       	movq	56(%rsi),%r12
       	cmpq	r_0012(%rip),%rdi
       	je  	srt03
       	call	gtint
       	decq	_rc_(%rip)
       	js  	call_277
       	decq	_rc_(%rip)
       	jns 	l_0474
       	jmp 	srt17
l_0474:
call_277:
       	movq	8(%rdi),%r12
srt03:
       	subq	56(%rsi),%r12
       	seto	reg_fl(%rip)
       	movb	reg_fl(%rip),%al
       	orb 	%al,%al
       	jo  	srt17
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jl  	srt17
       	subq	64(%rsi),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rax
       	orq 	%rax,%rax
       	jge 	srt17
       	addq	64(%rsi),%r12
       	seto	reg_fl(%rip)
       	movq	%r12,%rcx
       	salq	$3,%rcx
       	movq	%rcx,srtof(%rip)
       	movq	64(%rsi),%r12
       	movq	%r12,%rcx
       	movq	%rcx,%rdi
       	salq	$3,%rcx
       	movq	%rcx,srtst(%rip)
       	movq	48(%rsi),%r12
       	movq	%r12,%rcx
       	salq	$3,%rcx
       	movq	16(%rsi),%rdx
       	subq	%rcx,%rdx
       	subq	$8,%rdx
       	movq	24(%rsi),%rbx
       	addq	$8,%rbx
srt04:
       	cmpq	$8,%rcx
       	jbe 	srt15
       	movq	%rcx,srtsn(%rip)
       	movq	%rdx,srtso(%rip)
       	movq	16(%rsi),%rdx
       	addq	%rsi,%rdx
       	movq	%rbx,srtsf(%rip)
       	addq	%rbx,%rsi
srt05:
       	movq	(%rsi),%rdi
srt06:
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	srt07
       	movq	16(%rdi),%rdi
       	jmp 	srt06
srt07:
       	movq	%rdi,(%rsi)
       	addq	$8,%rsi
       	cmpq	%rdx,%rsi
       	jb  	srt05
       	movq	(%rsp),%rsi
       	movq	srtsf(%rip),%rdi
       	movq	srtst(%rip),%rbx
       	addq	srtso(%rip),%rsi
       	addq	$8,%rsi
       	movq	srtsn(%rip),%rdx
       	shrq	$3,%rdx
       	movq	%rdx,srtnr(%rip)
srt08:
       	movq	%rdi,(%rsi)
       	addq	$8,%rsi
       	addq	%rbx,%rdi
       	decq	%rdx
       	jnz 	srt08
srt09:
       	movq	srtsn(%rip),%rcx
       	movq	srtnr(%rip),%rdx
       	shrq	$1,%rdx
       	salq	$3,%rdx
srt10:
       	call	sorth
       	subq	$8,%rdx
       	orq 	%rdx,%rdx
       	jnz 	srt10
       	movq	%rcx,%rdx
srt11:
       	subq	$8,%rdx
       	orq 	%rdx,%rdx
       	jz  	srt12
       	movq	(%rsp),%rdi
       	addq	srtso(%rip),%rdi
       	movq	%rdi,%rsi
       	addq	%rdx,%rsi
       	movq	8(%rsi),%rbx
       	movq	8(%rdi),%rax
       	movq	%rax,8(%rsi)
       	movq	%rbx,8(%rdi)
       	movq	%rdx,%rcx
       	movq	$8,%rdx
       	call	sorth
       	movq	%rcx,%rdx
       	jmp 	srt11
srt12:
       	movq	(%rsp),%rdi
       	movq	%rdi,%rdx
       	addq	srtso(%rip),%rdx
       	addq	srtsf(%rip),%rdi
       	movq	srtst(%rip),%rbx
srt13:
       	addq	$8,%rdx
       	movq	%rdx,%rsi
       	movq	(%rsi),%rsi
       	addq	8(%rsp),%rsi
       	movq	%rbx,%rcx
       	shrq	$3,%rcx
       	rep 	movsq
       	decq	srtnr(%rip)
       	xorq	%rax,%rax
       	cmpq	%rax,srtnr(%rip)
       	jnz 	srt13
srt15:
       	popq	%rdi
       	addq	$8,%rsp
       	xorq	%rax,%rax
       	movq	%rax,r_sxl(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_sxr(%rip)
       	movq	$0,_rc_(%rip)
       	movq	prc_016(%rip),%rax
       	jmp 	*%rax
srt16:
       	movq	$256,_rc_(%rip)
       	jmp 	err_
srt17:
       	movq	$258,_rc_(%rip)
       	jmp 	err_
srt18:
       	movq	$1,_rc_(%rip)
       	movq	prc_016(%rip),%rax
       	jmp 	*%rax
sortc:
       	movq	%rcx,srts1(%rip)
       	movq	%rbx,srts2(%rip)
       	movq	%rdx,srtsc(%rip)
       	addq	srtof(%rip),%rsi
       	movq	%rsi,%rdi
       	addq	%rcx,%rsi
       	addq	%rbx,%rdi
       	movq	(%rsi),%rsi
       	movq	(%rdi),%rdi
       	movq	r_0012(%rip),%rax
       	cmpq	%rax,srtdf(%rip)
       	jne 	src12
src01:
       	movq	(%rsi),%rdx
       	cmpq	(%rdi),%rdx
       	jne 	src02
       	cmpq	r_0025(%rip),%rdx
       	je  	src09
       	cmpq	r_0023(%rip),%rdx
       	je  	src14
src02:
       	movq	%rsi,r_sxl(%rip)
       	movq	%rdi,r_sxr(%rip)
       	cmpq	r_0025(%rip),%rdx
       	je  	src11
       	movq	r_0025(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	src11
src14:
       	pushq	%rsi
       	pushq	%rdi
       	call	acomp
       	decq	_rc_(%rip)
       	js  	call_278
       	decq	_rc_(%rip)
       	jns 	l_0475
       	jmp 	src10
l_0475:
       	decq	_rc_(%rip)
       	jns 	l_0476
       	jmp 	src10
l_0476:
       	decq	_rc_(%rip)
       	jns 	l_0477
       	jmp 	src03
l_0477:
       	decq	_rc_(%rip)
       	jns 	l_0478
       	jmp 	src08
l_0478:
       	decq	_rc_(%rip)
       	jns 	l_0479
       	jmp 	src05
l_0479:
call_278:
src03:
       	xorq	%rax,%rax
       	cmpq	%rax,srtsr(%rip)
       	jnz 	src06
src04:
       	movq	srtsc(%rip),%rdx
       	movq	$1,_rc_(%rip)
       	ret
src05:
       	xorq	%rax,%rax
       	cmpq	%rax,srtsr(%rip)
       	jnz 	src04
src06:
       	movq	srtsc(%rip),%rdx
       	movq	$0,_rc_(%rip)
       	ret
src07:
       	cmpq	%rdi,%rsi
       	jb  	src03
       	cmpq	%rdi,%rsi
       	ja  	src05
src08:
       	movq	srts2(%rip),%rax
       	cmpq	%rax,srts1(%rip)
       	jb  	src04
       	jmp 	src06
src09:
       	pushq	%rsi
       	pushq	%rdi
       	call	lcomp
       	decq	_rc_(%rip)
       	js  	call_279
       	decq	_rc_(%rip)
       	jns 	l_0480
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0480:
       	decq	_rc_(%rip)
       	jns 	l_0481
       	movq	$299,_rc_(%rip)
       	jmp 	err_
l_0481:
       	decq	_rc_(%rip)
       	jns 	l_0482
       	jmp 	src03
l_0482:
       	decq	_rc_(%rip)
       	jns 	l_0483
       	jmp 	src08
l_0483:
       	decq	_rc_(%rip)
       	jns 	l_0484
       	jmp 	src05
l_0484:
call_279:
src10:
       	movq	r_sxl(%rip),%rsi
       	movq	r_sxr(%rip),%rdi
       	movq	(%rsi),%rdx
       	cmpq	(%rdi),%rdx
       	je  	src07
src11:
       	movq	%rdx,%rsi
       	movq	(%rdi),%rdi
       	movq	%rsi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rsi
       	movq	%rdi,%rax
       	decq	%rax
       	movb	(%rax),%al
       	movzbq	%al,%rdi
       	cmpq	%rdi,%rsi
       	ja  	src05
       	jmp 	src03
src12:
       	call	sortf
       	pushq	%rsi
       	movq	%rdi,%rsi
       	call	sortf
       	movq	%rsi,%rdi
       	popq	%rsi
       	jmp 	src01
sortf:
       	movq	r_0036(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	srtf3
       	pushq	%rdi
       	movq	srtfd(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	srtf4
       	cmpq	16(%rsi),%rdi
       	jne 	srtf4
       	movq	srtff(%rip),%rax
       	cmpq	%rax,srtdf(%rip)
       	jne 	srtf4
       	addq	srtfo(%rip),%rsi
srtf1:
       	movq	(%rsi),%rsi
srtf2:
       	popq	%rdi
srtf3:
       	ret
srtf4:
       	movq	%rsi,%rdi
       	movq	16(%rdi),%rdi
       	movq	%rdi,srtfd(%rip)
       	movq	8(%rdi),%rdx
       	salq	$3,%rdx
       	addq	16(%rdi),%rdi
srtf5:
       	subq	$8,%rdx
       	subq	$8,%rdi
       	movq	srtdf(%rip),%rax
       	cmpq	%rax,(%rdi)
       	je  	srtf6
       	orq 	%rdx,%rdx
       	jnz 	srtf5
       	jmp 	srtf2
srtf6:
       	movq	(%rdi),%rax
       	movq	%rax,srtff(%rip)
       	addq	$24,%rdx
       	movq	%rdx,srtfo(%rip)
       	addq	%rdx,%rsi
       	jmp 	srtf1
sorth:
       	popq	prc_017(%rip)
       	movq	%rcx,srtsn(%rip)
       	movq	%rdx,srtwc(%rip)
       	movq	(%rsp),%rsi
       	addq	srtso(%rip),%rsi
       	addq	%rdx,%rsi
       	movq	(%rsi),%rax
       	movq	%rax,srtrt(%rip)
       	addq	%rdx,%rdx
srh01:
       	cmpq	srtsn(%rip),%rdx
       	ja  	srh03
       	cmpq	srtsn(%rip),%rdx
       	je  	srh02
       	movq	(%rsp),%rdi
       	movq	8(%rsp),%rsi
       	addq	srtso(%rip),%rdi
       	addq	%rdx,%rdi
       	movq	8(%rdi),%rcx
       	movq	(%rdi),%rbx
       	call	sortc
       	decq	_rc_(%rip)
       	js  	call_280
       	decq	_rc_(%rip)
       	jns 	l_0485
       	jmp 	srh02
l_0485:
call_280:
       	addq	$8,%rdx
srh02:
       	movq	8(%rsp),%rsi
       	movq	(%rsp),%rdi
       	addq	srtso(%rip),%rdi
       	movq	%rdi,%rbx
       	addq	%rdx,%rdi
       	movq	(%rdi),%rcx
       	movq	%rbx,%rdi
       	movq	srtrt(%rip),%rbx
       	call	sortc
       	decq	_rc_(%rip)
       	js  	call_281
       	decq	_rc_(%rip)
       	jns 	l_0486
       	jmp 	srh03
l_0486:
call_281:
       	movq	(%rsp),%rdi
       	addq	srtso(%rip),%rdi
       	movq	%rdi,%rsi
       	movq	%rdx,%rcx
       	shrq	$3,%rdx
       	shrq	$1,%rdx
       	salq	$3,%rdx
       	addq	%rcx,%rsi
       	addq	%rdx,%rdi
       	movq	(%rsi),%rax
       	movq	%rax,(%rdi)
       	movq	%rcx,%rdx
       	addq	%rdx,%rdx
       	jc  	srh03
       	jmp 	srh01
srh03:
       	shrq	$3,%rdx
       	shrq	$1,%rdx
       	salq	$3,%rdx
       	movq	(%rsp),%rdi
       	addq	srtso(%rip),%rdi
       	addq	%rdx,%rdi
       	movq	srtrt(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	srtsn(%rip),%rcx
       	movq	srtwc(%rip),%rdx
       	movq	$0,_rc_(%rip)
       	movq	prc_017(%rip),%rax
       	jmp 	*%rax
trace:
       	popq	prc_018(%rip)
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_282
       	decq	_rc_(%rip)
       	jns 	l_0487
       	jmp 	trc15
l_0487:
call_282:
       	addq	$16,%rdi
       	xorq	%rcx,%rcx
       	movb	(%rdi),%cl
       	cmpq	r_0161(%rip),%rcx
       	jb  	l_0488
       	cmpq	r_0162(%rip),%rcx
       	ja  	l_0488
       	addq	r_0163(%rip),%rcx
l_0488:
       	movq	(%rsp),%rdi
       	movq	%rsi,(%rsp)
       	movq	$1,%rdx
       	cmpq	$97,%rcx
       	je  	trc10
       	movq	$2,%rdx
       	cmpq	$118,%rcx
       	je  	trc10
       	cmpq	$32,%rcx
       	je  	trc10
       	cmpq	$102,%rcx
       	je  	trc01
       	cmpq	$114,%rcx
       	je  	trc01
       	cmpq	$108,%rcx
       	je  	trc03
       	cmpq	$107,%rcx
       	je  	trc06
       	cmpq	$99,%rcx
       	jne 	trc15
trc01:
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_283
       	decq	_rc_(%rip)
       	jns 	l_0489
       	jmp 	trc16
l_0489:
call_283:
       	addq	$8,%rsp
       	movq	40(%rdi),%rdi
       	movq	r_0064(%rip),%rax
       	cmpq	%rax,(%rdi)
       	jne 	trc17
       	cmpq	$114,%rcx
       	je  	trc02
       	movq	%rsi,48(%rdi)
       	cmpq	$99,%rcx
       	je  	exnul
trc02:
       	movq	%rsi,56(%rdi)
       	movq	$0,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trc03:
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_284
       	decq	_rc_(%rip)
       	jns 	l_0490
       	jmp 	trc16
l_0490:
call_284:
       	movq	32(%rdi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	trc04
       	movq	16(%rsi),%rsi
trc04:
       	cmpq	r_0040(%rip),%rsi
       	je  	trc16
       	popq	%rbx
       	orq 	%rbx,%rbx
       	jz  	trc05
       	movq	%rbx,32(%rdi)
       	.data
r_0219:	.quad	b_vrt
       	.text
       	movq	r_0219(%rip),%rax
       	movq	%rax,24(%rdi)
       	movq	%rbx,%rdi
       	movq	%rsi,16(%rdi)
       	movq	$0,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trc05:
       	movq	%rsi,32(%rdi)
       	.data
r_0220:	.quad	b_vrg
       	.text
       	movq	r_0220(%rip),%rax
       	movq	%rax,24(%rdi)
       	movq	$0,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trc06:
       	call	gtnvr
       	decq	_rc_(%rip)
       	js  	call_285
       	decq	_rc_(%rip)
       	jns 	l_0491
       	jmp 	trc16
l_0491:
call_285:
       	xorq	%rax,%rax
       	cmpq	%rax,56(%rdi)
       	jnz 	trc16
       	addq	$8,%rsp
       	orq 	%rsi,%rsi
       	jz  	trc07
       	movq	%rdi,16(%rsi)
trc07:
       	movq	64(%rdi),%rdi
       	.data
r_0221:	.quad	v_ert
       	.text
       	cmpq	r_0221(%rip),%rdi
       	je  	trc08
       	.data
r_0222:	.quad	v_stc
       	.text
       	cmpq	r_0222(%rip),%rdi
       	je  	trc09
       	.data
r_0223:	.quad	v_fnc
       	.text
       	cmpq	r_0223(%rip),%rdi
       	jne 	trc17
       	movq	%rsi,r_fnc(%rip)
       	movq	$0,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trc08:
       	movq	%rsi,r_ert(%rip)
       	movq	$0,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trc09:
       	movq	%rsi,r_stc(%rip)
       	call	stgcc
       	movq	$0,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trc10:
       	call	gtvar
       	decq	_rc_(%rip)
       	js  	call_286
       	decq	_rc_(%rip)
       	jns 	l_0492
       	jmp 	trc16
l_0492:
call_286:
       	popq	%rbx
       	addq	%rsi,%rcx
       	movq	%rcx,%rdi
trc11:
       	movq	(%rdi),%rsi
       	movq	r_0039(%rip),%rax
       	cmpq	%rax,(%rsi)
       	jne 	trc13
       	cmpq	8(%rsi),%rdx
       	jb  	trc13
       	cmpq	8(%rsi),%rdx
       	je  	trc12
       	addq	$16,%rsi
       	movq	%rsi,%rdi
       	jmp 	trc11
trc12:
       	movq	16(%rsi),%rsi
       	movq	%rsi,(%rdi)
trc13:
       	orq 	%rbx,%rbx
       	jz  	trc14
       	movq	%rbx,(%rdi)
       	movq	%rbx,%rdi
       	movq	%rsi,16(%rdi)
       	movq	%rdx,8(%rdi)
trc14:
       	movq	%rcx,%rdi
       	subq	$16,%rdi
       	call	setvr
       	movq	$0,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trc15:
       	movq	$2,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trc16:
       	addq	$8,%rsp
trc17:
       	movq	$1,_rc_(%rip)
       	movq	prc_018(%rip),%rax
       	jmp 	*%rax
trbld:
       	pushq	%rdi
       	movq	$40,%rcx
       	call	alloc
       	movq	r_0039(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rsi,32(%rdi)
       	popq	24(%rdi)
       	movq	%rbx,8(%rdi)
       	movq	r_0012(%rip),%rax
       	movq	%rax,16(%rdi)
       	ret
trimr:
       	movq	%rdi,%rsi
       	movq	8(%rdi),%rcx
       	orq 	%rcx,%rcx
       	jz  	trim2
       	leaq	16(%rsi,%rcx),%rsi
       	orq 	%rbx,%rbx
       	jz  	trim3
       	movq	$32,%rdx
trim0:
       	xorq	%rbx,%rbx
       	decq	%rsi
       	movb	(%rsi),%bl
       	cmpq	$9,%rbx
       	je  	trim1
       	cmpq	%rdx,%rbx
       	jne 	trim3
trim1:
       	decq	%rcx
       	orq 	%rcx,%rcx
       	jnz 	trim0
trim2:
       	movq	%rdi,dnamp(%rip)
       	movq	r_0012(%rip),%rdi
       	jmp 	trim5
trim3:
       	movq	%rcx,8(%rdi)
       	movq	%rdi,%rsi
       	leaq	16(%rsi,%rcx),%rsi
       	addq	$23,%rcx
       	andq	$-8,%rcx
       	addq	%rdi,%rcx
       	movq	%rcx,dnamp(%rip)
       	movq	$8,%rcx
       	xorq	%rdx,%rdx
trim4:
       	movb	%dl,(%rsi)
       	incq	%rsi
       	decq	%rcx
       	jnz 	trim4
trim5:
       	xorq	%rsi,%rsi
       	ret
trxeq:
       	movq	r_cod(%rip),%rdx
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rbx
       	subq	%rdx,%rbx
       	pushq	kvtra(%rip)
       	pushq	%rdi
       	pushq	%rsi
       	pushq	%rcx
       	pushq	%rdx
       	pushq	%rbx
       	pushq	flptr(%rip)
       	xorq	%rax,%rax
       	pushq	%rax
       	movq	%rsp,flptr(%rip)
       	xorq	%rax,%rax
       	movq	%rax,kvtra(%rip)
       	.data
r_0224:	.quad	trxdc
       	.text
       	movq	r_0224(%rip),%rdx
       	movq	%rdx,r_cod(%rip)
       	movq	%rdx,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	%rcx,%rbx
       	movq	$24,%rcx
       	call	alloc
       	movq	r_0033(%rip),%rax
       	movq	%rax,(%rdi)
       	movq	%rsi,8(%rdi)
       	movq	%rbx,16(%rdi)
       	movq	48(%rsp),%rsi
       	pushq	%rdi
       	pushq	24(%rsi)
       	movq	32(%rsi),%rsi
       	movq	40(%rsi),%rsi
       	cmpq	r_0106(%rip),%rsi
       	je  	trxq2
       	movq	$2,%rcx
       	jmp 	cfunc
trxq1:
       	movq	flptr(%rip),%rsp
       	addq	$8,%rsp
       	popq	flptr(%rip)
       	popq	%rbx
       	popq	%rdx
       	movq	%rdx,%rdi
       	movq	8(%rdi),%rax
       	movq	%rax,kvstn(%rip)
       	popq	%rcx
       	popq	%rsi
       	popq	%rdi
       	popq	kvtra(%rip)
       	addq	%rdx,%rbx
       	movq	%rbx,%rax
       	movq	%rax,reg_cp(%rip)
       	movq	%rdx,r_cod(%rip)
       	ret
trxq2:
       	movq	$197,_rc_(%rip)
       	jmp 	err_
xscan:
       	movq	%rbx,xscwb(%rip)
       	pushq	%rcx
       	pushq	%rcx
       	movq	r_xsc(%rip),%rdi
       	movq	8(%rdi),%rcx
       	movq	xsofs(%rip),%rbx
       	subq	%rbx,%rcx
       	orq 	%rcx,%rcx
       	jz  	xscn3
       	leaq	16(%rdi,%rbx),%rdi
xscn1:
       	xorq	%rbx,%rbx
       	movb	(%rdi),%bl
       	incq	%rdi
       	cmpq	%rdx,%rbx
       	je  	xscn4
       	cmpq	%rsi,%rbx
       	je  	xscn5
       	xorq	%rax,%rax
       	cmpq	%rax,(%rsp)
       	jz  	xscn2
       	incq	xsofs(%rip)
       	cmpq	$9,%rbx
       	je  	xscn2
       	cmpq	$32,%rbx
       	je  	xscn2
       	decq	xsofs(%rip)
       	xorq	%rax,%rax
       	movq	%rax,(%rsp)
xscn2:
       	decq	%rcx
       	orq 	%rcx,%rcx
       	jnz 	xscn1
xscn3:
       	movq	r_xsc(%rip),%rsi
       	movq	8(%rsi),%rcx
       	movq	xsofs(%rip),%rbx
       	subq	%rbx,%rcx
       	xorq	%rax,%rax
       	movq	%rax,r_xsc(%rip)
       	xorq	%rax,%rax
       	movq	%rax,xscrt(%rip)
       	jmp 	xscn7
xscn4:
       	movq	$1,xscrt(%rip)
       	jmp 	xscn6
xscn5:
       	movq	$2,xscrt(%rip)
xscn6:
       	movq	r_xsc(%rip),%rsi
       	movq	8(%rsi),%rdx
       	subq	%rcx,%rdx
       	movq	%rdx,%rcx
       	movq	xsofs(%rip),%rbx
       	subq	%rbx,%rcx
       	incq	%rdx
       	movq	%rdx,xsofs(%rip)
xscn7:
       	xorq	%rdi,%rdi
       	call	sbstr
       	addq	$8,%rsp
       	popq	%rbx
       	xorq	%rax,%rax
       	cmpq	%rax,8(%rdi)
       	jz  	xscn8
       	call	trimr
xscn8:
       	movq	xscrt(%rip),%rcx
       	movq	xscwb(%rip),%rbx
       	ret
xscni:
       	popq	prc_019(%rip)
       	call	gtstg
       	decq	_rc_(%rip)
       	js  	call_287
       	decq	_rc_(%rip)
       	jns 	l_0493
       	jmp 	xsci1
l_0493:
call_287:
       	movq	%rdi,r_xsc(%rip)
       	xorq	%rax,%rax
       	movq	%rax,xsofs(%rip)
       	orq 	%rcx,%rcx
       	jz  	xsci2
       	movq	$0,_rc_(%rip)
       	movq	prc_019(%rip),%rax
       	jmp 	*%rax
xsci1:
       	movq	$1,_rc_(%rip)
       	movq	prc_019(%rip),%rax
       	jmp 	*%rax
xsci2:
       	movq	$2,_rc_(%rip)
       	movq	prc_019(%rip),%rax
       	jmp 	*%rax
#  prc.count 19
       	.data
prc_001:	.quad	0
prc_002:	.quad	0
prc_003:	.quad	0
prc_004:	.quad	0
prc_005:	.quad	0
prc_006:	.quad	0
prc_007:	.quad	0
prc_008:	.quad	0
prc_009:	.quad	0
prc_010:	.quad	0
prc_011:	.quad	0
prc_012:	.quad	0
prc_013:	.quad	0
prc_014:	.quad	0
prc_015:	.quad	0
prc_016:	.quad	0
prc_017:	.quad	0
prc_018:	.quad	0
prc_019:	.quad	0
       	.text
       	.global	sec06
sec06: 	nop
       	addq	$4,errft(%rip)
       	movq	flptr(%rip),%rsp
       	xorq	%rax,%rax
       	cmpq	%rax,gbcfl(%rip)
       	jnz 	stak1
       	movq	$246,_rc_(%rip)
       	jmp 	err_
stak1:
       	.data
r_0225:	.quad	endso
       	.text
       	movq	r_0225(%rip),%rdi
       	xorq	%rax,%rax
       	movq	%rax,kvdmp(%rip)
       	jmp 	stopr
       	.global	sec07
sec07:
err_:  	xchgq	_rc_(%rip),%rcx
error:
       	movq	r_0154(%rip),%rax
       	cmpq	%rax,r_cim(%rip)
       	je  	cmple
       	movq	%rcx,kvert(%rip)
       	xorq	%rax,%rax
       	movq	%rax,scnrs(%rip)
       	xorq	%rax,%rax
       	movq	%rax,scngo(%rip)
       	movq	$1,polcs(%rip)
       	movq	$1,polct(%rip)
       	movq	stage(%rip),%rdi
       	.data
r_0226:	.quad	l_0494
       	.text
       	movq	r_0226(%rip),%rax
       	salq	$3,%rdi
       	addq	%rdi,%rax
       	jmp 	*(%rax)
       	.data
l_0494:
       	.quad	err01
       	.quad	err04
       	.quad	err04
       	.quad	err05
       	.quad	err01
       	.quad	err04
       	.quad	err04
       	.text
err01:
       	movq	cmpxs(%rip),%rsp
       	xorq	%rax,%rax
       	cmpq	%rax,errsp(%rip)
       	jnz 	err03
       	movq	cmpsn(%rip),%rdx
       	call	filnm
       	movq	scnse(%rip),%rbx
       	movq	rdcln(%rip),%rdx
       	movq	stage(%rip),%rdi
       	call	sysea
       	decq	_rc_(%rip)
       	js  	call_288
       	decq	_rc_(%rip)
       	jns 	l_0495
       	jmp 	erra3
l_0495:
call_288:
       	pushq	%rdi
       	movq	erich(%rip),%rax
       	movq	%rax,erlst(%rip)
       	call	listr
       	call	prtis
       	xorq	%rax,%rax
       	movq	%rax,erlst(%rip)
       	movq	scnse(%rip),%rcx
       	orq 	%rcx,%rcx
       	jz  	err02
       	movq	%rcx,%rbx
       	incq	%rcx
       	movq	r_cim(%rip),%rsi
       	call	alocs
       	movq	%rdi,%rcx
       	addq	$16,%rdi
       	addq	$16,%rsi
erra1:
       	xorq	%rdx,%rdx
       	movb	(%rsi),%dl
       	incq	%rsi
       	cmpq	$9,%rdx
       	je  	erra2
       	movq	$32,%rdx
erra2:
       	movb	%dl,(%rdi)
       	incq	%rdi
       	decq	%rbx
       	jnz 	erra1
       	movq	$33,%rsi
       	movq	%rsi,%rax
       	movb	%al,(%rdi)
       	movq	$8,profs(%rip)
       	movq	%rcx,%rdi
       	call	prtst
err02:
       	call	prtis
       	popq	%rdi
       	orq 	%rdi,%rdi
       	jz  	erra0
       	call	prtst
erra0:
       	call	ermsg
       	addq	$3,lstlc(%rip)
erra3:
       	xorq	%rdi,%rdi
       	cmpq	$3,errft(%rip)
       	ja  	stopr
       	incq	cmerc(%rip)
       	movq	cswer(%rip),%rax
       	addq	%rax,noxeq(%rip)
       	cmpq	$0,stage(%rip)
       	jne 	cmp10
err03:
       	movq	r_cim(%rip),%rdi
       	addq	$16,%rdi
       	xorq	%rax,%rax
       	movb	(%rdi),%al
       	movq	%rax,%rdi
       	cmpq	$45,%rdi
       	je  	cmpce
       	xorq	%rax,%rax
       	movq	%rax,scnrs(%rip)
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,errsp(%rip)
       	call	scane
       	cmpq	$33,%rsi
       	jne 	err03
       	xorq	%rax,%rax
       	movq	%rax,errsp(%rip)
       	movq	$40,cwcof(%rip)
       	movq	r_0153(%rip),%rcx
       	call	cdwrd
       	movq	cwcof(%rip),%rax
       	movq	%rax,64(%rsp)
       	xorq	%rax,%rax
       	incq	%rax
       	movq	%rax,48(%rsp)
       	call	cdwrd
       	jmp 	cmpse
err04:
       	cmpq	$3,errft(%rip)
       	jae 	labo1
       	cmpq	$320,kvert(%rip)
       	je  	err06
       	xorq	%rax,%rax
       	movq	%rax,r_ccb(%rip)
       	movq	$32,cwcof(%rip)
       	call	ertex
       	subq	$8,%rsp
erra4:
       	addq	$8,%rsp
       	cmpq	flprt(%rip),%rsp
       	je  	errc4
       	cmpq	gtcef(%rip),%rsp
       	jne 	erra4
       	movq	$3,stage(%rip)
       	movq	r_gtc(%rip),%rax
       	movq	%rax,r_cod(%rip)
       	movq	%rsp,flptr(%rip)
       	xorq	%rax,%rax
       	movq	%rax,r_cim(%rip)
       	xorq	%rax,%rax
       	movq	%rax,cnind(%rip)
errb4:
       	xorq	%rax,%rax
       	cmpq	%rax,kverl(%rip)
       	jnz 	err07
       	jmp 	exfal
errc4:
       	movq	flptr(%rip),%rsp
       	jmp 	errb4
err05:
       	xorq	%rax,%rax
       	cmpq	%rax,dmvch(%rip)
       	jnz 	err08
err06:
       	xorq	%rax,%rax
       	cmpq	%rax,kverl(%rip)
       	jz  	labo1
       	call	ertex
err07:
       	cmpq	$3,errft(%rip)
       	jae 	labo1
       	decq	kverl(%rip)
       	movq	r_ert(%rip),%rsi
       	call	ktrex
       	movq	r_cod(%rip),%rcx
       	movq	%rcx,r_cnt(%rip)
       	movq	reg_cp(%rip),%rax
       	movq	%rax,%rbx
       	subq	%rcx,%rbx
       	movq	%rbx,stxoc(%rip)
       	movq	flptr(%rip),%rdi
       	movq	(%rdi),%rax
       	movq	%rax,stxof(%rip)
       	movq	r_sxc(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	lcnt1
       	xorq	%rax,%rax
       	movq	%rax,r_sxc(%rip)
       	movq	r_0012(%rip),%rax
       	movq	%rax,stxvr(%rip)
       	movq	(%rdi),%rsi
       	jmp 	*%rsi
err08:
       	movq	dmvch(%rip),%rdi
       	orq 	%rdi,%rdi
       	jz  	err06
       	movq	(%rdi),%rax
       	movq	%rax,dmvch(%rip)
       	call	setvr
s_yyy:
       	jmp 	err08
