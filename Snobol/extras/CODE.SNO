-PLUSOPS 1
*	Program to allow entering test SNOBOL4 statements.
*	Labels S and F are provided as convenient branch points.
*	Function SLOAD is also included, to allow dynamically loading
*	other SNOBOL4 functions.
*
*	Uses Units 14, 15, and 16 for KEYBOARD, BINOUT, and SLOAD.
*
*	User dialog is independent of INPUT and OUTPUT variables.  They
*	are defaulted to CON:, but may be redirected from the DOS command
*	line:
*		A>SNOBOL4 CODE <INFILE >OUTFILE
*
*
*	To avoid having to type the full line:
*
*		SCREEN = <some expression>
*
*	CODE. SNO provides the shorthand notation:
*
*	=expression
*
*	which internally expands to SCREEN = EVAL(expression)
*
*	Added !command to execute DOS command
*
*	(c) Copyright 1985, 1987 - Catspaw, Incorporated

	&TRIM = 1
	SCREEN = 'Enter SNOBOL4 statements:'
	OUTPUT('BINOUT', 15, 'B', 'CON:')
	INPUT('KEYBOARD', 14, 255, 'CON:')

	DEFINE('SLOAD(FILENAME)LIB,CODE,PATH,X,MAX_SAV,TRIM_SAV,POSITION')
	WHITE_SPACE_	=	CHAR(9) ' '
	SF_PAT_		=	FENCE ANY('SsFf') (ANY(WHITE_SPACE_) | RPOS(0))
	Q_	    =	"'"
	QQ_	    =	'"'
	SLOAD_STMT  =	ARBNO(Q_ BREAK(Q_) Q_ | QQ_ BREAK(QQ_) QQ_ |
+			  NOTANY(Q_ QQ_) BREAK(Q_ QQ_ ';')) ';'
	SLOAD_STMTS =	FENCE (';' ARBNO(SLOAD_STMT)) . X '*' REM
	SLOAD_CCPAT =	FENCE ('*' | '-' | RPOS(0))
	SLOAD_CNPAT =	FENCE (';.' | ';+')
	SLOAD_INPAT =	FENCE '-' ANY('Ii') ('nclude' | 'NCLUDE')
+			  BREAK(QQ_ Q_) LEN(1) BREAK(QQ_ Q_) . X
	SLOAD_TAB    =	TABLE()
	SLOAD_PREFIX =	FENCE BREAK(";") . PATH ";"

*	Trap and report conditionally fatal execution errors in user's code
	&TRACE = 1000
	&ERRLIMIT = 1000
	DEFINE('ERRFUN_()')
	DEFINE('BRKFUN_()')
	TRACE('ERRTYPE','KEYWORD',,'ERRFUN_')

NEWLIN_ BINOUT = '?'
	INPT_  = KEYBOARD				:F(END)
	SETBREAK('BRKFUN_')
	INPT_ FENCE '='  REM . CODE			:S(EVAL_)
	INPT_ FENCE '!'  REM . CODE			:S(EXEC_)
	INPT_ SF_PAT_					:S(SF_ERR_)
	CODE   = CODE(INPT_ ' :S(S) F(F)')	:S<CODE>
	SCREEN = 'Compilation error: ' &ERRTEXT ', reenter:' :(NEWLIN_)

S	SCREEN = 'Success'			:(NEWLIN_)
F	SCREEN = 'Failure'			:(NEWLIN_)
EVAL_	SCREEN = EVAL(CODE)			:S(S)F(F)
EXEC_	EXECUTE(CODE)				:(NEWLIN_)

ERRFUN_	SCREEN = 'Execution error #' &ERRTYPE ', ' &ERRTEXT	:(RETURN)

SF_ERR_	SCREEN = "Cannot use 'S' or 'F' as a label with CODE.SNO" :(NEWLIN_)

BRKFUN_	SCREEN = 'Interrupted in statement ' &LASTNO
+		 ', at level ' &FNCLEVEL - 1	:(NEWLIN_)

*	Function to read and compile SNOBOL4 functions from a disk file.
*	The filename is specified as the argument to function SLOAD.  It is
*	included here for handy access when running this program.  See
*	file SLOAD.SNO for a more complete description.
*
*	This version is supplemented by the ability to process INCLUDE
*	control cards. It avoids redundant includes.
*
SLOAD	FILENAME  = TRIM(REPLACE(FILENAME,&LCASE,&UCASE))
	SLOAD_TAB<FILENAME> = 1
	INPUT(.LIB, 16, 120, FILENAME)				:S(SLOAD_0)
	X = ENVIRONMENT("SNOLIB") ";"				:F(FRETURN)
SLOAD_A	X SLOAD_PREFIX =					:F(FRETURN)
	INPUT(.LIB, 16, 120, PATH "\" FILENAME)			:F(SLOAD_A)
SLOAD_0	MAX_SAV   =	&MAXLNGTH
	TRIM_SAV  =	&TRIM
	&MAXLNGTH =	32767
	&TRIM     =	1

SLOAD_1	X	  =	LIB					:F(SLOAD_2)
	X SLOAD_CCPAT						:S(SLOAD_4)
	X	  =	';' X
	X SLOAD_CNPAT =	' '
	X SLOAD_STMTS
	CODE	  =	CODE X					:(SLOAD_1)

SLOAD_4	X SLOAD_INPAT						:F(SLOAD_1)
	X = REPLACE(X,&LCASE,&UCASE)
	DIFFER(SLOAD_TAB<X>)					:S(SLOAD_1)

	POSITION = TELL(16)
	ENDFILE(16)

	SLOAD(X)						:F(FRETURN)

	INPUT(.LIB, 16, 120, FILENAME)				:S(SLOAD_5)
	X = ENVIRONMENT("SNOLIB") ";"				:F(FRETURN)
SLOAD_B	X SLOAD_PREFIX =					:F(FRETURN)
	INPUT(.LIB, 16, 120, PATH "\" FILENAME)			:F(SLOAD_B)
SLOAD_5	SLOAD_TAB<TRIM(X)> = 1
	SEEK(16,POSITION,0)				:S(SLOAD_1)F(FRETURN)

SLOAD_2	ENDFILE(16)
	CODE	=	CODE(CODE '; :(SLOAD_3)')		:S<CODE>
	SCREEN	=	'Compilation error, file: ' FILENAME
* Error. Take CODE apart statement by statement to find the problem.
* First remove from include file table, then remove initial ';'
	SLOAD_TAB<TRIM(X)> =
	CODE	=	SUBSTR(CODE,2)
SLOAD_6	CODE FENCE SLOAD_STMT . X =				:F(SLOAD_7)
	CODE(X)							:S(SLOAD_6)
	X RTAB(1) . SCREEN
SLOAD_7	&MAXLNGTH =	MAX_SAV
	&TRIM	=	TRIM_SAV
	SCREEN	=	&ERRTEXT				:(FRETURN)

SLOAD_3	&MAXLNGTH =	MAX_SAV
	&TRIM	=	TRIM_SAV				:(RETURN)
END
