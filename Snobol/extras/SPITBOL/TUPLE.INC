* TUPLE.inc - TUPLE(OP,ARG1,ARG2,ARG3) will expand a 4-tuple (as
*	      produced by TR.inc into reasonable optimized
*	      machine code.
*
* CAUTION - The original program defined a function LOAD, which is
*	    here changed to LOAD. to avoid conflict with the
*	    built-in function with the same name.
*
	DEFINE('TUPLE(OP,ARG1,ARG2,ARG3)R')	:(TUPLE_END)
TUPLE						:($('TU_' OP))

TU_ADD	;TU_FADD ;TU_SUB ;TU_FSUB
TU_MUL	;TU_FMUL ;TU_DIV ;TU_FDIV
	R  =  LOAD.(ARG1)
	OUTPUT  =  ' ' OP ' ' R ','  ADDR(ARG2)
	DEASSOC(R)
	STORE(R,ARG3)				:(RETURN)

TU_ASGN	R  =  LOAD.(ARG1)
	STORE(R,ARG3)				:(RETURN)

TU_MNS	R  =  REG()
	OUTPUT  =  ' LOADN '  R  ','  ADDR(ARG1)
	STORE(R,ARG3)				:(RETURN)

TU_BR	ARG3  =  INDEX(ARG3)
	OUTPUT  =  ' BR '  ARG3			:(RETURN)

TU_BRGT	;TU_BRGE ;TU_BRLT ;TU_BRLE ;TU_BREQ ;TU_BRNE
	R  =  LOAD.(ARG1)
	OUTPUT  =  ' SUB ' R ',' ADDR(ARG2)
	FREE(R)
	OUTPUT  =  ' ' OP ' ' R ',' ARG3	:(RETURN)

TU_LBL	OUTPUT  =  ARG1
	REG_LIST  =  ','			:(RETURN)
TUPLE_END
	DEFINE('LOAD.(LOC)')			:(LOAD_END)
LOAD.	LOAD.  =  ISREG(LOC)			:S(RETURN)
	LOC  =  ADDR(LOC)
	LOAD.  =  REG()
	ASSOC(LOC,LOAD.)
	OUTPUT  =  ' LOAD ' LOAD. ',' LOC	:(RETURN)
LOAD_END
	DEFINE('STORE(REG,LOC)')		:(STORE_END)
STORE	LOC  =  INDEX(LOC)
	FREE(REG)
	ASSOC(LOC,REG)
	LOC   TEMP_LOC				:S(RETURN)
	OUTPUT  =  ' STORE ' REG ',' LOC	:(RETURN)
STORE_END
	DEFINE('ADDR(LOC)')			:(ADDR_END)
ADDR	ADDR  =  LOC
	ADDR  =  INDEX(ADDR)
	ADDR  =  ISREG(ADDR)			:S(RETURN)
	ADDR   POS(0) SPAN('0123456789') RPOS(0) =
+	'='  ADDR				:(RETURN)
ADDR_END
	DEFINE('INDEX(LOC)S')			:(INDEX_END)
INDEX	INDEX  =  LOC
	INDEX  '('  BREAK(')') . S  =  '('  LOAD.(S)  :(RETURN)
INDEX_END
	DEFINE('REG()LOC')
	DEFINE('FREE(REG)')
	DEFINE('ISREG(LOC)')
	DEFINE('ASSOC(LOC,REG)')
	DEFINE('DEASSOC(REG)')

	NO_REGS = 16
	REG_LIST  =  ','
	TEMP_LOC  =  POS(0) 'TEMP' SPAN('0123456789') RPOS(0)
						:(REG_END)
REG	REG  =  LT(REG,NO_REGS)  REG + 1	:F(REG_1)
	REG_LIST   '(' REG ')'			:F(RETURN)S(REG)
REG_1	REG_LIST  ',' BREAK('(') . LOC  '('
+	BREAK(')') . REG ')'  =  ','
	LOC   TEMP_LOC				:F(RETURN)
	OUTPUT  =  ' STORE ' REG ','  LOC	:(RETURN)
FREE	REG_LIST  ',' BREAK('(') '(' REG ')'  =	:(RETURN)
ISREG	REG_LIST  ','  LOC '(' BREAK(')') . ISREG ')' =
+						:F(FRETURN)
	REG_LIST  =  REG_LIST  LOC '(' ISREG '),'  :(RETURN)
ASSOC	LOC  '('				:S(RETURN)
	REG_LIST = REG_LIST  LOC '(' REG '),'	:(RETURN)
DEASSOC	REG_LIST  ','  BREAK('(') '(' REG ')'  =
+	',(' REG ')'				:(RETURN)
REG_END
