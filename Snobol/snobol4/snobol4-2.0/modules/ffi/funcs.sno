* $Id: funcs.sno,v 1.13 2014/12/24 03:27:55 phil Exp $
**=pea
**=item B<DEFINE_FFI(>I<prototype>,I<pointer>B<)>
**defines a SNOBOL4 function that calls an external function via B<ffi>(3).
**I<prototype> contains a string name for the function followed
**by a comma separated list of parameter types inside of parenthesis
**(any of:
**B<sint8>, B<sint16>, B<sint32>, B<sint64>,
**B<uint8>, B<uint16>, B<uint32>, B<uint64>,
**B<schar>, B<sshort>, B<sint>, B<slong>,
**B<uchar>, B<ushort>, B<uint>, B<ulong>,
**B<float>, B<double>, B<longdouble>, B<pointer>),
**followed by a return type, which can be
**any of the above parameter types, or
**B<void>, B<string>, B<freestring>.
**I<pointer> is a value returned by B<FFI_DLSYM()>.
**=cut
-include 'unique.sno'
	DEFINE("DEFINE_FFI(proto,ptr)func,args,tmp,i,cifvar,ptrvar,,dummies")
						     :(define_ffi.end)
define_ffi
	proto pos(0) break('(') . fname (bal . args rem) . proto
+						:f(FRETURN)
*	output = fname
*	output = proto
*	output = args
	i = 0
	tmp = args ','
define_ffi.loop
	tmp pos(0) break(',') ',' =		:f(define_ffi.eloop)
	dummies = dummies ',a' (i = i + 1)	:(define_ffi.loop)
define_ffi.eloop
	cifvar = UNIQUE()
	ptrvar = UNIQUE()
	$cifvar = FFI_PREP_CIF(proto)		:f(FRETURN)
	$ptrvar = ptr
	tmp = fname ' ' fname ' = FFI_CALL(' cifvar ',' ptrvar dummies ') '
+						':f(FRETURN)s(RETURN)'
*	output = tmp
	CODE(tmp)				:f(FRETURN)
	dummies pos(0) ',' =
	tmp = fname '(' dummies ')'
*	output = tmp
	DEFINE(tmp)				 :f(FRETURN)s(RETURN)
define_ffi.end

**=pea
**=sect SEE ALSO
**B<snobol4>(1), B<ffi>(3), B<dlopen>(3)
**=sect AUTHOR
**Philip L. Budne
**=cut
