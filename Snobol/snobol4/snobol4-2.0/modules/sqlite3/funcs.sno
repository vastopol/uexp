****************************************************************
*	$Id: funcs.sno,v 1.3 2014/12/24 01:28:03 phil Exp $
*	functions for SQLITE3 Interface
*	11/2/2013

****************************************************************
*	Fetch a row, and return as an ARRAY
*
**=pea
**=item B<SQLITE3_ROW_ARRAY(>I<st_handle>B<)>
**Returns an B<ARRAY> with a row of statement results or fails.
**=cut
	DEFINE("SQLITE3_ROW_ARRAY(STMT)S,CC,COL") :(SQLITE3_ROW_ARRAY.END)
SQLITE3_ROW_ARRAY
	DIFFER(SQLITE3_STEP(STMT), "row")	:S(FRETURN)
	CC = SQLITE3_COLUMN_COUNT(STMT)		:F(FRETURN)
	SQLITE3_ROW_ARRAY = ARRAY('0:' CC - 1)
	COL = 0
SQLITE3_ROW_ARRAY.LOOP
+	GE(COL,CC)				:S(RETURN)
	SQLITE3_ROW_ARRAY[COL] = SQLITE3_COLUMN_VALUE(STMT, COL) :F(FRETURN)
	COL = COL + 1				:(SQLITE3_ROW_ARRAY.LOOP)
SQLITE3_ROW_ARRAY.END

****************************************************************
*	Return an ARRAY of COLUMN names
*
**=pea
**=item B<SQLITE3_COLUMN_NAMES_ARRAY(>I<st_handle>B<)>
**Returns an B<ARRAY> with SQL statement result column names or fails.
**=cut
	DEFINE("SQLITE3_COLUMN_NAMES_ARRAY(STMT)CC,COL")
+					:(SQLITE3_COLUMN_NAMES_ARRAY.END)
SQLITE3_COLUMN_NAMES_ARRAY
+	CC = SQLITE3_COLUMN_COUNT(STMT)	:F(FRETURN)
	EQ(CC, 0)			:S(FRETURN)
	SQLITE3_COLUMN_NAMES_ARRAY = ARRAY('0:' CC - 1)
	COL = 0
SQLITE3_COLUMN_NAMES_ARRAY.LOOP
+	GE(COL,CC)			:S(RETURN)
	SQLITE3_COLUMN_NAMES_ARRAY[COL] = 
+		SQLITE3_COLUMN_NAME(STMT, COL) :F(FRETURN)
	COL = COL + 1			:(SQLITE3_COLUMN_NAMES_ARRAY.LOOP)
	:(RETURN)
SQLITE3_COLUMN_NAMES_ARRAY.END

****************************************************************
*	Fetch a row, and return as a TABLE
*
**=pea
**=item B<SQLITE3_ROW_TABLE(>I<st_handle>B<)>
**Returns a B<TABLE> with statement results indexed by column name or fails.
**=cut
	DEFINE("SQLITE3_ROW_TABLE(STMT)CC,COL,NAME")
						:(SQLITE3_ROW_TABLE.END)
SQLITE3_ROW_TABLE
+	DIFFER(SQLITE3_STEP(STMT),"row")	:S(FRETURN)
	CC = SQLITE3_COLUMN_COUNT(STMT)		:F(FRETURN)
	SQLITE3_ROW_TABLE = TABLE()
	COL = 0
SQLITE3_ROW_TABLE.LOOP
+	NAME = SQLITE3_COLUMN_NAME(STMT, COL)	:F(FRETURN)
	SQLITE3_ROW_TABLE[NAME] = SQLITE3_COLUMN_VALUE(STMT, COL) :F(FRETURN)
	COL = COL + 1
	LT(COL, CC)				:S(SQLITE3_ROW_TABLE.LOOP)
	:(RETURN)
SQLITE3_ROW_TABLE.END

****************************************************************
* UNTESTED:
*	Bind prepared statement parameters by name from TABLE TBL
*
*	Alternatively, could try converting TBL to an ARRAY and loop
*	Calling SQLITE3_BIND_PARAMETER_NAME() to convert TABLE
*	keys to integer indices.
*
	DEFINE("SQLITE3_BIND_TABLE(STMT,TBL)PC,I")
						:(SQLITE3_BIND_TABLE.END)
SQLITE3_BIND_TABLE
+	PC = SQLITE3_BIND_PARAMETER_COUNT(STMT)	:F(FRETURN)
	I = 0
SQLITE3_BIND_TABLE.LOOP
+	EQ(I,PC)				:S(RETURN)
	SQLITE3_BIND(STMT, I, TBL[SQLITE3_BIND_PARAMETER_NAME(STMT,I)])
+						:F(FRETURN)
	I = I + 1				:(SQLITE3_BIND_TABLE.LOOP)
SQLITE3_BIND_TABLE.END

****************
**=pea
**=sect SEE ALSO
**B<snobol4>(1)
**=break
**=link http://www.sqlite.org
**=break
**=link http://www.sqlite.org/c3ref/funclist.html
**=cut
