*	$Id: gendata.sno,v 1.20 2013/10/23 02:49:46 phil Exp $
*
*	Translator for the "Macro Implementation of SNOBOL" (aka MAINBOL)
*	written in SIL (SNOBOL IMPLEMENTATION LANGUAGE) to `C'
*
*	Phil Budne	November 1993

*	gendata.sno -- create data segment files

*	XXX should be integrated into genc.sno!

****************************************************************
*	environment

*	kill case folding, for speed
-CASE 0

*	check if MAINBOL or SPITBOL
	MAINBOL = IDENT(.NAME,"NAME") 1

*	faster matching
	&ANCHOR = 1

*	process options!
	WITH = TABLE()
	IND = HOST(3)
OPTLOOP	ARG = HOST(2,IND)				:F(NOFILE)
	ARG POS(0) '-'					:F(GETFILE)
	IND = IND + 1

	IDENT(ARG,'--with')		       		:S(WITH)
	DIFFER(ARG,'-w')				:S(UNKOPT)
WITH	ARG = HOST(2,IND)				:F(NOWITHARG)
	IND = IND + 1
	WITH[ARG] = 1					:(OPTLOOP)

UNKOPT	TERMINAL = 'gendata.sno: unknown option ' ARG
EXIT1	&CODE = 1					:(END)

OPTEND	SILPATH = ARG

*	get input filename
GETFILE	SILPATH = ARG

****************************************************************
*	I/O

*	different I/O routines for now under MAINBOL!
	DIFFER(MAINBOL)					:S(MB1)

**************** SPITBOL I/O

	INPUT(.INPUT,5,SILPATH)				:F(BADFILE)
	OUTPUT(.DATA.H,10,"data.h2")
	OUTPUT(.DATA.C,11,"data.c2")
	OUTPUT(.DATA_INIT.H,12,"data_init.h2")
	OUTPUT(.EQU.H,13,"equ.h2")
	OUTPUT(.RES.H,14,"res.h2")
							:(EIO)

**************** MAINBOL I/O

MB1
	INPUT(.INPUT,5,,SILPATH)			:F(BADFILE)
	OUTPUT(.DATA.H,10,,"data.h2")
	OUTPUT(.DATA.C,11,,"data.c2")
	OUTPUT(.DATA_INIT.H,12,,"data_init.h2")
	OUTPUT(.EQU.H,13,,"equ.h2")
	OUTPUT(.RES.H,14,,"res.h2")			:(EIO)

**************** I/O ERRORS

ERROR	TERMINAL = "ERROR: " &LASTFILE ':' &LASTLINE
	TERMINAL = SAVELINE				:(FATAL)
NOFILE	TERMINAL = "NO FILENAME ON COMMAND LINE"	:(FATAL)
BADFILE	TERMINAL = "CANNOT OPEN FILE " SILPATH
FATAL	&CODE = 1					:(END)

EIO

****************************************************************
*	constants

	SP = ' '
	TAB = '	'
	WHITE = SP TAB
	NUL = ''
	COMMA = ','

	LP = '('
	RP = ')'

	Q = "'"

	FMT = '/* FORMAT */'

*	name of resident data array
	RES = 'res'

*	access to a res variable
	RESV = RES '.'

*	int data type cast
	INT_T = '(int_t) ' 

*	for initializer code
	IND = '    '
	EQ = ' = '

*	patterns
	OPR = '+-*/'
	OPR_PAT = BREAK(OPR) SPAN(OPR)

	TOK = BREAK(WHITE)
	TNUL = TOK | NUL
	WS = SPAN(WHITE)
	STR = Q BREAK(Q) Q

	BCOMMA = BREAK(COMMA)
	DESCRARGS = BCOMMA . A COMMA BCOMMA . F COMMA (BREAK(WHITE) | REM) . V
	SPECARGS = BCOMMA . A COMMA BCOMMA . F COMMA BCOMMA . V COMMA 
+		BCOMMA . O COMMA (BREAK(WHITE) | REM) . L

	LINE_PAT = (TNUL . LBL) WS (TNUL . OP) WS 
	QS_ARG_PAT = STR . ARGS
	TOK_ARG_PAT = TOK . ARGS

	ID = ANY(&UCASE) SPAN(&UCASE &DIGITS)

****************************************************************
*	functions

	DEFINE("MK_LBL(NAME,TYPE,INCR)")		:(E_MK_LBL)
MK_LBL	IDENT(NAME)					:S(MK_LBL2)

* if we have a previous label, output it now that we have it's full size
MK_LBL0	IDENT(PREV)					:S(MK_LBL1)
	RES.H = IND 'struct ' PREVTYPE ' ' LCPREV '[' SIZE '];'
*	force pointers to CPA unit size
	RES.H = '# define ' PREV TAB '((ptr_t)' RESV LCPREV ')'
	PREV =

MK_LBL1	RES.H = DIFFER(HERE) '# define ' HERE TAB NAME
	HERE =

	PREV = NAME
	PREVTYPE = TYPE
	LCPREV = REPLACE(PREV,&UCASE,&LCASE)
	OFFSET =
	SIZE = INCR					:(RETURN)

* here with no label
MK_LBL2	IDENT(HERE)					:S(MK_LBL3)
	NAME = HERE
	HERE =						:(MK_LBL0)

* prev size is offset of this label
MK_LBL3	OFFSET = SIZE
* increment object size
	SIZE = CONVERT(SIZE,'INTEGER') + CONVERT(INCR,'INTEGER') :S(RETURN)
	SIZE = SIZE '+' INCR				:(RETURN)
E_MK_LBL


****************

*	return descr address of current location
	DEFINE("LOCATION()OFF")				:(E_LOCATION)
LOCATION
	OFF = DIFFER(OFFSET) '+' OFFSET 
	LOCATION = RESV LCPREV OFF			:(RETURN)
E_LOCATION

****************************************************************
*	main program

BEGIN
* commented out 9/2/96; perturbs new "cmp || cp"
*	DATE = ' on ' DATE()

	DATA.C = '/* generated by gendata.sno' DATE ' */'
	DATA.C =
	DATA.C = '# ifdef HAVE_CONFIG_H'
	DATA.C = '# include "config.h"'
	DATA.C = '# endif /* HAVE_CONFIG_H defined */'
	DATA.C =
	DATA.C = '# include "h.h"'
	DATA.C = '# include "snotypes.h"'
	DATA.C =
	DATA.C = '# include "equ.h"'
	DATA.C = '# include "res.h"'
	DATA.C =

	DATA.H = '/* generated by gendata.sno' DATE ' */'
	DATA.H =

	DATA_INIT.H = '/* generated by gendata.sno' DATE ' */'
	DATA_INIT.H =

	EQU.H = '/* generated by gendata.sno' DATE ' */'
	EQU.H =
	EQU.H = '# ifndef _EQU_H_'
	EQU.H = '# define _EQU_H_'
	EQU.H =

	RES.H = '/* generated by gendata.sno' DATE ' */'
	RES.H =
	RES.H = '# ifndef _RES_H_'
	RES.H = '# define _RES_H_'
	RES.H =
	RES.H = 'struct res {'

	LN = 1
	DATA =

****************************************************************
TOP	LINE = INPUT						:F(EOF)
	SAVELINE = LINE
	LINE = LINE SP
	LBL =
	OP =
	ARGS =
	COMM =

*	a comment?
	LINE '*'						:S(TOP)

*	here if not a comment
** new: check for .IF
* can't nest for now....
	IDENT(IN_IF)						:S(NOTINIF)
	LINE '.FI'						:F(NOTFI)
	IN_IF = IF_TRUE =					:(TOP)

NOTFI	IDENT(IF_TRUE)						:S(TOP)

NOTINIF	LINE '.IF' WS ID . IFID					:F(NOTIF)
	IN_IF = 1
	IF_TRUE = WITH[IFID]
*	TERMINAL = 'saw .IF ' IFID ' -- ' IF_TRUE
	:(TOP)

NOTIF	LINE '.IFE' WS ID . IFID				:F(NOTIFE)
	IN_IF = 1
	IF_TRUE = (DIFFER(WITH[IFID]), 1)
*	TERMINAL = 'saw .IFE ' IFID ' -- ' IF_TRUE
	:(TOP)

NOTIFE	OLINE = LINE
	LINE LINE_PAT =

	LINE QS_ARG_PAT						:S(STRARG)
	LINE TOK_ARG_PAT
STRARG
	IDENT(OP,'EQU')						:S(XEQU)

	DIFFER(DATA)						:S(IN_DATA)

* skip non-data; avoid clogging label table!!

	DATA = 1
IN_DATA	IDENT(OP,'ARRAY')					:S(XARRAY)
	IDENT(OP,'DESCR')					:S(XDESCR)
	IDENT(OP,'LHERE')					:S(XLHERE)
	IDENT(OP,'SPEC')					:S(XSPEC)
	IDENT(OP,'STRING')					:S(XSTRING)
	IDENT(OP,'BUFFER')					:S(XBUFFER)
	IDENT(OP,'FORMAT')					:S(XFORMAT)
	IDENT(OP,'REAL')					:S(XREAL)
	HERE =
								:(TOP)
****************

XARRAY	MK_LBL(LBL,'descr',ARGS)			:(NEXT)

****************
XBUFFER
	LCLBL = REPLACE(LBL,&UCASE,&LCASE)
	RES.H = IND 'char ' LCLBL '[' ARGS '];' TAB TAB '/* BUFFER */'
	RES.H = '# define ' LBL TAB RESV LCLBL
								:(NEXT)

****************
XDESCR	ARGS DESCRARGS						:F(ERROR)
	MK_LBL(LBL,'descr',1)
	LOCN = '(' LOCATION() ') = '
	DATA_INIT.H = DIFFER(A,'0') IND 'D_A' LOCN INT_T '(' A ');'
	DATA_INIT.H = DIFFER(F,'0') IND 'D_F' LOCN F ';'
	DATA_INIT.H = DIFFER(V,'0') IND 'D_V' LOCN INT_T '(' V ');'
								:(NEXT)

****************
* XXX need to deal with expressions? (or let end-user cope?)
XEQU	EQU.H = '# define ' LBL TAB '(' ARGS ')'		:(NEXT)

****************
XFORMAT	ARGS = REPLACE(ARGS, "'", '"')
	DATA.C = 'const char ' LBL '[] = ' ARGS ';' SP FMT
	DATA.H = 'extern const char ' LBL '[];' TAB TAB FMT	:(NEXT)
****************
XLHERE HERE = LBL						:(NEXT)

****************
XSPEC	ARGS SPECARGS						:F(ERROR)
	MK_LBL(LBL,'spec',1)
	LOCN = '(' LOCATION() ') = '
	DATA_INIT.H = DIFFER(A,'0') IND 'S_A' LOCN INT_T '(' A ');'
	DATA_INIT.H = DIFFER(F,'0') IND 'S_F' LOCN F ';'
	DATA_INIT.H = DIFFER(V,'0') IND 'S_V' LOCN V ';'
	DATA_INIT.H = DIFFER(O,'0') IND 'S_O' LOCN O ';'
	DATA_INIT.H = DIFFER(L,'0') IND 'S_L' LOCN L ';'	:(NEXT)

****************
XSTRING	MK_LBL(LBL,'spec',1)
	ARGS = REPLACE(ARGS, "'", '"')
	LOCN = '(' LOCATION() ') = '
	DATA_INIT.H = IND 'S_A' LOCN INT_T ARGS ';'
	DATA_INIT.H = IND 'S_L' LOCN 'STRLEN(' ARGS ');'	:(NEXT)

****************
XREAL	MK_LBL(LBL,'descr',1)
	LOCN = '(' LOCATION() ') = '
	DATA_INIT.H = IND 'D_RV' LOCN ARGS ';'
	DATA_INIT.H = IND 'D_V' LOCN 'R;'
								:(NEXT)

****************
NEXT	LN = LN + 1						:(TOP)

****************************************************************

EOF	MK_LBL('foo','descr',0)
	RES.H = '};'
	RES.H = '# endif'

	EQU.H = '# endif'

	DATA.C = '# ifndef NO_STATIC_VARS'
	DATA.C = 'struct res ' RES ';'
	DATA.C = '# endif'

	DATA.H = '# ifndef NO_STATIC_VARS'
	DATA.H = 'extern struct res ' RES ';'
	DATA.H = '# endif'

	DIFFER(HERE)						:S(ERROR)
END
