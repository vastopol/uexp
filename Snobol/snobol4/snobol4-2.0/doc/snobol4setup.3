.\" generated by $Id: snopea.sno,v 1.33 2015/01/02 03:31:20 phil Exp $
.if n .ad l
.ie '\*[.T]'ascii' \{\
.	ds lq \&"\"
.	ds rq \&"\"
.	ds pi \fIpi\fP
.\}
.el \{\
.	ds rq ''
.	ds lq ``
.	ds pi \[*p]
.\}
.nh
.TH SNOBOL4SETUP 3 "January 1, 2015" "CSNOBOL4B 2.0" "CSNOBOL4 Manual"
.SH "NAME"
.nh
snobol4setup \- SNOBOL4 Loadable module setup utility
.SH "SYNOPSIS"
.nh
\fBsnobol4 setup.sno\fP \fIcommand\fP
.SH "DESCRIPTION"
.nh
The example program below (canonically called \fBsetup.sno\fP) can be invoked
(portably across different operating systems)
with the following commands:
.SH "OPTIONS"
.nh
.TP 4
build
Compiles and links a dynamicly loadable executable file
named \fImodulename\fP (with the appropriate extension for the local system).
\fImodulename\fP\fB.sno\fP will be created from
\fBpre.sno\fP (if it exists),
any \fILOAD()\fP present in comments 
and any lines starting with \fB*=pea\fP and ending with \fB*=cut\fP
in \fIsourcefiles\fP,
and finally \fBfuncs.sno\fP (if it exists).
.TP 4
install
installs binary, include and man page files.
.TP 4
clean
cleans up.
.SH "EXAMPLE"
.nh
.ft CW
.br
.ne 10
.RS 4
.nh
.nf
-INCLUDE 'setuputil.sno'
        t = TABLE()
        t['module'] = '\fImodulename\fP'
        t['sources'] = '\fIsourcefile\fP.c,\fIothername.c\fP'
        t['author'] = t['maintainer'] = '\fIYourname Here\fP'
        t['author_email'] = t['maintainer_email'] = '\fIname@doma.in\fP'
        t['include_dirs'] = '\fIlist,of,dirs,to,search\fP'
        t['library_dirs'] = '\fIlist,of,dirs,to,search\fP'
        t['libraries'] = '\fIlist,of,library,name,to,link,against\fP'
        t['license'] = 'BSD'
        setup(t)
end
.ft R
.fi
.nh
.RE
.SH "NOT CONFORMING TO"
.nh
Inspired by Python setuptools, easyinstall, et.al.
.SH "AUTHOR"
.nh
Philip L. Budne
.SH "BUGS"
.nh
Only tested under OS X, FreeBSD, Linux, CYGWIN, MINGW, Visual Studio.
.SH "SEE ALSO"
.nh
\fBsnobol4\fP(1), \fBsnopea\fP(1)
