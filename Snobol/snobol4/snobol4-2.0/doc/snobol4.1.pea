$Id: snobol4.1.pea,v 1.24 2015/01/02 04:22:26 phil Exp $
=pea
=sect NAME
snobol4 \- SNOBOL4 interpreter

=sect DESCRIPTION
This manual page describes CSNOBOL4, a port of the original Bell
Telephone Labs (BTL) Macro Implementation of SNOBOL4 to the C
language.

The language and its implementation are described in
=link #Griswold1971 [Griswold1971]
and 
=link #Griswold1972 [Griswold1972].

For command line options see B<snobol4cmd>(1).

Extensions from Catspaw SNOBOL4+, SPITBOL and SITBOL have
been added, see B<snobol4ext>(1).

=subsect Changes
The following behaviors have been changed from the original Macro SNOBOL4
in ways that might effect old programs:

=item B<INTEGER> exceptions
B<INTEGER> math can never cause expression failure.

=item Listings are disabled by default
Default listing side (when enabled by B<-LIST> or the B<-l> command
line option is B<LEFT>.  Listings are directed to standard error
(or file specified by the B<-l> command line option.

=item Messages
The the startup banner and statistics (if enabled) are directed to standard error.
=item
Compilation error messages (including erroneous lines) appear on
standard error. Error messages reference the source file name and line number.

=item Character set
see below.

=item B<INPUT()> and B<OUTPUT()>
FORTRAN formats are not used to control I/O.
The 3rd argument to the B<OUTPUT()> and B<INPUT()>
functions is interpreted as a string of I/O options,
The 4th argument is used to specify a file name,
see B<snobol4io>(1) for details.

=item B<PUNCH> variable
The B<PUNCH> output variable no longer exists,
the B<TERMINAL> variable has been added in it's place,
see B<snobol4io>(1).

=item Statement separator
Control lines and comment characters are valid after the 
(B<;>) statement separator.  Listing statement numbers show the statement
number of the LAST statement on the line (rather than the first).

=item B<&amp;STLIMIT>
B<&amp;STLIMIT> defaults to -1, see B<snobol4key>(1).

=item Tracing
B<VALUE> tracing applies to variables modified by immediate value
assignment (B<$> operator) and value assignment (B<.> operator) during
pattern matching.

=subsect Extensions
Further additions are documented in B<snobol4ext>(1).

=subsect Character set
B<snobol4>(1) is 8-bit clean, and uses the native character set.  Any
8-bit byte is accepted as a SNOBOL datum or in a string constant of a
SNOBOL source program.  The value of the SNOBOL protected keyword
B<&amp;ALPHABET> is a 256-character string of all bytes from 0 to 255,
in ascending order.

On ASCII-based systems, any character with the 8th bit set is treated
as ``alphabetic'', and can start, or be used in identifiers and
labels.  This includes characters from the ``upper half'' of national
character sets and all bytes resulting from the UTF-8 encoding of
Unicode characters.  Include file B<utf.sno> implements
pattern matching functions for UTF-8 sequences.

Programs may be entered in mixed case; By default lower case
identifiers are folded to upper case (see B<&amp;CASE> and B<\-CASE>).
Case folding is performed by using the C library
B<islower>(3) test, and then using B<toupper>(3) to convert the
lower-case characters to upper case.  When using UTF-8 encoded
characters in code, case folding should be disabled, to prevent any
bytes which appear to be lower case in the current locale from being
modified.

The following operator character sequences are permitted and represent
a cross between PDP-10 Macro SNOBOL, SITBOL and Catspaw SPITBOL usage:

=table 2i
=row Exponentiation:	^\~\~**
=row Alternation:	|\~\~!
=row Unary negation:	~\~\~\e
=row Assignment:	=\~\~_
=row Comment line:	*\~\~#\~\~|\~\~;\~\~!
=row Continuation line:	+\~\~.
=etable

Both square brackets (B<[]>) and angle brackets (B<&lt;&gt;>) may be
used to subscript arrays and tables.  The B<TAB> (ASCII 9) character
is accepted as whitespace.

Underscore (B<_>) and period (B<.>) are legal I<within> identifiers
and labels.

Note that the use of the pound sign for comments allows use of the
script interpreter (hash-bang) sequence at the top of a file marked as
executable: ``B<#!/usr/local/bin/snobol4>'' or
``B<#!/usr/bin/env snobol4>''

=sect DIRECTORY SEARCH LIST
A directory search list is used for files specified in B<-INCLUDE>
directives and B<LOAD()> function calls is constructed from:

Any directories specified on the command line using B<-I> options, in
the order specified.

Directories from the the B<SNOPATH> environment variable (see below), if defined.

If B<SNOPATH> is not defined, the B<SNODIR> environment variable (or a
compiled in default) is used as I<base> to add the following
directories:

=bull B<.> I<(the current working directory)>
=bull I<base>/I<version>/B<lib>
=bull I<base>/I<version>/B<local>
=bull I<base>/B<local>

The B<LOAD()> function will also check for the file in B<shared>
subdirectory in each directory in the search path.

=sect ENVIRONMENT
=item B<SNOPATH>
Is a list of directories delimited by colons (semi-colons on VMS and
Windows) appended to the Directory Search List (see above).

=item B<SNOLIB>
B<SNOLIB> is used to establish the base libary path if
B<SNOPATH> is not defined.  See Directory Search List above.
B<SNOLIB> was the sole search directory in versions of CSNOBOL4 prior
to version 1.5.

=item B<SNOBOL_PRELOAD_PATH>
Is a list of source files delimited by colons (semi-colons on VMS and
Windows) that will be read before the program source.
Using B<SNOBOL_PRELOAD_PATH> will make your code less portable.

=sect SEE ALSO
=table 2i
=row B<sdb>(1)	SNOBOL4 Debugger
=row B<snobol4cmd>(1)	command line options
=row B<snobol4ctrl>(1)	control lines
=row B<snobol4error>(1)	B<&amp;ERRTYPE> and B<&amp;ERRTEXT> values
=row B<snobol4ext>(1)	extensions to BTL SNOBOL4
=row B<snobol4func>(1)	built-in function list
=row B<snobol4io>(1)	input/output
=row B<snobol4key>(1)	keywords
=row B<snobol4op>(1)	operators
=row B<snobol4blocks>(1)	SNOBOL4B BLOCKS extension
=row B<snopea>(1)	convert snopea documentation to roff and HTML
=row B<snobol4dirs>(3)	directory access functions
=row B<snobol4ffi>(3)	Foreign Function Interface functions
=row B<snobol4fork>(3)	subprocess interface functions
=row B<snobol4logic>(3)	bit logic &amp; formatting functions
=row B<snobol4ndbm>(3)	keyed file access functions
=row B<snobol4random>(3)	pseudo-random numbers functions
=row B<snobol4readline>(3)	input with line editing
=row B<snobol4setup>(3)	loadable module builder
=row B<snobol4sprintf>(3)	formatting function
=row B<snobol4sqlite3>(3)	SQLite database interface functions
=row B<snobol4sqlite3dbm>(3)	DBM interface using SQLite
=row B<snobol4stat>(3)	file metadata functions
=row B<snobol4stcl>(3)	Tcl/Tk interface functions
=row B<snobol4time>(3)	date/time functions
=row B<snolib>(3)	misc library functions
=row B<snopea>(7)	A little ``Plain Old Documentation'' format for SNOBOL4
=etable

=item L<http://www.snobol4.org>
All things SNOBOL4 related.

=item L<http://www.snobol4.com>
Catspaw: commercial SPITBOL implementations, Free SNOBOL4+ for DOS.

=item L<http://www.snobol4.org/doc/burks/tutorial/contents.htm>
SNOBOL4 language tutorial (from Catspaw Vanilla SNOBOL4)

=anchor Griswold1971
=item [Griswold1971]
R. E. Griswold, J. F. Poage, and I. P. Polonsky,
I<The SNOBOL4 Programming Language>, 2nd ed., Prentice-Hall Inc., 1971.
I<(aka the ``green book'')>
L<http://www.snobol4.org/docs/books.html#green>

=anchor Griswold1972
=item [Griswold1972]
R. E. Griswold,
I<The Macro Implementation of SNOBOL4>, W. H. Freeman and Co., 1972.
Book describing the implementation techniques used in Macro SNOBOL4.
L<http://www.snobol4.org/docs/books.html#macro>

=item L<http://www.snobol4.org/doc/burks/manual/contents.htm>
Catspaw Vanilla SNOBOL4 manual.

=item L<ftp://ftp.snobol4.com/spitman.pdf>
Catspaw Macro SPITBOL manual

=item L<http://www.snobol4.org/docs/books.html#orange>
I<Algorithms in SNOBOL4>, James F. Gimpel, Wiley, New York, 1976.

=sect AUTHORS
Ralph E. Griswold, James F. Poage, Ivan P. Polonsky, et al (Macro SNOBOL4)

Philip. L. Budne (CSNOBOL4)

Mark Emmer (code from SNOBOL4+)

Viktors Berstis (code from Minnesota SNOBOL4)

James F. Gimpel (SNOBOL4B)

=sect BUGS
I/O is still tied to unit numbers.

I/O retains some record oriented flavor (maximum line length on input).

``Dynamic'' storage cannot be expanded after startup.

Integer math can never fail, even on overflow.

Oversize integer constants may not be detected.
