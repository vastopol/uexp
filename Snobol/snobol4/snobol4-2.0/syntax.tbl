* $Id: syntax.tbl,v 1.8 2013/10/23 02:49:46 phil Exp $
*
* $Log: syntax.tbl,v $
* Revision 1.8  2013/10/23 02:49:46  phil
* Merge from BR_1_5_PLUS_BLOCKS
*
* Revision 1.7.2.1  2013/10/11 23:09:59  phil
* SNOBOL4B (SNOBOL4 with BLOCKS) thanks to Mike Alexander <mta@umich.edu>
* new: procs.blocks
* genc.sno: Make macros used by BLOCKS macros into functions.
* 	Add --with NAME flag, process .IF[E] NAME / .FI
* 	Add notes about clearing F&V from reading PDP-10 macros
* 	Read procs.blocks if --with BLOCKS selected
* 	BLOCKS macros: CYC IF{DEF,FIT,MERGE,PHY,REP,ST,CONT}
* 		MAX, MERGSP, NN, RELS, SWAP, TRL, FASTPR
* Makefile: add "with"
* bsdtsort.c: make hash unsigned, do rotate
* configure: add --with-blocks, write "with" file (if changed)
* gendata.sno: Add --with flag, process .IF NAME / .FI
* 	Process data defns before end of code (for BLOCKS)
* gensyn.sno: Add --with flag, process .IF NAME / .FI
* globals: add BLOCKS related globals
* main.c: change name to CSNOBOL4B under ifdef BLOCKS
* syntax.tbl: add blocks binary operator tables: BBIOPTB and BSBIPTB
* v311.sil: [BLOCKS] add BLOCKS code
* 	  [PLBXXX] add -[NO]BLOCKS to disable/enable blocks operator changes
* lib.h: add io_fastpr(), mergsp()
* macros.h: renamed INSERT macro to X_INSERT; add FASTPR, MERGSP macros
* lib/init.c: add -B option to toggle blocks
* lib/io.c: io_printf(): add %A %L %V
* test/blocks.in: list of blocks tests
* test/test.{dump,err,genc,opt,reg,trace}.sh: handle test with directory name
* test/blocks/ (new)
* 	{ab,acm4{39,40,41,42,43,43a,43b},block{0,0n,1,1b,1b},box,dump,image,reg,tree.{sno,ref}
*
* Revision 1.7  1997/08/06 05:51:27  phil
* [PLB59] from SNOBOL4+
* seperate syntax tables for BREAK(X) and SPAN
* simple index lookup for ANY/NOTANY
*
* Revision 1.6  1997/06/20  05:07:41  phil
* allow exponent without fraction (ie; 1e5), like SPITBOL
*
* Revision 1.5  1996/09/04  03:02:00  phil
* [PLB32] added SPITBOL binop table, exponents on REALs
*
* Revision 1.4  1993/12/09  14:36:58  budd
* ALPHA1 release
*
* Revision 1.3  93/11/02  18:06:31  phil
* [PLB1] 10/28/93
* Added COMMA to SNABTB -- need one of each PLUGTB/CLERTB action
* 
* Revision 1.2  93/11/02  18:05:14  phil
* Added RCS Id and Log keywords
* 
*
BEGIN BIOPTB
FOR(PLUS) PUT(ADDFN) GOTO(TBLKTB)
FOR(MINUS) PUT(SUBFN) GOTO(TBLKTB)
FOR(DOT) PUT(NAMFN) GOTO(TBLKTB)
FOR(DOLLAR) PUT(DOLFN) GOTO(TBLKTB)
FOR(STAR) PUT(MPYFN) GOTO(STARTB)
FOR(SLASH) PUT(DIVFN) GOTO(TBLKTB)
FOR(AT) PUT(BIATFN) GOTO(TBLKTB)
FOR(POUND) PUT(BIPDFN) GOTO(TBLKTB)
FOR(PERCENT) PUT(BIPRFN) GOTO(TBLKTB)
FOR(RAISE) PUT(EXPFN) GOTO(TBLKTB)
FOR(ORSYM) PUT(ORFN) GOTO(TBLKTB)
FOR(KEYSYM) PUT(BIAMFN) GOTO(TBLKTB)
FOR(NOTSYM) PUT(BINGFN) GOTO(TBLKTB)
FOR(QUESYM) PUT(BIQSFN) GOTO(TBLKTB)
ELSE ERROR
END BIOPTB

* New [PLB32] for SPITBOL syntax
BEGIN SBIPTB
FOR(PLUS) PUT(ADDFN) GOTO(TBLKTB)
FOR(MINUS) PUT(SUBFN) GOTO(TBLKTB)
FOR(DOT) PUT(NAMFN) GOTO(TBLKTB)
FOR(DOLLAR) PUT(DOLFN) GOTO(TBLKTB)
FOR(STAR) PUT(MPYFN) GOTO(STARTB)
FOR(SLASH) PUT(DIVFN) GOTO(TBLKTB)
FOR(AT) PUT(BIATFN) GOTO(TBLKTB)
FOR(POUND) PUT(BIPDFN) GOTO(TBLKTB)
FOR(PERCENT) PUT(BIPRFN) GOTO(TBLKTB)
FOR(RAISE) PUT(EXPFN) GOTO(TBLKTB)
FOR(ORSYM) PUT(ORFN) GOTO(TBLKTB)
FOR(KEYSYM) PUT(BIAMFN) GOTO(TBLKTB)
FOR(NOTSYM) PUT(BINGFN) GOTO(TBLKTB)
FOR(QUESYM) PUT(BISNFN) GOTO(TBLKTB)
FOR(EQUAL) PUT(BIEQFN) GOTO(TBLKTB)
ELSE ERROR
END SBIPTB

.IF BLOCKS
* [BLOCKS] blocks version of BIOPTB
BEGIN BBIOPTB
FOR(PLUS) PUT(ADDFN) GOTO(TBLKTB)
FOR(MINUS) PUT(SUBFN) GOTO(TBLKTB)
FOR(DOT) PUT(NAMFN) GOTO(TBLKTB)
FOR(DOLLAR) PUT(DOLFN) GOTO(TBLKTB)
FOR(STAR) PUT(MPYFN) GOTO(STARTB)
FOR(SLASH) PUT(DIVFN) GOTO(TBLKTB)
FOR(AT) PUT(BIATFN) GOTO(TBLKTB)
FOR(POUND) PUT(BIBDFN) GOTO(TBLKTB)
FOR(PERCENT) PUT(BIBRFN) GOTO(TBLKTB)
FOR(RAISE) PUT(EXPFN) GOTO(TBLKTB)
FOR(ORSYM) PUT(ORFN) GOTO(TBLKTB)
FOR(KEYSYM) PUT(BIAMFN) GOTO(TBLKTB)
FOR(NOTSYM) PUT(BINGFN) GOTO(TBLKTB)
FOR(QUESYM) PUT(BIQSFN) GOTO(TBLKTB)
ELSE ERROR
END BBIOPTB

* [BLOCKS] BLOCKS + SPITBOL syntax!!
BEGIN BSBIPTB
FOR(PLUS) PUT(ADDFN) GOTO(TBLKTB)
FOR(MINUS) PUT(SUBFN) GOTO(TBLKTB)
FOR(DOT) PUT(NAMFN) GOTO(TBLKTB)
FOR(DOLLAR) PUT(DOLFN) GOTO(TBLKTB)
FOR(STAR) PUT(MPYFN) GOTO(STARTB)
FOR(SLASH) PUT(DIVFN) GOTO(TBLKTB)
FOR(AT) PUT(BIATFN) GOTO(TBLKTB)
FOR(POUND) PUT(BIBDFN) GOTO(TBLKTB)
FOR(PERCENT) PUT(BIBRFN) GOTO(TBLKTB)
FOR(RAISE) PUT(EXPFN) GOTO(TBLKTB)
FOR(ORSYM) PUT(ORFN) GOTO(TBLKTB)
FOR(KEYSYM) PUT(BIAMFN) GOTO(TBLKTB)
FOR(NOTSYM) PUT(BINGFN) GOTO(TBLKTB)
FOR(QUESYM) PUT(BISNFN) GOTO(TBLKTB)
FOR(EQUAL) PUT(BIEQFN) GOTO(TBLKTB)
ELSE ERROR
END BSBIPTB
.FI

BEGIN CARDTB
FOR(CMT) PUT(CMTTYP) STOPSH
FOR(CTL) PUT(CTLTYP) STOPSH
FOR(CNT) PUT(CNTTYP) STOPSH
ELSE PUT(NEWTYP) STOPSH
END CARDTB

BEGIN DQLITB
FOR(DQUOTE) STOP
ELSE CONTIN
END DQLITB

BEGIN ELEMTB
FOR(NUMBER) PUT(ILITYP) GOTO(INTGTB)
FOR(LETTER) PUT(VARTYP) GOTO(VARTB)
FOR(SQUOTE) PUT(QLITYP) GOTO(SQLITB)
FOR(DQUOTE) PUT(QLITYP) GOTO(DQLITB)
FOR(LEFTPAREN) PUT(NSTTYP) STOP
ELSE ERROR
END ELEMTB

BEGIN EOSTB
FOR(EOS) STOP
ELSE CONTIN
END EOSTB

* new [PLB32]
* parse exponent sign
BEGIN EXPTB
FOR(PLUS,MINUS) GOTO(EXPBTB)
FOR(NUMBER) GOTO(EXPBTB)
ELSE ERROR
END EXPTB

* new [PLB32]
* parse exponent value
BEGIN EXPBTB
FOR(NUMBER) CONTIN
FOR(TERMINATOR) STOPSH
ELSE ERROR
END EXPBTB

BEGIN FLITB
FOR(NUMBER) CONTIN
FOR(TERMINATOR) STOPSH
FOR(EXP) GOTO(EXPTB)
ELSE ERROR
END FLITB

BEGIN FRWDTB
FOR(BLANK) CONTIN
FOR(EQUAL) PUT(EQTYP) STOP
FOR(RIGHTPAREN) PUT(RPTYP) STOP
FOR(RIGHTBR) PUT(RBTYP) STOP
FOR(COMMA) PUT(CMATYP) STOP
FOR(COLON) PUT(CLNTYP) STOP
FOR(EOS) PUT(EOSTYP) STOP
ELSE PUT(NBTYP) STOPSH
END FRWDTB

BEGIN GOTFTB
FOR(LEFTPAREN) PUT(FGOTYP) STOP
FOR(LEFTBR) PUT(FTOTYP) STOP
ELSE ERROR
END GOTFTB

BEGIN GOTOTB
FOR(SGOSYM) GOTO(GOTSTB)
FOR(FGOSYM) GOTO(GOTFTB)
FOR(LEFTPAREN) PUT(UGOTYP) STOP
FOR(LEFTBR) PUT(UTOTYP) STOP
ELSE ERROR
END GOTOTB

BEGIN GOTSTB
FOR(LEFTPAREN) PUT(SGOTYP) STOP
FOR(LEFTBR) PUT(STOTYP) STOP
ELSE ERROR
END GOTSTB

BEGIN IBLKTB
FOR(BLANK) GOTO(FRWDTB)
FOR(EOS) PUT(EOSTYP) STOP
ELSE ERROR
END IBLKTB

BEGIN INTGTB
FOR(NUMBER) CONTIN
FOR(TERMINATOR) PUT(ILITYP) STOPSH
FOR(DOT) PUT(FLITYP) GOTO(FLITB)
FOR(EXP) PUT(FLITYP) GOTO(EXPTB)
ELSE ERROR
END INTGTB

BEGIN LBLTB
FOR(ALPHANUMERIC) GOTO(LBLXTB)
FOR(BLANK,EOS) STOPSH
ELSE ERROR
END LBLTB

BEGIN LBLXTB
FOR(BLANK,EOS) STOPSH
ELSE CONTIN
END LBLXTB

BEGIN NBLKTB
FOR(TERMINATOR) ERROR
ELSE STOPSH
END NBLKTB

BEGIN NUMBTB
FOR(NUMBER) GOTO(NUMCTB)
FOR(PLUS,MINUS) GOTO(NUMCTB)
FOR(COMMA) PUT(CMATYP) STOPSH
FOR(COLON) PUT(DIMTYP) STOPSH
ELSE ERROR
END NUMBTB

BEGIN NUMCTB
FOR(NUMBER) CONTIN
FOR(COMMA) PUT(CMATYP) STOPSH
FOR(COLON) PUT(DIMTYP) STOPSH
ELSE ERROR
END NUMCTB

* new [PLB59] from SNABTB
BEGIN SPANTB
* [PLB1] added COMMA 10/28/93 -- need one of each PLUGTB/CLERTB action
FOR(COMMA) CONTIN
FOR(FGOSYM) STOP
FOR(SGOSYM) STOPSH
ELSE ERROR
END SPANTB

* new [PLB59] from SNABTB
BEGIN BRKTB
* [PLB1] added COMMA 10/28/93 -- need one of each PLUGTB/CLERTB action
FOR(COMMA) CONTIN
FOR(FGOSYM) STOP
FOR(SGOSYM) STOPSH
ELSE ERROR
END BRKTB

BEGIN SQLITB
FOR(SQUOTE) STOP
ELSE CONTIN
END SQLITB

BEGIN STARTB
FOR(BLANK) STOP
FOR(STAR) PUT(EXPFN) GOTO(TBLKTB)
ELSE ERROR
END STARTB

BEGIN TBLKTB
FOR(BLANK) STOP
ELSE ERROR
END TBLKTB

BEGIN UNOPTB
FOR(PLUS) PUT(PLSFN) GOTO(NBLKTB)
FOR(MINUS) PUT(MNSFN) GOTO(NBLKTB)
FOR(DOT) PUT(DOTFN) GOTO(NBLKTB)
FOR(DOLLAR) PUT(INDFN) GOTO(NBLKTB)
FOR(STAR) PUT(STRFN) GOTO(NBLKTB)
FOR(SLASH) PUT(SLHFN) GOTO(NBLKTB)
FOR(PERCENT) PUT(PRFN) GOTO(NBLKTB)
FOR(AT) PUT(ATFN) GOTO(NBLKTB)
FOR(POUND) PUT(PDFN) GOTO(NBLKTB)
FOR(KEYSYM) PUT(KEYFN) GOTO(NBLKTB)
FOR(NOTSYM) PUT(NEGFN) GOTO(NBLKTB)
FOR(ORSYM) PUT(BARFN) GOTO(NBLKTB)
FOR(QUESYM) PUT(QUESFN) GOTO(NBLKTB)
FOR(RAISE) PUT(AROWFN) GOTO(NBLKTB)
ELSE ERROR
END UNOPTB

BEGIN VARATB
FOR(LETTER) GOTO(VARBTB)
FOR(COMMA) PUT(CMATYP) STOPSH
FOR(RIGHTPAREN) PUT(RPTYP) STOPSH
ELSE ERROR
END VARATB

BEGIN VARBTB
FOR(ALPHANUMERIC,BREAK) CONTIN
FOR(LEFTPAREN) PUT(LPTYP) STOPSH
FOR(COMMA) PUT(CMATYP) STOPSH
FOR(RIGHTPAREN) PUT(RPTYP) STOPSH
ELSE ERROR
END VARBTB

BEGIN VARTB
FOR(ALPHANUMERIC,BREAK) CONTIN
FOR(TERMINATOR) PUT(VARTYP) STOPSH
FOR(LEFTPAREN) PUT(FNCTYP) STOP
FOR(LEFTBR) PUT(ARYTYP) STOP
ELSE ERROR
END VARTB

