#!/bin/sh

# This is a shell archive.
# To extract it, feed it to /bin/sh.
# It will create the following files:
#
#	prog/adv.u
#	prog/apfel.u
#	prog/ascii.u
#	prog/ascii.uw
#	prog/bottles.u
#	prog/cat.u
#	prog/cmandel.u
#	prog/csum.u
#	prog/csum.uw
#	prog/echo.u
#	prog/guess.u
#	prog/hlite.u
#	prog/hlitew.u
#	prog/keks.u
#	prog/mandel.u
#	prog/maze.u
#	prog/maze.uw
#	prog/primes.u
#	prog/prompt.u
#	prog/queens.u
#	prog/queens.uw
#	prog/rot13.u
#	prog/rwp.u
#	prog/shar.u
#	prog/sound.u
#	prog/ucx.u
#	prog/ue.hlp
#	prog/ue.u
#	prog/vmaze.u
#	prog/vqueens.u
#	prog/vt100.u
#	prog/vtrect.u

mkdir prog || exit 1
echo x - prog/adv.u
sed -e 's/^X//' >prog/adv.u <<'EOF-adv.u'
Xg| A micro adventure game; by NMH; in the PD |
X
Xwiwg'24<s'80<|[wswe"need 80x24 screen"fw_nl.q]
X'79nw '23nh _w_h*nk      '( height, width, size )
X'va_tbl_k.ca _a_k.c'0bf  '( maze array )
X'11nlen        '( max len. of a corridor )
X_w\+vp         '( current position )
X'1vq           '( direction )
X'1000_rnd.vr   '( seed )
X'vx 'vy        '( coordinates )
X'vpx 'vpy      '( previous coordinates )
X:q0_p?._w'2*>[_w%;'0]
X:q1_p?._w_h*_w'2*-.<[_w;'0]
X:q2_p?_w/sx._w'2-.=['0;'1]
X:q3_p?_w/sx.'1=['0;'1%]
X'vqn_tbl @q0, @q1, @q2, @q3,
X:dir_qn_q?c+?e_q!
X:move2_q?_p\! _q?._a_p?c+!
X:move_q?##._a_q?'2*_p?+c+?#&[_move2_move2]
X:rand_r?'57*\+_r! _r?'7/x'3&_q!
X:pos_a_p?c+?'2*._p?s-._p!
X:corr_len(_rand_dir_move)_pos
X:mapmaze_k(_a.i\-c+?[k ;k#]_a.i\-c+!)
X:maze`_q?##._p?_w\+=#|{_corr}_mapmaze
X:mpos s_w*s+c_a+
X:mget_mpos?'127&
X:mmarked _mpos?'256&##
X:mput_mpos!
X:help knwa'0'0wm"hjkl - move  HJKL - fastmove"ww_help2
X:help2"  r - redraw  Q - quit"ww
X:cwall wo['3'3wc;knwa.xk#]
X:cway  wo['7'1wc;knwa]
X:uwall wo['6'6wc;knwa.xk:]
X:uway  wo['7'1wc;knwa]
X:dispu dk#=[_uwall;_uway]w!
X:dispc dk#=[_cwall;_cway]w!
X:mark oo_mget'256|tt_mput
X:disp.oos\+wm oo_mmarked[os_mget_dispc;os_mget_dispu]
X:line_w(_w.i-_disp)x
X:show_h(_h.i-_line)
X:rdisp.oos\+wm oo_mmarked[os_mget_dispc;x]
X:rline_w(_w.i-_rdisp)x
X:refresh ws_help_h(_h.i-_rline)
X:hl3.s\-soo\+wms'3(oo_mark.oo_mget_dispc\+)xx
X:hlite oo\-_hl3 oo_hl3 \+_hl3
X:cw s_mget.k =[t\+tt]
X:nways'0tt.oo\-_cw.oo\+_cw.o\-o_cw.o\+o_cw.xx
X:vup`d'0>  {oos_mget.k#=[xxy]oo_hlite\-}xx
X:vdn`d_h\-<{oos_mget.k#=[xxy]oo_hlite\+}xx
X:vle`o'0>  {oos_mget.k#=[xxy]oo_hlite.s\-s}xx
X:vri`o_w\-<{oos_mget.k#=[xxy]oo_hlite.s\+s}xx
X:player\+oowmwo['7'1wc]k@w!wm
X:view oo_vup oo_vdn oo_vle oo_vri _player
X:findpos'39'11`d_h\-<{oos_mget.k#=#[y]s\+s\+}
X:genmaze`_maze_findpos.d_h\-<#{}_y!_x!
X:savc_x?_px!_y?_py!
X:up   _savc_x?_y?\-s_mget.k#=#['1%_y\!]
X:down _savc_x?_y?\+s_mget.k#=#['1_y\!]
X:left _savc_x?\-_y?s_mget.k#=#['1%_x\!]
X:right_savc_x?\+_y?s_mget.k#=#['1_x\!]
X:canmove oos_mget.k =tt._px?_py?_2eq#&
X:findup_x?_y?\-_canmove[_up;_finddn]
X:finddn_x?_y?\+_canmove[_down;_findle]
X:findle_x?\-_y?_canmove[_left;_right]
X:fastmv`_x?_y?_nways'2={_findup_x?_y?_view}
X:quit_show_x?_y?_view.wgsx\-'0swmwlw?xwe.q
X:nav_help`'1{_x?_y?_view w?_navh}
X:navh dkh=o_wkle|[x_left;_navj]
X:navj dkj=o_wkdn|[x_down;_navk]
X:navk dkk=o_wkup|[x_up;_navl]
X:navl dkl=o_wkri|[x_right;_navuh]
X:navuh dkH=[x_left_fastmv;_navuj]
X:navuj dkJ=[x_down_fastmv;_navuk]
X:navuk dkK=[x_up_fastmv;_navul]
X:navul dkL=[x_right_fastmv;_navr]
X:navr dkr=[x_refresh;_navuq]
X:navuq dkQ=[x_quit;x]
X_genmaze_nav_show_quit
EOF-adv.u
echo x - prog/apfel.u
sed -e 's/^X//' >prog/apfel.u <<'EOF-apfel.u'
X'( useless example program: ASCII apfelmaennchen )
X
X'79nw '49nh          '( width, height )
X_w\+'3*'4/x\-nc      '( center offset )
X'100nS _S'2*n2S      '( zoom, numerators )
X_S'4/xndx _S'4/xndy  '( zoom, denominators )
X'vbuf_tbl_w\+a       '( line buffer )
Xg! printing chars: lower, empty, full, upper !
X'vcset_tbl         kmb,   k b,   kMb,  k"b,
X'vx 'vy    '( current coordinates )
X'vcr 'vci  '( c real, imag )
X'vzr 'vzi  '( z real, imag )
X'vir       '( intermediate )
X'1ve       '( even line flag )
X:init_y!_x! '0_zr!'0_zi! _x?_S_dx/x*_cr! _y?_S_dy/x*_ci!
Xg! z(n+1) = z(n) * z(n) + c !
X:calcir_zr?d*_S/x _zi?d*_S/x- _ir!
X:calczi_zr?_zi?*_S/x _zi?_zr?*_S/x+ _ci?+ _zi!
X:calczr_cr?_ir?+_zr!
Xg! |z| > 2+2i !
X:test_zi?_2S>._zr?_2S>|_zi?_2S%<|_zr?_2S%<|
X:iter_calcir_calczi_calczr
X:f_init'100(_iter_test[rx'0y])'1
X:print_w(_buf_w\+i-+b?_cset+b?f!)_nl
X:orow_w(di_c-s_f#_buf.i+b!)x
X:erow_w(di_c-s_f_buf.i+b?'1\<|_buf.i+b!)x_print
X:row_e?[_orow;_erow]_e?#_e!
X:apfel_h(_h.i-_h'2/x-_row)
X_apfel.q
EOF-apfel.u
echo x - prog/ascii.u
sed -e 's/^X//' >prog/ascii.u <<'EOF-ascii.u'
X'( useless example program: ascii table )
X
X:line'6('3_bls.d_pr8_bl.df!'16+)x_nl
X'32`d'48<{d_line\+}x.q
EOF-ascii.u
echo x - prog/ascii.uw
sed -e 's/^X//' >prog/ascii.uw <<'EOF-ascii.uw'
X:line'( n -- : raw a line of the form XX C ... )
EOF-ascii.uw
echo x - prog/bottles.u
sed -e 's/^X//' >prog/bottles.u <<'EOF-bottles.u'
X'( useless example program: 99 bottles of beer )
X
X:nbottles f," bottles of beer on the wall"fw_nl
X:nbeers f," bottles of beer"fw_nl
X:1bottle x"one bottle of beer on the wall"fw_nl
X:1beer x"one bottle of beer"fw_nl
X:bottles d'1=[_1bottle;_nbottles]
X:beers d'1=[_1beer;_nbeers]
X:take"take one down and pass it around"fw_nl
X:verse d_bottles.d_beers_take\-_bottles_nl
X:sing(i_verse)
X'99_sing.q
EOF-bottles.u
echo x - prog/cat.u
sed -e 's/^X//' >prog/cat.u <<'EOF-cat.u'
X'[ useless example program: Unix cat(1) ]
X
X:cat`f?f@{f!}x
X'0msx['0`dmd{fi_cat""fi\+}xxx;_cat]q
EOF-cat.u
echo x - prog/cmandel.u
sed -e 's/^X//' >prog/cmandel.u <<'EOF-cmandel.u'
X'( useless example program: ASCII Mandelbrot explorer )
X
Xwiwg  \-nh  '2/xnw  '( width, height )
X'10%vcx             '( x offset )
X'0vcy               '( y offset )
X'10000nS _S'2*n2S   '( zoom, numerator )
X_S'1000/xvdn        '( zoom, denominator )
X'vbuf_tbl'50a       '( buffer )
X'vx 'vy    '( current coordinates )
X'vcr 'vci  '( c real, imag )
X'vzr 'vzi  '( z real, imag )
X'vir       '( intermediate )
X'100vd     '( iteration depth )
X'1ve       '( even line flag )
X'0vcpal    '( color palette )
X'0vcseed   '( color seed )
X:start_y!_x! '0_zr!'0_zi! _x?_S_dn?/x*_cr! _y?_S_dn?/x*_ci!
Xg! z(n+1) = z(n) * z(n) + c !
X:calcir_zr?d*_S/x _zi?d*_S/x- _ir!
X:calczi_zr?_zi?*_S/x _zi?_zr?*_S/x+ _ci?+ _zi!
X:calczr_cr?_ir?+_zr!
Xg! |z| > 2+2i !
X:test_zi?_2S>._zr?_2S>|_zi?_2S%<|_zr?_2S%<|
X:iter_calcir_calczi_calczr
X:f_start_d?(_iter_test[r<y])'0
X:pal d[_cseed?+'3/sx\+_cpal?+]dwc
X:color'0s_d?`d{oo>[xx_pal.y]'29*'30/xt\+tt}xxx'0_pal
X:row_w(d_w'2/xi-_cx?+s_f_color.k dw!w!wr)x
X:mandel'1_e!_h('0i_h-%wm _h.d'2/x-.i-_cy?+_row)wr
X:zin'5*'4/x
X:zout'4*'5/x
X:czin_cx?_zin_cx! _cy?_zin_cy! _dn?_zin_dn!
X:czout_dn?_zout.d'5<[xy]_dn! _cx?_zout_cx! _cy?_zout_cy!
X:cpanx_w'4/x*_cx\!
X:cpany_h'4/x*_cy\!
X:cple'1%_cpanx
X:cpre'1._cpanx
X:cpup'1%_cpany
X:cpdn'1._cpany
X:cpfle'4%_cpanx
X:cpfre'4._cpanx
X:cpfup'4%_cpany
X:cpfdn'4._cpany
X:cdepth_d\!
X'vhpos
X:ch'0_hpos?wmww'1_hpos\!
X:chp1"hjkl     pan left/down/up/right |"_ch_chp2
X:chp2"HJKL     pan faster             |"_ch_chp3
X:chp3"io       zoom in/out            |"_ch_chp4
X:chp4"<>       depth-100 / depth+100  |"_ch_chp5
X:chp5",.       depth-10  / depth+10   |"_ch_chp6
X:chp6"c        rotate colors          |"_ch_chp7
X:chp7"p        rotate color palette   |"_ch_chp8
X:chp8"r        redisplay              |"_ch_chp9
X:chp9"q        quit                   |"_ch_chpa
X:chpa"-----------------[Press ENTER]--+"_ch
X:chelp'0_hpos!_chp1 w?x
X:csrot_cseed?\+'3/sx_cseed!
X:cprot_cpal?\+'5/sx_cpal!
X:cquit we.q
X:cmi dki=[x_czin;x_chelp]
X:cmuk dkK=[x_cpfup;_cmi]
X:cmuj dkJ=[x_cpfdn;_cmuk]
X:cmuh dkH=[x_cpfle;_cmuj]
X:cmul dkL=[x_cpfre;_cmuh]
X:cmk dkk=[x_cpup;_cmul]
X:cmj dkj=[x_cpdn;_cmk]
X:cmh dkh=[x_cple;_cmj]
X:cml dkl=[x_cpre;_cmh]
X:cmr dkr=[xws;_cml]
X:cmq dkq=[x_cquit;_cmr]
X:cmo dko=[x_czout;_cmq]
X:cmc dkc=[x_csrot;_cmo]
X:cmp dkp=[x_cprot;_cmc]
X:cm4 dk.=[x'10_cdepth;_cmp]
X:cm3 dk,=[x'10%_cdepth;_cm4]
X:cm2 dk>=[x'100_cdepth;_cm3]
X:cm1 dk<=[x'100%_cdepth;_cm2]
X:pr ttww_buf_itos.ww
X:info knwa'0_h.wm"Pos: "_cx?_pr"/"_cy?_pr"  Zoom: "_dn?_pr_in2
X:in2  "  Depth: "_d?_pr"  Color: "_cpal?_pr"/"_cseed?_pr.wl
X`'1{_mandel_info.w?_cm1}
EOF-cmandel.u
echo x - prog/csum.u
sed -e 's/^X//' >prog/csum.u <<'EOF-csum.u'
Xg| useless example program: Unix sum(1); by NMH; in the PD |
X
Xg! Usage: ls files | csum >sumfile                         !
Xg!        csum -u <sumfile >newfile                        !
X
X'1'15\<nhb        '( high bit )
X'32767'1\<'1|nab  '( all bits )
X'vbytes 'vblks    '( byte/block counters )
X'vbuf_tbl'128a    '( line buffer )
X'vbk              '( buffer length )
X:sum d'1&[_hb;'0]s'1\>|+_ab&
X:size0'0d_bytes!_blks!
X:count'1_bytes\!_bytes?'1023>['0_bytes!'1_blks\!]
X:filesum_size0'0`f?f@{s_sum_count}x_blks?_bytes?[\+]
X:print sf," "fwf," "fw_buf_bk?fw_nl
X:make`_buf'128_getl.f@{_bk!_buf_bk?fi_filesum""fi_print}x
X:testfile ooft[_testfil2;fefw": not found"fw_nl""fo]
X:testfil2 f>ttfi_filesum""fitf<_compare
X:compare oo_print_2eq#[fe_buf_bk?fw": wrong sum"fw_nl""fo]
X:test`f'f'f?x_buf'128_getl.f@{_bk!_buf_bk?_testfile}xxx
X'0m"-u"_seql[_test;_make]q
EOF-csum.u
echo x - prog/csum.uw
sed -e 's/^X//' >prog/csum.uw <<'EOF-csum.uw'
X:sum'( n1 n2 -- n3 : add n1 to checksum n2 )
X:size0'( reset block counter )
X:count'( increment block counter )
X:filesum'( -- n1 n2 : calculate csum n1 + length n2 from input )
X:print'( n1 n2 -- : print record "n1 n2 filename<NL>" )
X:make'( read file names, write checksum records )
X:testfile'( n1 n2 s -- : test csum: n1=sum, n2=len, s=file )
X:testfil2'( n1 n2 s -- )
X:compare'( n1 n2 n3 n4 -- <01> : compare csum records )
X:test'(  -- : read csum recs, write updated recs and messages )
EOF-csum.uw
echo x - prog/echo.u
sed -e 's/^X//' >prog/echo.u <<'EOF-echo.u'
X'[ useless example program: Unix echo(1) ]
X
X'0`dmd{'3p[_bl]fw\+}xxx_nl.q
X
EOF-echo.u
echo x - prog/guess.u
sed -e 's/^X//' >prog/guess.u <<'EOF-guess.u'
X'( useless example program: number guessing )
X
X'vdgs           '( digits )
X'vnum_tbl'5a    '( number to guess )
X'vguess_tbl'5a  '( current guess )
X'1vtries        '( try counter )
X:ckdgs2 d'5>["Too many, sorry!"fw_nl'1;'0]
X:ckdgs d'2<["Come on!"fw_nl'1;_ckdgs2]
X:getdgs"How many digits? "fwff f'f@#[_nl.q]_ckdgs
X:split'5(o'10/sxk0+ob! s'10/xs\+)xx
X:count'0s_dgs?(_num\-i+b?o=[s\+s])x
X:dups_dgs?(_num\-i+b?_count'1>[rx'1y])'0
X:mknum`'10_dgs?_pow_rnd_num_split_dups{}
X:init`_getdgs{}_dgs!_mknum
X:prompt'10_bls"["fw_tries?f,"] "fw'13f!ff
X:evdgs'0_dgs?(_guess\-i+b?_count[\+])
X:evpl'0_dgs?(_num\-i+b?_guess\-i+b?=[\+])
X:prnum_dgs?+\-_dgs?(db?f!\-)x
X:eval_evdgs_evpl'1_tries\!
X:vtup'27f!"[A"fw
X:print_vtup_guess_prnum_bl.f,_bl.f,_nl
X:prtries"("fw_tries?\-f," tries)"fw
X:giveup_num_prnum" - gave up "fw_prtries_nl.q
X:try_prompt f'f@#[_giveup]_guess_split_eval_print
X:gotit"Got it! "fw_prtries_nl
X_init`_try_evpl_dgs?=#{}_gotit.q
EOF-guess.u
echo x - prog/hlite.u
sed -e 's/^X//' >prog/hlite.u <<'EOF-hlite.u'
Xg| useless syntax highlighter; By NMH; in the PD |
Xg| Usage: hlite <infile.u >outfile.html          |
X
X"rwp.u"l
X'vsb_tbl'64a
X'vsk
X:ss_ssave.xx
X'vprelude_tbl
X "<HTML>"_ss
X "<HEAD>"_ss
X "<STYLE>"_ss
X "PRE.u  {color: #c0c0c0; background: #000000; }"_ss
X "SPAN.c {color: #00a0a0; background: #0000a0; }"_ss
X "SPAN.l {color: #00c0ff; background: #000000; }"_ss
X "SPAN.s {color: #c0c000; background: #000000; }"_ss
X "SPAN.d {color: #40ff40; background: #000000; }"_ss
X "SPAN.r {color: #c0c0c0; background: #a00000; }"_ss
X "SPAN.e {color: #c0c0c0; background: #0000a0; }"_ss
X "SPAN.f {color: #ff40ff; background: #000000; }"_ss
X "</STYLE>"_ss
X "</HEAD>"_ss
X "<BODY>"_ss
X "<PRE class=u>"_ss
X '0,
X:prlst`db?{ddb?_snext.fw_nl.db?+}x
X:head_prelude_prlst
X:tail"</PRE>"fw_nl_tl2
X:tl2"</BODY>"fw_nl"</HTML>"fw_nl
X:b"<SPAN class="fwf!">"fw
X:e"</SPAN>"fw
X:semi k;f!
X:h4 d'1%=[x;f!]
X:h3 dk&=["&amp"fwx_semi;_h4]
X:h2 dk>=["&gt"fwx_semi;_h3]
X:h  dk<=["&lt"fwx_semi;_h2]
X:strchr k"=#f@&
X:symchr d_calpha.s_cnum|
X:cpstr`d_strchr{_h.f?}
X:cpnum`d_cnum{_h.f?}
X:cp2ch`f?oo=#f@&{_h}_h.xf?
X:cpcom s_h")]}"x+b?_cp2ch
X:cpsym_getsym_sb_sk?fw
X:getsym'0_sk!`d_symchr{_sb_sk?+b!'1_sk\!f?}
X:prtsym_getsym_sb_sk?_rwp[kf;ks]_b_sb_sk?fw_e
X:pcomment kc_b d"([{"tbs.d'1%=#[_cpcom;x]_e
X:gcomment kc_b d_h_cp2ch_e
X:oper_h.f?
X:number d_cnum[kl_b_cpnum_e;_oper]
X:string dk"=[_h.f?kl_b_cpstr_e_h.f?;_number]
X:char dkk=[_h.f?kl_b.f!_e.f?;_string]
X:symbol d"_@"tbs'1%=#[_h.f?_prtsym;_char]
X:escape d"\rfbw"tbs'1%=#[ke_b_h.f?_h.f?_e;_symbol]
X:ctrl d"`([{;}])"tbs'1%=#[kr_b_h.f?_e;_escape]
X:defn d":vn"tbs'1%=#[_h.f?kd_b_cpsym_e;_ctrl]
X:commnt2 dkg=[_h.f?_gcomment;_defn]
X:comment dk'=[_h.f?_pcomment;_commnt2]
X_head.f?`f@{_comment}_tail.q
EOF-hlite.u
echo x - prog/hlitew.u
sed -e 's/^X//' >prog/hlitew.u <<'EOF-hlitew.u'
Xg| useless syntax highlighter; By NMH; in the PD |
Xg| Usage: hlitew [-ew] [file] >outfile.html      |
Xg|        -e = embeddable HTML                   |
Xg|        -w = include meta commends (req. file) |
X
Xg| This version of the syntax highlighter embeds |
Xg| meta information from a shadow file (if any)  |
Xg| as CSS pop-ups.                               |
X
X"rwp.u"l
X'vsb_tbl'64a     '( symbol buffer )
X'vsk             '( sb length )
X'vsname_tbl'64a  '( source name )
X'vsnk            '( sname length )
X'vmbuf_tbl'64a   '( meta buffer )
X'vmk             '( mbuf length )
X'0vometa         '( option: include meta comments )
X'0voembed        '( option: generate embeddable HTML )
X:ss_ssave.xx
X'vprelude_tbl
X "<HTML>"_ss
X "<HEAD>"_ss
X "<STYLE>"_ss
X "PRE.u  {color: #c0c0c0; background: #000000; }"_ss
X "SPAN.c {color: #00a0a0; background: #0000a0; }"_ss
X "SPAN.l {color: #00c0ff; background: #000000; }"_ss
X "SPAN.s {color: #c0c000; background: #000000; }"_ss
X "SPAN.d {color: #40ff40; background: #000000; }"_ss
X "SPAN.r {color: #c0c0c0; background: #a00000; }"_ss
X "SPAN.e {color: #c0c0c0; background: #0000a0; }"_ss
X "SPAN.f {color: #ff40ff; background: #000000; }"_ss
X "PRE.u SPAN.d A SPAN.m {"_ss
X "  color: #000000; background: #c0c0c0; display: none; }"_ss
X "PRE.u SPAN.d A:hover SPAN.m {"_ss
X "  display: block; position: absolute; left: 2em; }"_ss
X "</STYLE>"_ss
X "</HEAD>"_ss
X "<BODY>"_ss
X '0,
X:bpre"<PRE class=u>"fw_nl
X:prlst`db?{ddb?_snext.fw_nl.db?+}x
X:head_oembed?#[_prelude_prlst]_bpre
X:tail"</PRE>"fw_nl_tl2
X:tl2_oembed?#["</BODY>"fw_nl"</HTML>"fw_nl]
X:ba"<A>"fw
X:ea"</A>"fw
X:b"<SPAN class="fwf!">"fw
X:e"</SPAN>"fw
X:semi k;f!
X:h4 d'1%=[x;f!]
X:h3 dk&=["&amp"fwx_semi;_h4]
X:h2 dk>=["&gt"fwx_semi;_h3]
X:h  dk<=["&lt"fwx_semi;_h2]
X:strchr k"=#f@&
X:symchr d_calpha.s_cnum|
X:cpstr`d_strchr{_h.f?}
X:cpnum`d_cnum{_h.f?}
X:cp2ch`f?oo=#f@&{_h}_h.xf?
X:cpcom s_h")]}"x+b?_cp2ch
X:cpsym_getsym_sb_sk?fw
X:getsym'0_sk!`d_symchr{_sb_sk?+b!'1_sk\!f?}
X:prtsym_getsym_sb_sk?_rwp[kf;ks]_b_sb_sk?fw_e
X:pcomment kc_b d"([{"tbs.d'1%=#[_cpcom;x]_e
X:gcomment kc_b d_h_cp2ch_e
X:oper_h.f?
X:number d_cnum[kl_b_cpnum_e;_oper]
X:string dk"=[_h.f?kl_b_cpstr_e_h.f?;_number]
X:char dkk=[_h.f?kl_b.f!_e.f?;_string]
X:symbol d"_@"tbs'1%=#[_h.f?_prtsym;_char]
X:escape d"\rfbw"tbs'1%=#[ke_b_h.f?_h.f?_e;_symbol]
X:ctrl d"`([{;}])"tbs'1%=#[kr_b_h.f?_e;_escape]
X:defn d"vn"tbs'1%=#[_h.f?kd_b_cpsym_e;_ctrl]
X'( ----- shadow file reader )
X:shfile_sname_snk?
X:cmpdef_sb_sk?_mbuf_mk?_snext.xo_seql_sk?_mbuf+\+b?k'=&
X:srchmeta fi`_mbuf'64_getl.f@{_mk!_cmpdef['1y]}x'0d_mk!""fi
X'( ----- )
X:fwhtml d(oo+i-b?_h)xx
X:prtmeta[km_b_mbuf_sk?+\+_mk?_sk?-\-_fwhtml_e]
X:addmeta_shfile.ooft[f>r>_srchmeta_prtmeta.r<f<;xx]
X:defr dk:=[_routine;_defn]
X:routine_ometa?[_incmeta;_skipmeta]
X:skipmeta_h.f?kd_b_cpsym_e
X:incmeta_h.f?kd_b_ba_cpsym_addmeta_ea_e
X:commnt2 dkg=[_h.f?_gcomment;_defr]
X:comment dk'=[_h.f?_pcomment;_commnt2]
X:open oofi_sname_scopy.d_snk!"w"_sappnd_snk!x
X:setopt  dke=[x'1_oembed!;_setopt2]
X:setopt2 dkw=[x'1_ometa!;_usage]
X:usage xfe"Usage: hlitew [-ew] [file ...]"fw_nl\q
X:scanopts`_snext.d{ob?_setopt}xx
X:getopts'0`dmd{ob?k-=[_scanopts;xxy]\+}xx
X:hlite_head.f?`f@{_comment}._tail.q
X_getopts.dmsx#[x_hlite;`dmd{_open_hlite""fi}xx]
EOF-hlitew.u
echo x - prog/keks.u
sed -e 's/^X//' >prog/keks.u <<'EOF-keks.u'
X'( useless example program: electronic fortune cookie )
X'( usage: keks file )
X
X:cnl'10=[\+]
X:lines fi'0`f?f@{_cnl}x""fi
X:line  fi'0`f?f@{r>oo=[if!]r<_cnl}xxx""fi
X'0m_lines.d[_rnd]'0m_line.q
EOF-keks.u
echo x - prog/mandel.u
sed -e 's/^X//' >prog/mandel.u <<'EOF-mandel.u'
X'( useless example program: ASCII Mandelbrot explorer )
X
X"vt100.u"l
X'240vrmax           '( max. x resolution )
X'79vw '47vh         '( width, height )
X'20%vcx             '( x offset )
X'0vcy               '( y offset )
X'10000nS _S'2*n2S   '( zoom, numerator )
X_S'500/xvdn         '( zoom, denominator )
X'vbuf_tbl_rmax?\+a  '( line buffer )
X'vcmd_tbl'80a       '( command buffer )
Xg! printing chars: lower, empty, full, upper !
X'vcset_tbl         kmb,   k b,   kMb,  k"b,
X'vx 'vy    '( current coordinates )
X'vcr 'vci  '( c real, imag )
X'vzr 'vzi  '( z real, imag )
X'vir       '( intermediate )
X'100vd     '( iteration depth )
X'1ve       '( even line flag )
X'vdraw     '( draw flag )
X:init_y!_x! '0_zr!'0_zi! _x?_S_dn?/x*_cr! _y?_S_dn?/x*_ci!
Xg! z(n+1) = z(n) * z(n) + c !
X:calcir_zr?d*_S/x _zi?d*_S/x- _ir!
X:calczi_zr?_zi?*_S/x _zi?_zr?*_S/x+ _ci?+ _zi!
X:calczr_cr?_ir?+_zr!
Xg! |z| > 2+2i !
X:test_zi?_2S>._zr?_2S>|_zi?_2S%<|_zr?_2S%<|
X:iter_calcir_calczi_calczr
X:f_init_d?(_iter_test[rx'0y])'1
X:print_w?(_buf_w?\+i-+b?_cset+b?f!)_nl
X:orow_w?(di_w?'2/x-_cx?+s_f#_buf.i+b!)x
X:erow_w?(di_w?'2/x-_cx?+s_f_buf.i+b?'1\<|_buf.i+b!)x_print
X:row_e?[_orow;_erow]_e?#_e!
X:cpos _vtclreol"g "fw_cx?f,_bl_cy?f,_bl_dn?f,_bl_d?f,_cpos2
X:cpos2_bl_w?f,_bl_h?f,
X:mandel'1_e!_h?(_h?d'2/x-.i-_cy?+_row)
X:getcmd'13f!_vtclreol"> "fwff_cmd'79_getl_cmd.s
X:get1a_snext_sskipw.oo_stoi
X:get2a_get1a.tt'32_sskipto_sskipw.oo_stoi.r>tr<
X:nxt1a'32_sskipto_get1a
X:nxt2a'32_sskipto_get2a
X:non0 o#o#&#
X:cgo_get2a_cy!_cx!_nxt1a.d'0=#[_dn!;xy]_cgo2
X:cgo2_nxt1a.d'0=#[_d!;xy]_nxt2a_non0[_h!_w!_vtclr;xx]
X:csize_get2a_h!_w!_vtclr
X:cdepth_get1a_d!
X:zin'5*'4/x
X:zout'4*'5/x
X:czin _cx?_zin_cx! _cy?_zin_cy! _dn?_zin_dn!
X:czout _dn?_zout.d'5<[xy]_dn! _cx?_zout_cx! _cy?_zout_cy!
X:cpanx_get1a_w?'4/x*_cx\!
X:cpany_get1a_h?'4/x*_cy\!
X:csave_snext_sskipw.oofo_cpos_nl_mandel""fo'0_draw!_vtup
X:chelp"io        zoom in/out"fw_nl_chp1
X:chp1 "x n       pan right (n) or left (-n)"fw_nl_chp3
X:chp3 "y n       pan down (n) or up (-n)"fw_nl_chp4
X:chp4 "s f       save canvas to file f"fw_nl_chp5
X:chp5 "r         redraw"fw_nl_chp6
X:chp6 "c wh      set canvas size to width w, height h"fw_nl_chp7
X:chp7 "d n       set iteration depth"fw_nl_chp8
X:chp8 "g xyzwhd  go to position x/y, zoom z,"fw_chp9
X:chp9 " screen size w*h,"fw_nl_chpa
X:chpa "          depth d (z,w,h,d may be omitted)"fw_nl_chpb
X:chpb "q         quit"fw_nl_chpc
X:chpc _vtso"Press ENTER"fw_vtse_cmd'79_getl
X:err_vtclreol_vtso"Type 'h' for help"fw_vtse_vtup'0_draw!
X:cmi ob?ki=[_czin;_err]
X:cmy ob?ky=[_cpany;_cmi]
X:cmx ob?kx=[_cpanx;_cmy]
X:cms ob?ks=[_csave;_cmx]
X:cmr ob?kr=[_vtclr;_cms]
X:cmq ob?kq=[_vtup_quit;_cmr]
X:cmo ob?ko=[_czout;_cmq]
X:cmg ob?kg=[_cgo;_cmo]
X:cme ob?kd=[_cdepth;_cmg]
X:cmc ob?kc=[_csize;_cme]
X:cmh ob?dkh=sk?=|[_chelp;_cmc]
X:cm0 d[_cmh]
X:quit_nl_vtclreol.q
X:redraw_mandel_nl_cpos_vtup
X:eval_sskipw '1_draw! f@[_cm0.xx;_quit] _draw?[_vthome_redraw]
X:repl_vtclr_redraw`'1{_getcmd_eval}
X_repl.q
EOF-mandel.u
echo x - prog/maze.u
sed -e 's/^X//' >prog/maze.u <<'EOF-maze.u'
Xg| Generate random mazes                                |
Xg| Usage: maze [[no] [width height]]                    |
Xg|                                                      |
Xg| Based on a C program that I have once found in a     |
Xg| USENET news signature. Thanks to the unknown hacker! |
X
X'10000nnmaze              '( max mazes )
X'8192nk                   '( max. maze size )
X'va_tbl_k.ca _a_k.c'0bf   '( maze array )
X'79vw '23vh               '( maze width, height )
X_w?_h?*vz                 '( actual array length )
X'11nlen                   '( max len. of a corridor / 2 )
X'1vd                      '( direction )
X_nmaze_rnd.vr             '( seed )
X_r?vno                    '( maze no )
X'( maze generator )
X:up   _w?'2*>       [_w?%;'0 ]
X:down _z?_w?'2*-<   [_w? ;'0 ]
X:right_w?/sx._w?'2-=['0  ;'1 ]
X:left _w?/sx.'1=    ['0  ;'1%]
X'vdirs_tbl@up,@down,@right,@left,
X:rand_r?'57*\+_r! _r?'7/x'3&
X:setdir d_dirs_rand.c+?e_d!
X:move1_d?+ _d?.oc_a+!
X:dest_d?'2*+c_a+
X:move_d?##.o_dest?#&[_move1_move1]
X:backup dc_a+?'2*-
X:corr_len(_setdir_move)
X:genmaze_w?\+`d_w?\+=#._d?##|{_corr_backup}x
X:pos0_a_w?c+'1c+
X:posn_a_z?c+_w?c-'2c-
X:solvable_pos0?##_posn?##&
X:reset_a_k.c'0bf _w?_h?*_z! '1_d!
X:seed_nmaze_rnd.d_r!_no!
X:maze`_genmaze_solvable#{_reset_seed}
X'( maze printer )
X:next\-_w?/sx#[_nl]
X:print_no?f,_nl_z?dr>(_a.ji-c+?[k ;k#]f!i_next)rx
X'( command line options )
X:setup_reset_z?_k>["too big!"fw_nl.q]
X:adjust d'2/sx#[\-]d'0<[%]d'5<[x'5]
X:narg'0`dmsx{\+}
X:getno m_ston.d_r!_no!
X:getgeom dm_ston_adjust_w!\+m_ston_adjust_h!
X:opt0_narg'0=[;_opt1]
X:opt1_narg'1=['0_getno;_opt2]
X:opt2_narg'2=['0_getgeom;_opt3]
X:opt3_narg'3=['0_getno'1_getgeom;_usage]
X:usage fe"Usage: maze [[no] [width height]]"fw_nl.q
X_opt0_setup_maze_print.q
EOF-maze.u
echo x - prog/maze.uw
sed -e 's/^X//' >prog/maze.uw <<'EOF-maze.uw'
X:up'( p -- d : move up )
X:down'( p -- d : move down )
X:right'( p -- d : move right )
X:left'( p -- d : move left )
X:setdir'( p -- p : set new direction )
X:move1'( p -- p : move and register direction in map )
X:dest'( p -- a : destination of next move )
X:move'( p -- p : perform move if possible )
X:rand'( -- n : get random direction via LFR )
X:backup'( p -- p : backtrack to previous position )
X:corr'( p -- p : draw a continuous corridor )
X:genmaze'( -- : generate [note necessarily solvable] maze )
X:pos0'( -- a : starting cell address )
X:posn'( -- a : destination cell address )
X:reset'( -- : reset parameters )
X:solvable'( -- f : is this maze solvable? )
X:maze'( -- : generate a solvable maze )
X:next'( -- : emit newline at end of row )
X:print'( -- : print maze )
X:setup'( -- : setup parameters and check size )
X:adjust'( n1 -- n2 : make sure a number is odd and >=5 )
X:narg'( -- n : number of command line args )
X:getno'( n -- : extract maze number argument )
X:getgeom'( n -- : extract maze geometry arguments )
X:opt0'( -- : no args? fine. )
X:opt1'( -- : one arg - get maze no )
X:opt2'( -- : two args - get geometry )
X:opt3'( -- : three args - get maze no and geometry )
X:usage'( -- : print usage and quit )
X:seed'( -- : generate new PRNG seed )
EOF-maze.uw
echo x - prog/primes.u
sed -e 's/^X//' >prog/primes.u <<'EOF-primes.u'
X'( useless example program: sieve of eratosthenes )
X
X'10000nk
X'vprimes_tbl_k.ca
X'0vi
X:test_i?(d_primes_i?i-c+?/sx#[rxx'0y])x'1
X:eject_i?\+'8/sx#[_nl]
X:add.d'8_pfn.ff_primes_i?c+!'1_i\!_eject
X:sieve'2'8_pfn'3`_i?'3p<{d_test[d_add]'2+}xx
X'0m_ston.d_k>[x"too big"fefw;_sieve]_nl.q
EOF-primes.u
echo x - prog/prompt.u
sed -e 's/^X//' >prog/prompt.u <<'EOF-prompt.u'
Xg| useless library: line editor (prompt); NMH; in the PD |
Xg| usage: buf len max x y_prompt -- buf len <01>         |
Xg| "false" result flag indicates aborted input           |
X
X'vpx  'vpy  'vpk   '( prompt x/y, max. length )
X'vpb  'vpn  'vpi   '( prompt buffer, length, index )
X'vpd               '( prompt default flag )
X:prcd wo#[kbwa;'3'0wc]'1_pd!
X:prcn wo#[knwa;'7'0wc]'0_pd!
X:prclear_prcn'0d_pn!_pi!_px?_py?wmwl
X:prcldfl_pd?[_prclear]
X:prline_px?_py?wm_pb?_pn?ww.k w!
X:prins_pn?_pk?<[_prcldfl_prins2;xwb]
X:prins2_pb?_pi?+d\+_pk?_pi?\+-bm _pb?_pi?+b! '1_pi\!'1_pn\!
X:prbs_pi?'0>['1%_pi\!_prbs2;wb]
X:prbs2_pb?_pi?+d\+s_pk?_pi?\+-bm k _pb?_pn?+b! '1%_pn\!
X:prdelc_pi?_pn?<[_prright_prbs]
X:prleft_pi?['1%_pi\!]
X:prright_pi?_pn?<['1_pi\!]
X:prclr d'21=[x_prclear;_prins]
X:preol d'5=[x_pn?_pi!;_prclr]
X:prdel d'4=[x_prdelc;_preol]
X:prbol d'1=[x'0_pi!;_prdel]
X:prcri d_wkri[x_prright;_prbol]
X:prcle d_wkle[x_prleft;_prcri]
X:prcmd d_wkbs[x_prbs;_prcle]_prcn
X:prxkey d'13=o'7=|s_wkbs_pn?#&|
X:prretn_pb?_pn?t'13=
X:predit`_prline_px?_pi?+_py?wmw?d_prxkey#{_prcmd}_prretn
X:prompt_py!_px!_pk!d_pi!_pn!_pb!_prcd_predit
EOF-prompt.u
echo x - prog/queens.u
sed -e 's/^X//' >prog/queens.u <<'EOF-queens.u'
X'( useless example program: N-Queens sequence )
X
X'100nqmax        '( max. queens )
X'8vsize          '( board size; <= qmax )
X'vq_tbl_qmax.ca  '( queens array )
X'0vnq            '( number of queens )
X'0vns            '( number of solutions )
X'0vnt            '( number of tries )
X:horizp_size?/xs_size?/x=
X:vertp_size?/sxs_size?/sx=
X:diagp_size?/t_size?/ t-_abs.tt-_abs=
X:sharedp oo_horizp[xx'1y]oo_vertp[xx'1y]_diagp
X:safep_nq?(i\-c_q+?o_sharedp[rxx'0y])x'1
X:next_size?+_size?/x_size?*
X:back_nq?'0<[y]'1%_nq\!x_nq?c_q+?_try
X:try\+d_size?/sx#[_back]
X:put d_nq?c_q+!'1_nq\!_next
X:register_nq?_size?=['1_ns\!_back]
X:qns`_nq?'0<#{d_safep[_put_register;_try]'1_nt\!}
X:queens_size!'0_nq!'0_ns!'0_nt!'0_qns_ns?
X:print t'2_pfn.s'7_pfn'11_pfn_nl
X" Q    Sol      Steps"fw_nl
X"-- ------ ----------"fw_nl
X'0m_ston.dr>(ji-\+_queens.ji-\+s_nt?_print)rx.q
EOF-queens.u
echo x - prog/queens.uw
sed -e 's/^X//' >prog/queens.uw <<'EOF-queens.uw'
X:horizp'( n1 n2 -- f : are n1 and n2 in the same row? )
X:vertp'( n1 n2 -- f : are n1 and n2 in the same column? )
X:diagp'( n1 n2 -- f : are n1 and n2 in the same diagonal line? )
X:sharedp'( n1 n2 -- f : share n1 and n2 a common line? )
X:safep'( n -- f : is n a safe place on the current board? )
X:next'( n1 -- n2 : advance to first row of next column )
X:back'( n1 -- n2 : backtrack to last valid configuration )
X:try'( n -- n : try this position, backtrack beyond top row )
X:put'( n -- n : place a queen on the board, advance )
X:register'( --  :when solved, count solution and backtrack )
X:qns'( n1 -- n2 : count N1-queens solutions (main loop)
X:queens'( n1 -- n2 : main program (setup and run)
X:print'( n s t -- : print N, # of Solutions, and sTeps taken )
EOF-queens.uw
echo x - prog/rot13.u
sed -e 's/^X//' >prog/rot13.u <<'EOF-rot13.u'
X'( useless example program: rot13 )
X
X:rot13u dkAkZ_in[kA-'13+'26/sxkA+]
X:rot13  dkakz_in[ka-'13+'26/sxka+;_rot13u]
X'0`dmd{'3p[_bl]_ssave@rot13_smap.fw\+}xx[_nl].q
EOF-rot13.u
echo x - prog/rwp.u
sed -e 's/^X//' >prog/rwp.u <<'EOF-rwp.u'
X'( useless library: reserved word predicate; NMH; in the PD )
X
X:ss_ssave.xx
X'vrw_tbl              '( reserved words table )
X  "2eq"_ss
X  "2o"_ss
X  "2s"_ss
X  "abs"_ss
X  "align"_ss
X  "bl"_ss
X  "bls"_ss
X  "calnum"_ss
X  "calpha"_ss
X  "clowc"_ss
X  "clower"_ss
X  "cnum"_ss
X  "copy"_ss
X  "cupc"_ss
X  "cupper"_ss
X  "dump"_ss
X  "fac"_ss
X  "getl"_ss
X  "in"_ss
X  "itos"_ss
X  "max"_ss
X  "min"_ss
X  "nl"_ss
X  "ntos"_ss
X  "pad"_ss
X  "pfn"_ss
X  "pfs"_ss
X  "pow"_ss
X  "pr16"_ss
X  "pr32"_ss
X  "pr64"_ss
X  "pr8"_ss
X  "rbs"_ss
X  "rnd"_ss
X  "s"_ss
X  "sappnd"_ss
X  "scopy"_ss
X  "seql"_ss
X  "sfind"_ss
X  "smap"_ss
X  "smem"_ss
X  "snext"_ss
X  "sprev"_ss
X  "srev"_ss
X  "srfind"_ss
X  "ssave"_ss
X  "sskipto"_ss
X  "sskipw"_ss
X  "stoi"_ss
X  "ston"_ss
X  "suntrail"_ss
X  "sxlate"_ss
X  "tbl"_ss
X  "wkbs"_ss
X  "wkdn"_ss
X  "wkle"_ss
X  "wknp"_ss
X  "wkpp"_ss
X  "wkri"_ss
X  "wkup"_ss
X  '0b,
X:rwp_rw`db?{db?os_snext'5p'5p_seql[xxx'1y]db?+}xxx'0
EOF-rwp.u
echo x - prog/shar.u
sed -e 's/^X//' >prog/shar.u <<'EOF-shar.u'
Xg| useless program: simple shell archiver      |
Xg|                                             |
Xg| Usage: shar [-d dir] file ...               |
Xg|                                             |
Xg| The resulting shell archive will be written |
Xg| to stdout. When -d dir is specified, files  |
Xg| will be extracted to the given directory.   |
X
X'0vfiles    '( first file argument )
X'0vdir      '( directory to extract to )
X:echo oo"echo x - "fw_path.fw_nl
X:path_dir?[_dir?db?_snext.fw"/"fw]
X:sed"sed -e 's/^X//' >"fw_path.oofw" <<'EOF-"fwoofw"'"fw_nl
X:eof"EOF-"fwoofw_nl
X:copylns'1`f?f@{s[kXf!]d'10=sf!}xx
X:readfile oofi_copylns""fi
X:add_echo_sed_readfile_eof xx
X:mkdir_dir?["mkdir "fw_dir?db?_snext.fw" || exit 1"fw_nl]
X:ss_ssave.xx
X'vhdr_tbl"#!/bin/sh"_ss
X         ""_ss
X         "# This is a shell archive."_ss
X         "# To extract it, feed it to /bin/sh."_ss
X         "# It will create the following files:"_ss
X         "#"_ss
X         '0,
X:prlst`db?{ddb?_snext.fw_nl.db?+}x
X:listfl"#"fw'9f!_path.fw_nl
X:listfls_files?`dmd{_listfl\+}xxx_nl
X:head_hdr_prlst_listfls
X:tail"exit 0"fw_nl"#----- end of archive -----#"fw_nl
X:shar_head_mkdir_files?`dmd{_add\+}xxx_tail
X:getopt'0m"-d"_seql['1m_ssave.x\-_dir!'2_files!]
X_getopt_shar.q
EOF-shar.u
echo x - prog/sound.u
sed -e 's/^X//' >prog/sound.u <<'EOF-sound.u'
X'( useless example program: 80's space toy sounds )
X
X'vlow_tbl'100a
X'vhigh_tbl'100a
X:setvol d_low'100t'127+bf _high'100t'127s-bf
X:tick _high.ofw_low.sfw
X'30_setvol
X:beep"/dev/dsp"fo'50(i'5/x_tick)""fo
X'10(i'25*_setvol_beep).q
EOF-sound.u
echo x - prog/ucx.u
sed -e 's/^X//' >prog/ucx.u <<'EOF-ucx.u'
Xg| a useless compiler examination tool; by NMH; in the PD |
X
X:cat`f?f@{f!}
X:cfile'0mh_scopy".c"_sappnd
X:start`h'128_getl.f@{hs"/* START */"_seql[xy]}x
X:end`h'128_getl.f@{hso"default:"x'8bc#[xxy]fw_nl}x
X:extract_cfile.fi_start_end""fi
X:cleanup'0mfx_cfile.fx
X'0msx#["file name required!"fefw_nl.q]
X'0mfo_cat""fo"uo1.u"l_extract_cleanup.q
EOF-ucx.u
echo x - prog/ue.hlp
sed -e 's/^X//' >prog/ue.hlp <<'EOF-ue.hlp'
X-- MOVE CURSOR ---------------______   -- INSERT ---     -- MISC -----
X%h% %j% %k% %l% left/down/up/right       %A% __  app at EOL    %^G%  info
X%w%______       next word                %I% __  ins at BOL    %^L%  refresh
X%^B% %^F%____   prev/next page           %J% __  join lines    %ZZ%  save+exit
X%0% %^% %$%__   BOL/1st/EOL              %O% __  open above    %=%   syntax hl
X%#G% %G%____    line#/bottom             %a% __  append        %v%   view meta
X%H% %L%____     top/bot of scr           %i% __  insert        %V%   edit meta
X-- MARK ----------------------  ________ %o% __  open below    %zCR% zero line
X%mm%  set mark/cmark (mk/cmk)   ______   %r% __  repl char
X%'m%  goto mk (line)            ______   %R% __  repl chars
X%`m%  goto cmk (line/col)       ______   %<% %>% out/indent 
X-- DELETE, YANK, PASTE --------------------------  -- SEARCH ---
X%X%  backspace    %dd%  del line    %yy%   yank line     %/% search
X%x%  del char     %dw%  del word    %yw%   yank word     %?% search bw
X%D%  del to EOL   %d'm% del to mk   %y'm%  yank to mk    %N% search prev
X%Y%  yank to EOL  %d`m% del to cmk  %y`m%  yank to cmk   %n% search next
X%p%  paste after  %P%   paste bfr.  %d/y0% del/ynk to 0
X-- COLON COMMANDS ----------------------------------------------
X%:e file%  edit file     %:r file%   read file      %:q%  quit
X%:n name%  rename file   %:wCR%      save file      %:h%  help (this)
X%:s o n%   find + repl   %:wr file%  write region   %^G% = cancel
EOF-ue.hlp
echo x - prog/ue.u
sed -e 's/^X//' >prog/ue.u <<'EOF-ue.u'
Xg| a useless editor; By NMH; in the PD |
Xg| todo: b                             |
X
X:ynkfile"ue.ynk"
X:tmpfile"ue.tmp"
X:hlpfile"ue.hlp"
X:hlpfil2"/u/bin/ue.hlp"
X'64nstrl              '( max. string/path length )
X'500nmaxln            '( max. lines in buffer )
X'vbuf_tbl'64_maxln*a  '( text buffer )
X'vesize               '( lines in buffer )
X'veoff                '( top line in display )
X'vex 'vey             '( cursor column, line )
X'1%vemx '1%vemy       '( mark column, line )
X'vycols               '( yank: column mode )
X'0vyanked             '( yanked lines / columns )
X'1vesh                '( syntax highlighting flag )
X'vdelynk              '( delete after yank flag )
X'vename_tbl_strl.a    '( file name, buffer )
X'0venk                '( file name, length )
X'vsname_tbl_strl.a    '( shadow file name, buffer )
X'vsnk                 '( shadow file name, length )
X'vmbuf_tbl_strl.a     '( meta info, buffer )
X'vmk                  '( meta info, length )
X'vmwrt                '( meta info, write flag )
X'vgnbuf_tbl_strl.a    '( generic name, buffer )
X'0vgnk                '( generic name, length )
X'vsrbuf_tbl_strl.a    '( search text, buffer )
X'0vsrk                '( search text, length )
X'vrpbuf_tbl_strl.a    '( replace  text, buffer )
X'0vrpk                '( replace  text, length )
X'vgpbuf_tbl_strl.a    '( gen. purpose buffer, data )
X'vgpk                 '( gen. purpose buffer, length )
X'vrpn   'vrps         '( :s replace/skip counters )
X'vemsg  'vemk         '( message buffer, length )
X'vergn                '( end of region for :s )
X'vmo                  '( modified flag )
X'vro                  '( read-only flag )
X'vpfx                 '( prefix for G command )
X'vbp 'vbk             '( hlite buffer, length )
X'vbc                  '( current hlite char )
X'vsb_tbl_strl.a 'vsk  '( symbol name, buffer, len )
X"rwp.u"l
X"prompt.u"l
X'( syntax highlighter )
X:f_bk?'0<#
X:g_f[_bp?_bc?+b?'1_bc\!'1%_bk\!;'0]
X:mono wo#
X:e_mono[knwa;'7'0wc]
X:kcb_mono[;'0'6wc]
X:kdb_mono[krwa;'2'0wc]
X:keb_mono[;'7'1wc]
X:kfb_mono[;'5'0wc]
X:klb_mono[kbwa;'3'0wc]
X:krb_mono[krwa;'7'4wc]
X:ksb_mono[;'6'0wc]
X:kmb_mono[krwa;'0'7wc]
X:kxb_mono[kuwa;'4'0wc]
X:strchr k"=#_f&
X:symchr d_calpha.s_cnum|
X:getsym'0_sk!`d_symchr{_sb_sk?+b!'1_sk\!_g}
X:cpstr`d_strchr{w!_g}
X:cpnum`d_cnum{w!_g}
X:cp2ch`_g.oo=#_f&{w!}w!x_g
X:cpcom sw!")]}"x+b?_cp2ch
X:cpsym_getsym_sb_sk?ww
X:prtsym_getsym_sb_sk?_rwp[_kfb;_ksb]_sb_sk?ww_e
X:number d_cnum[_klb_cpnum_e]
X:pcomment_kcb.d"([{"tbs.d'1%=#[_cpcom;x_number]_e
X:gcomment_kcb.dw!_cp2ch_e
X:oper w!_g
X:error d_cnum[_kxb_cpnum_e;_oper]
X:string dk"=[w!_g_klb_cpstr_e.w!_g;_error]
X:char dkk=[w!_g_klb.w!_e_g;_string]
X:symbol d"_@"tbs'1%=#[w!_g_prtsym;_char]
X:escape d"\rfbw"tbs'1%=#[_keb.w!_g.w!_g_e;_symbol]
X:ctrl d"`([{;}])"tbs'1%=#[_krb.w!_g_e;_escape]
X:defn d":vn"tbs'1%=#[w!_g_kdb_cpsym_e;_ctrl]
X:commnt2 dkg=[w!_g_gcomment;_defn]
X:comment dk'=[w!_g_pcomment;_commnt2]
X:hlite_esh?#[wwy]_bk!_bp!'0_bc!_g`_f{_comment}x
X'( utility routines )
X:lines wgsx\-
X:ln_lines.s-
X:mc_mono[krwa;'1'7wc]
X:msg'0_lines.wmwl_mc
X:prmsg_msg.oo_emk!_emsg!ww_e
X:remsg_emsg?_emk?_prmsg
X:clmsg""_prmsg
X:clmark'1%_emy!
X:mod'1_mo!_clmark
X:line'64*_buf+'64
X:cline_ey?_line
X:cchar_cline.x_ex?+b?
X:content_line_suntrail
X:llen_content.sx
X:wn_sb_ntos.ww
X:adv so-tt+s
X:bak sx_srk?+
X:sort oo>[s]
X:region_ey?_emy?_sort
X'( file I/O )
X:clear_buf_maxln'64*k bf'0_esize!'0_mo!'0_ey!'0_eoff!
X:check_maxln<#d["text too long"_prmsg'1_ro!]
X:rdlines`d'64*_buf+'64_getl.xf@{\+d_check[y]}
X:name d_enk!_ename.sbm
X:setup'0d_ex!d_ey!_eoff!_display
X:load oo_name_clear fi'0_rdlines_esize!_setup ""fi
X:wrlines o-(d_line_suntrail.fw_nl\+)x
X:save_ename_enk?fo'0_esize?_wrlines""fo
X:rstynk_ynkfile.fo""fo
X'( text display )
X:displn'0o_eoff?-wm_line_hlite.wgx'64>["|"ww]
X:redisp_ey?_displn
X:clrln'0swmwl
X:displns_lines(i_ln_esize?<#[i_ln_clrln;i_ln_eoff?+_displn])
X:display_displns_remsg
X:sync_ex?_ey?_eoff?-wm
X'( editor commands )
X:ecle_ex?\-d'0<[x'63]_ex!
X:ecri_ex?\+d'63>[x'0]_ex!
X:down'1_ey\!_ey?_lines-\+_eoff?>['1_eoff\!_display]
X:ecdn_ey?_esize?\-<[_down]
X:up'1%_ey\!_ey?_eoff?<['1%_eoff\!_display]
X:ecup_ey?'0>[_up]
X:eref ws_display
X:quit_ynkfile.ft[_ynkfile.fx]weq
X:incpfx dw!k0-_pfx?'10*+_pfx!
X:epfx_msg_e'0_pfx!`d_cnum{_incpfx_key}d_exec
X:last_esize?_lines-'0_max_eoff!_esize?\-_ey!_display
X:chkln_ey?_esize?>[_esize?\-_ey!]
X:enpg_lines.d_ey\!_eoff\!_eoff?_esize?<#[_last;_chkln_display]
X:first'0_eoff!'0_ey!_display
X:eppg_lines%_eoff\!_eoff?_ey!_eoff?'0<[_first;_display]
X:getstr_prmsg'58'5_lines_prompt_e
X:srprompt_prmsg_srbuf_srk?'63'1_lines_prompt_e
X:esea"/"_srprompt.o##&[_srk!x_esrn;xx]
X:srchln o_line.t_adv_srbuf_srk?_sfind[xs_line.x-'1;x'0]
X:notfound"string not found"_prmsg
X:srchfw_ey?\+`d_esize?<{d'0_srchln[s_goto_ex!y]\+}x_notfound
X:colfre_region.o-\+(di+\-_line.x'3p+b?.k =#[rxxx'0y])xx'1
X:lnins sr>i_line.x_ex?+d\+'64_ex?-\-bmi_line.x_ex?+b!rx
X:lndel r>i_line.x_ex?+\+d\-'64_ex?-\-bm.k r<_line.x'63+b!
X:indent_region.o-\+(di+\-.k _lnins)x
X:outdent_region.o-\+(di+\-_lndel)x
X:eind_marked#[y]'63_colfre[_indent_display'1_mo!]
X:eoud_marked#[y]_ex?_colfre[_outdent_display'1_mo!]
X:eco0'0_ex!
X:adjust_eoff?'0<['0_eoff!]
X:inscr_eoff?_ey?>#_ey?_eoff?_lines+\->#&
X:goto d_ey!_inscr#[_lines'2/x-_eoff!_adjust;x]_display
X:goln d_esize?<[_goto;x]
X:egln_pfx?[_pfx?\-_goln;_last]
X:einf_msg"C"ww_ex?\+_wn" L"ww_ey?\+_wn"/"ww_esize?_wn_einf2
X:einf2" "ww_ename_enk?ww_mo?[", mod"ww]_ro?[", ro"ww]_e
X:eeol_cline_suntrail\-'0_max_ex!x
X:mark_key.km=
X:nomark"no mark"_prmsg
X:marked_emy?'1%=#['1;_nomark'0]
X:gomark.d'0<[_nomark.xx;_goln_ex!]
X:egmk_mark['0_emy?_gomark]
X:etsh_esh?#_esh!_display_esh?["hlite on";"hlite off"]_prmsg
X:eseb"?"_srprompt.o##&[_srk!x_esrp;xx]
X:eap1_eeol_eapp
X:yankc d_yanked!'1_ycols!_ynkfile.fooofw""fo_ynkdc
X:delchs r>_cline.x_ex?+i+di-'64_ex?-i-bm.r<_blnchs_mod
X:blnchs r>_cline.i-itt+s.k bfrx
X:ynkdc_delynk?[_cline.xts-_ex!_delchs_redisp_mod;xx]
X:yankl oos-_yanked!'0_ycols!_ynkfile.fooo_wrlines""fo_ynkdl
X:ynkdl_delynk?[o-s_goln_delblk_display_mod;xx]
X:restln_cline.x_ex?+'64_ex?-
X:edln_restln.oo_suntrail_yankc.k bf_redisp_mod
X:ehom_eoff?_ey!
X:ebot_eoff?_lines+\-_esize?\-_min_ey!
X:ein1_ebol_eins
X:delblk r>_cline.xdi'64*+s_maxln_ey?i+\+-'64*bmi%_esize\!rx
X:delln'1_delblk_display_mod
X:join_eeol_ecri_ey?\+_content_cline.x_ex?+sbm_delbelow_display
X:delbelow'1_ey\!_delln'1%_ey\!
X:ejnl_ey?_esize?\-<#_ey?_llen_ey?\+_llen+'64>|[wb;_join]
X:blnkblk'64*.k bf
X:insblk r>_cline.xdi'64*+_maxln_ey?-i-'64*bmrx
X:inslns d_insblk_cline.xo_blnkblk_esize\!
X:openln'0_ex!'1_inslns_display_eins
X:bfull_esize?+_maxln>#['0;"buffer full"_prmsg'1]
X:lfull_cline_suntrail.sx+'64>#['0;"line too long"_prmsg'1]
X:rsrchln o_line.t_bak_srbuf_srk?_srfind[xs_line.x-'1;x'0]
X:srend'64_srk?-
X:srchbk_ey?\-`d'0<#{d_srend_rsrchln[s_goto_ex!y]\-}x_notfound
X:esrp_ey?_ex?\-_rsrchln[_ex!;_srchbk]
X:eop0'1_bfull#[_openln]
X:noyank"nothing yanked"_prmsg
X:epa0_yanked?[_paste0;_noyank]
X:endins x_ex?[_ecle]
X:rplins_ex?'64<[_cline.x_ex?+b!'1_ex\!_redisp;wb]
X:rpldel_ex?'0>['1%_ex\!h_ex?+b?_cline.x_ex?+b!_redisp;wb]
X:rplcmd d_wkbs[x_rpldel;_rplins]
X:erpl_cline.hsbm_mod`_sync_key.d_wkesc#{_rplcmd}_endins
X:paste0_ycols?[_xpaste;_ypaste]
X:xpaste_yanked?_lfull#[_cpaste]
X:insblns r>_cline.x_ex?+di+'64_ex?-i-bm_cline.x_ex?+r<.k bf
X:readyb_ynkfile.fi_yanked?frx""fi
X:cpaste_yanked?_insblns_cline.x_ex?+_readyb_mod_redisp
X:rpt_msg_yanked?h_ntos.ww" line(s) "ww
X:rptpas_rpt"pasted"ww
X:ypaste_yanked?_bfull#[_lpaste_rptpas_mod]
X:lpaste_yanked?_inslns_ynkfile.fi_ey?_rdlines.x""fi_display
X:ext2_write[_quit]
X:eynl_restln_suntrail_yankc
X:eext w?kZ=[_ext2]
X:insch_cline.x_ex?+d\+'64_ex?-\-bm_cline.x_ex?+b!'1_ex\!
X:insert_cline_suntrail.sx'64=[wb;_insch_redisp]
X:delch'1_delchs
X:split'1_bfull#[_extend'1_inslns_copyover_display'0_ex!]
X:copyover_ey?\-_line.x_ex?+_cline.x'64_ex?-bm_blnkrest
X:blnkrest_ey?\-_line.x_ex?+'64_ex?-.k bf
X:bkspc_ex?#[wb;'1%_ex\!_delch_redisp]
X:edit d_wkbs[x_bkspc;_edit2]
X:edit2 d'13=[x_split;_insert]
X:eapp_ex?'63=[wb;_ecri_eins]
X:egmc_mark[_emx?_emy?_gomark]
X:ebsp_ex?['1%_ex\!_delch_redisp]
X:firstln_esize?#['1_esize!_buf'64.k bf]
X:eins_firstln_mod`_sync_key.d_wkesc#{_edit}_endins
X:emrk_mark[_ex?_emx!_ey?_emy!]
X:esrn_ey?_ex?\+_srchln[_ex!;_srchfw]
X:extend_esize?['1_ey\!]
X:eopn'1_bfull#[_extend_openln]
X:epas_yanked?[_paste;_noyank]
X:paste'1_ycols?[_ex;_ey]\!_paste0
X:erpc_key.d'13=[x_delch_split;_cline.x_ex?+b!_mod_redisp]
X:ebol_cline_sskipw[_cline.x-;'0]_ex!
X:edel_delch_redisp
X'( shadow file routines )
X:appwsfx_sname_snk?"w"_sappnd_snk!x
X:shfile_ename_enk?_sname.sbm_enk?_snk!_appwsfx_sname_snk?
X:cmpdef oo_mbuf_mk?_snext.xo_seql o_mbuf+\+b?k'=&
X:srchmeta fi`_mbuf'64_getl.f@{_mk!_cmpdef[xx'1y]}xxx'0d_mk!""fi
X:getmeta_shfile ooft[_srchmeta;xx"no shadow file"_prmsg'0]
X:mkshfile_shfile.ft#[_shfile.fo""fo]
X:mkmeta_shfile ooft[_srchmeta.x;_mkshfile.xx'0_mk!]
X:skipsym`_snext.ob?_symchr{}
X:defname_cline_skipsym.sx_cline.t-_snext
X:getdef_cline.xb?k:=[_defname'1;"no definition"_prmsg'0]
X:prmeta_ey?_eoff?-d#[\+;\-]'0swm_kmb._skipsym.www?x_e_display
X:evsh_getdef#[y]_getmeta[_mbuf_mk?_prmeta]
X:metapfx":"h_scopy_defname_sappnd"'( "_sappnd
X:metasfx" )"_sappnd
X:metapmt_metapfx.dtt_prmsg
X:trim_snext_snext'2-'0_max
X:wrtmrec_gpbuf_gpk?fw_nl'1_mwrt!
X:endwm_mwrt?#[_wrtmrec]
X:rplmeta_defname_cmpdef[_wrtmrec;_mbuf_mk?fw_nl.xx]
X:wrtmeta_shfile.fi`_mbuf'64_getl.f@{_mk!_rplmeta}x""fi
X:copymeta_mbuf_mk?_skipsym_snext_trim_gpbuf_scopy.d_gpk!
X:mkmrec_metapfx_gpbuf_gpk?_sappnd_metasfx_gpbuf_scopy_gpk!x
X:meta2tmp_tmpfile.fo_wrtmeta_endwm""fo
X:copyback_tmpfile.fi_shfile.fo`f?f@{f!}""fi""fo_tmpfile.fx
X:updmeta_gpk!x_mkmrec'0_mwrt!_meta2tmp_copyback
X:editmeta_copymeta_metapmt.d'62s-s_lines_prompt_e[_updmeta;xx]
X:eesh_getdef[_mkmeta_editmeta]
X'[ "next word" command ]
X:false x'0
X:true x'1
X:csym0 "@_"_smem
X:cnosym d_calnum.s_csym0|#
Xg| 1 = match, 0 = don't match, 2 = predicate |
X'vwskip_tbl
Xg| match          also match    end match       adjust |
X  '2 , @calnum , '2 , @csym0 , '2 , @calnum   , '0 ,
X  '2 , @cnum   , '1 , k'     , '2 , @cnum     , '0 ,
X  '1 , k"      , '2 , @false , '0 , k"        , '1 ,
X  '1 , k       , '2 , @false , '1 , k         , '0 ,
X  '1 , k[      , '2 , @false , '0 , k]        , '1 ,
X  '1 , k;      , '2 , @false , '0 , k]        , '1 ,
X  '1 , k(      , '2 , @false , '0 , k)        , '1 ,
X  '1 , k{      , '2 , @false , '0 , k}        , '1 ,
X  '1 , k`      , '2 , @false , '0 , k{        , '1 ,
X  '2 , @true   , '2 , @false , '2 , @cnosym   , '0 ,
X:wchk d?'2=['1c+?e;'1c+?=]
X:wpred_wskip`'1{oo_wchk.r>'2c+oo_wchk.r<|['2c+sxy]'5c+}
X:limx_ex?'63>['63_ex!]
X:wrdadj'2c+?
X:skip0'1_ex\!`_cchar.o=#{'1_ex\!}x_limx_wrdadj
X:skip1'1_ex\!`_cchar.o={'1_ex\!}x_limx_wrdadj
X:skipf'1_ex\!`_cchar.oe{'1_ex\!}x_limx_wrdadj
X:ewrd_fwrd.x
X:fwrd_cchar_wpred.d?'0=[d'1c+?_skip0;_fwrd2]
X:fwrd2 d?'1=[d'1c+?_skip1;d'1c+?_skipf]
X'( more editor commands )
X:rptyd_rpt_delynk?["deleted";"yanked"]ww
X:ynkblk_mark#[y]_marked[_region\+_yankl_rptyd]
X:sameln_ey?_emy?=
X:ynkcls1_mark[_ynkcls]
X:ynkcls_marked#[y]_sameln#[wby]_ynkcls2
X:ynkcls2_cline.x_ex?_emx?_sort.o-tt+s_yankc
X:ynkwrd_ey?_emy!_ex?_emx!_fwrd_ex\!_ynkcls
X:ynkzero_cline.x_ex?'0_ex!_yankc
X:yusage"usage [y]+[y][w]['m][`m]"_prmsg
X:dusage"usage [d]+[d][w]['m][`m]"_prmsg
X:dyusage_delynk?[_dusage;_yusage]
X:eyam_key.dky=[x_ey?d\+_yankl;_yam2]
X:yam2 dk'=[x_ynkblk;_yam3]
X:yam3 dk`=[x_ynkcls1;_yam4]
X:yam4 dkw=[_ynkwrd;_yam5]
X:yam5 k0=[_ynkzero;_dyusage]
X:dem2_key.dkd=[x_ey?d\+_yankl;_yam2]
X:edem'1_delynk!_dem2'0_delynk!
X:ezro_key'13=[_ey?_eoff!_display]
X'( colon commmands )
X:cqmod"modified, [!]=quit"_prmsg_key_clmsg.k!=[_quit]
X:cdebug"S: "_prmsg.wr_s.ffw?xws_display
X:cquit_mo?[_cqmod;_quit]
X:write_mo?[_write2;'1]
X:write2_enk?#["file has no name"_prmsg'0;_write3]
X:write3_ro?["read-only"_prmsg'0;_save"written"_prmsg'0_mo!'1]
X:rwrite_marked[_rwrite2]
X:rwrite2_gnbuf_gnk?"wrto"_getstr.o##&[_gnk!x_rwrite3;xx]
X:rwrite3_gnbuf_gnk?ft[_existmsg_key.k!=;'1]_rwrite4
X:existmsg"file exists, !=overwrite"_prmsg
X:rwrite4[_gnbuf_gnk?fo_region\+_wrlines""fo]
X:regionq"[r]=region, [q]=quit, other=all"_prmsg_key_clmsg
X:cwrite_regionq.dkr=[x_rwrite.y]kq=#[_write.x]
X:newfile"new file"_prmsg_name_clear_display
X:modified"modified, [!]=edit"
X:cedit_mo?[_modified_prmsg_key_clmsg;k!]_cedit2
X:cedit2 k!=#[y]_ename_enk?"edit"_getstr[_editfile;xx]
X:editfile ooft[_load;_newfile]
X:cpname_enk?_gnk!_ename_gnbuf_enk?bm
X:cname_cpname_gnbuf_gnk?"name"_getstr[_cname2;xx]
X:cname2 d_gnk!d_enk!_ename.sbm_mod
X:filelen_gnbuf_gnk?fi'0`h'64_getl.xf@{\+}""fi
X:readfile_gnbuf_gnk?ft[_readfil2;"no such file"_prmsg]
X:readfil2_filelen.d_bfull#[_readfil3;x]
X:readfil3_inslns_gnbuf_gnk?fi_ey?_rdlines.x""fi_mod_display
X:cread_gnbuf_gnk?"read"_getstr[_gnk!x_readfile;xx]
X:pause"press any key"_prmsg_key.x
X:wwc dk_=[x;w!]
X'0vwwrev
X:wwt_wwrev?d[knwa;kbwa]#_wwrev!
X:wwa d(ooi-+b?dk%=[x_wwt;_wwc])xx
X:wl'0'4pwm_wwa\+
X:ldhelp fi'0`h'128_getl.f@{hs_wl}xx""fi
X:showhlp ws_ldhelp_pause_display
X:chelp_hlpfile.ft[_hlpfile_showhlp;_chelp2]
X:chelp2_hlpfil2.ft[_hlpfil2_showhlp;"no help file"_prmsg]
X:canrpl_cline_suntrail.sx_srk?-_rpk?+'64>#
X:replace_srk?_delchs_rpk?_insblns_rpbuf_cline.x_ex?+_rpk?bm
X:sbmove_rpk?\-_ex\!
X:dosubst_canrpl[_replace_sbmove'1_rpn\!;'1_rps\!]
X:sbrpt_rpn?_rps?+[_msg_rpn?_wn" replaced"ww_sbrpt2]
X:sbrpt2_rps?[", "ww_rps?_wn" skipped"ww]
X:sbdone_display_sbrpt_e
X:home_first_eco0'0d_rpn!_rps!
X:setrgn_region_ergn!_goto'0_ex!
X:nxtinrgn_esrn_emk?#_ey?_ergn?>#&
X:subst_home`_esrn_emk?#{_dosubst}_sbdone
X:substr_marked[_home_setrgn`_nxtinrgn{_dosubst}_sbdone]
X:subsflg_regionq.dkr=[x_substr.y]kq=#[_subst]
X:subs2_rpbuf_rpk?"rplc"_getstr[_rpk!x_subsflg;xx]
X:csubs_srbuf_srk?"find"_getstr[_srk!x_subs2;xx]
X:cmdw dkw=[x_cwrite;x]
X:cmds dks=[x_csubs;_cmdw]
X:cmdr dkr=[x_cread;_cmds]
X:cmdq dkq=[x_cquit;_cmdr]
X:cmdn dkn=[x_cname;_cmdq]
X:cmdh dkh=ok?=|[x_chelp;_cmdn]
X:cmde dke=[x_cedit;_cmdh]
X:cmdd dkd=[x_cdebug;_cmde]
X:eccm"[ehnqrsw]"_prmsg" "ww_key_clmsg_cmdd
X'( key dispatch table )
X'vefn_tbl
X  '0   , '0   , @eppg, '0   , '0   , '0   , @enpg, @einf, '(^@)
X  '0   , '0   , '0   , '0   , @eref, '0   , '0   , '0   , '(^H)
X  '0   , '0   , '0   , '0   , '0   , '0   , '0   , '0   , '(^P)
X  '0   , '0   , '0   , '0   , '0   , '0   , '0   , '0   , '(^X)
X  '0   , '0   , '0   , '0   , @eeol, '0   , '0   , @egmk, '( )
X  '0   , '0   , '0   , '0   , '0   , '0   , '0   , @esea, '[(]
X  @eco0, @epfx, @epfx, @epfx, @epfx, @epfx, @epfx, @epfx, '(0)
X  @epfx, @epfx, @eccm, '0   , @eoud, @etsh, @eind, @eseb, '(8)
X  '0   , @eap1, '0   , '0   , @edln, '0   , '0   , @egln, '(@)
X  @ehom, @ein1, @ejnl, '0   , @ebot, '0   , @esrp, @eop0, '(H)
X  @epa0, '0   , @erpl, '0   , '0   , '0   , @eesh, '0   , '(P)
X  @ebsp, @eynl, @eext, '0   , '0   , '0   , @ebol, '0   , '(X)
X  @egmc, @eapp, '0   , '0   , @edem, '0   , '0   , '0   , '(`)
X  @ecle, @eins, @ecdn, @ecup, @ecri, @emrk, @esrn, @eopn, '(h)
X  @epas, '0   , @erpc, '0   , '0   , '0   , @evsh, @ewrd, '(p)
X  @edel, @eyam, @ezro, '0   , '0   , '0   , '0   , '0   , '(x)
X'( special key mapping )
X:key w?d_wkle[xkh;_ke2]
X:ke2 d_wkri[xkl;_ke3]
X:ke3 d_wkup[xkk;_ke4]
X:ke4 d_wkdn[xkj;_ke5]
X:ke5 d_wknp[x'6;_ke6]
X:ke6 d_wkpp[x'2]
X:exec'127&c_efn+?d[e;x]
X:loadinit'0md[_editfile;xx]
Xwi_rstynk_clear_loadinit`'0_pfx!'1{_sync_key_clmsg.d_exec.x}
EOF-ue.u
echo x - prog/vmaze.u
sed -e 's/^X//' >prog/vmaze.u <<'EOF-vmaze.u'
Xg| Useless example program: generate random mazes with    |
Xg| visual effects. Based on a C program I have once found |
Xg| in a signature. Cool algorithm! Thanks to the unknown  |
Xg| hacker!                                                |
X
X'159nxsize '47nysize _xsize_ysize*nk    '( max. sizes )
X'va_tbl_k.ca _a_k.c'0bf                 '( maze array )
X_xsize.vw _ysize.vh  '( actual size )
X'11nlen              '( max len. of a corridor )
X'vp                  '( current position )
X'1vq                 '( direction )
X'1000_rnd.vr         '( seed )
X'vnb_tbl'50a         '( numeric output buffer )
X'4nfg '3nbg          '( fore and background colors )
X:rev wo[_bg_fg.wc;krwa]
X:norm wo[_fg_bg.wc;knwa]
X:q0_p?._w?'2*>[_w?%;'0]
X:q1_p?._w?_h?*_w?'2*-.<[_w?;'0]
X:q2_p?_w?/sx._w?'2-.=['0;'1]
X:q3_p?_w?/sx.'1=['0;'1%]
X'vqn_tbl @q0, @q1, @q2, @q3,
X:dir_qn_q?c+?e_q!
X:plot_p?_w?/s\+wmk w!wr'1wu
X:move2_q?_p\! _q?._a_p?c+! _plot
X:move_q?##._a_q?'2*_p?+c+?#&[_move2_move2]
X:rand_r?'57*\+_r! _r?'7/x'3&_q!
X:pos_a_p?c+?'2*._p?s-._p!
X:corr_len(_rand_dir_move)_pos
X:maze_norm`_q?##._p?_w?\+=#|{_corr}
X:bgline d\-(k w!)
X:bgbox_rev.wg\-\-('0iwm_bgline)x
X:szcheck_w?_xsize>_h?_ysize>|[we"too big!"fw_nl.q]
X:setup wiwswg'2-_h!\-_w!_szcheck_w?\+_p!
X:end wgsx'0s\-wmweknwaw?xwe.q
X'0md[_ston_r!;xx]_setup_bgbox_r?_maze'0'0wm_nb_ntos.ww_end
EOF-vmaze.u
echo x - prog/vqueens.u
sed -e 's/^X//' >prog/vqueens.u <<'EOF-vqueens.u'
X'( useless example program: print N-queens solutions )
X
X'100nqmax       '( max. queens )
X'8vsize         '( board size; <= qmax )
X_size?.d*vtop   '( end of board )
X'vq_tbl_qmax.a  '( queens array )
X'0vnq           '( number of queens )
X:horiz_size?/xs_size?/x=
X:vert_size?/sxs_size?/sx=
X:dia_size?/t_size?/ t-_abs.tt-_abs=
X:shared oo_horiz[xx'1;_shared2]
X:shared2 oo_vert[xx'1;_dia]
X:safep_nq?(i\-c_q+?o_shared[rxx'0y])x'1
X:next_size?+_size?/x_size?*
X:back'1%_nq\! _nq?'0<[xq] x_nq?c_q+?_try
X:try\+d_size?/sx#o_top?<#|[_back]
X:put d_nq?c_q+!'1_nq\!_next
X:prline d'4_pfn_bl _size?/sx_size?(_bl_size?i-o=[k&;k.]f!)x_nl
X:print_size?(_size?i-c_q+?_prline)_nl
X:solvedp_nq?_size?=[_print\q_back]
X:qns`'1{d_safep[_put_solvedp;_try]}
X:queens d_size!d*_top!'0_nq!'0_qns
X'0m_ston'1_max_queens.q
EOF-vqueens.u
echo x - prog/vt100.u
sed -e 's/^X//' >prog/vt100.u <<'EOF-vt100.u'
Xg| useless VT100 control routines |
X
X:vtesc'27f!k[f!
X:vtclr_vtesc"H"fw_vtesc"J"fw
X:vtclreol_vtesc"K"fw
X:vthome_vtesc"H"fw
X:vtmove_vtesc.f,k;f!f,"H"fw
X:vtse_vtesc"m"fw
X:vtso_vtesc"7m"fw
X:vtup_vtesc"A"fw
EOF-vt100.u
echo x - prog/vtrect.u
sed -e 's/^X//' >prog/vtrect.u <<'EOF-vtrect.u'
Xg| useless example:                          |
Xg| draw random rectangles on a vt100 screen  |
Xg| yep, looks cooler on a real 9600-baud tty |
X
X:esc'27f!
X:move_esc.k[f!\+\+f,k;f!\+\+f,kHf!
X'vc 'vx 'vy
X:line(_c?f!ff)  '[ remove ff for extra speed ]
X:rect2(_x?_y?_move d_line'1_y\!)x
X:rect_c!t_y!t_x!_rect2.ff
X:xupair '79_rnd d'79s-_rnd
X:yupair '23_rnd d'23s-_rnd
X:urect_xupair_yupair r>sr<
X:uchar '95_rnd'32+
X_esc"[2J"fw `'1{_urect_uchar_rect}
EOF-vtrect.u
exit 0
#----- end of archive -----#
